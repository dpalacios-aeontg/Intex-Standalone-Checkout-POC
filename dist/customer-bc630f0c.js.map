{"version":3,"file":"customer-bc630f0c.js","mappings":"6IAEe,SAASA,EACpBC,EACAC,GAEA,IAAMC,EAAcC,OAAOC,iBAAiBJ,GAE5C,OAAOC,EAAWI,QACd,SAACC,EAAQC,G,MAAiB,OAAC,oBACpBD,KAAM,MACRC,GAAeL,EAAYM,kBAAiB,IAAAC,WAAUF,IAAc,GAF/C,GAI1B,CAAC,EAET,C,kBCbe,SAASG,EAAuBC,GAC3C,QAASA,EAAiBC,SAAS,uCACvC,C,kCCJe,SAASC,EAAYC,GAChC,IAAMC,EAAMC,SAASC,cAAc,OAEnCF,EAAIG,UAAYJ,EAEhB,IAAMK,EAASJ,EAAIK,cAAc,KAEjC,IAAKD,EACD,MAAO,GAGX,IAAME,EAAiBN,EAAIG,UAAUI,MAAMH,EAAOI,WAElD,MAAO,CAACF,EAAe,GAAIF,EAAOL,KAAMO,EAAe,GAC3D,C,uWCZaG,EACT,mGCMW,SAASC,EAAyB,G,IAC7CC,EAAQ,WAER,OAAO,QAAO,CACVC,OAAO,UACFC,IAAI,KACJC,QAAQL,EAAcE,EAASI,UAAU,iCACzCC,SAASL,EAASI,UAAU,mCAEzC,CCUA,SAASE,EACLN,GAEA,OAAO,SAACO,EAAM,G,IAAEC,EAAK,QAAEC,EAAG,MAAEP,EAAG,MAC3B,GAAKF,EAIL,MAAa,aAATO,EACOP,EAASI,UAAU,0BAA2B,CAAEI,MAAK,IAGnD,QAATD,GAAkBL,EACXF,EAASI,UAAU,qBAAsB,CAAEI,MAAK,EAAEN,IAAG,IAGnD,QAATK,GAAkBE,EACXT,EAASI,UAAU,qBAAsB,CAAEI,MAAK,EAAEC,IAAG,IAGnD,YAATF,EACOP,EAASI,UAAU,oCAAqC,CAAEI,MAAK,SAD1E,CAGJ,CACJ,CAEA,SAAe,IAAAE,UAAQ,SAA2C,G,IAC9DC,EAAU,aACVX,EAAQ,WACR,IAAAY,qBAAwBC,EAAW,cAAEC,EAAO,UAAEC,EAAK,QAAEC,EAAS,YAE9D,OAAO,QAAO,CACVC,WAAW,UAASZ,SAASL,EAASI,UAAU,sCAChDc,UAAU,UAASb,SAASL,EAASI,UAAU,qCAC/Ce,UAAU,UACLd,SAASL,EAASI,UAAU,qCAAuCS,GACnEV,QACGW,EACAd,EAASI,UAAU,4CAA8CS,GAEpEV,QACGY,EACAf,EAASI,UAAU,4CAA8CS,GAEpEJ,IACGO,EACAhB,EAASI,UAAU,iDAEtBF,IAAI,IAAKF,EAASI,UAAU,kDAEhCgB,OAAOrB,EAAyB,CAAEC,SAAQ,KAC1CoB,QACG,EAAAC,EAAA,GAAoC,CAChCV,WAAU,EACVP,UAAWE,EAAgCN,KAG3D,I,eCkBA,SAAe,EAAAsB,EAAA,IACX,IAAAC,YAAgF,CAC5EC,aAAc,SAACC,EAAQ,G,IAAW,UAAAC,eAAQ,IAAG,IAAAC,KAAI,GACpCF,EACb,EACAG,iBAAkB,SAAC,GAAiC,OAChDX,UAAW,GACXC,SAAU,GACVjB,MAAO,GACPkB,SAAU,GACVU,aAAc,CAAC,EACfC,uBANyC,2BAMU,GAAK,CAAC,KANT,EAQpDC,iBAAkB,SAAC,G,MACf/B,EAAQ,WACRW,EAAU,aAEJC,EAEL,QAF4B,EAAAD,EAAWqB,MACpC,SAAC,GAAqB,OAAP,cAAO,WACzB,eAAEC,aAEH,IAAKrB,EACD,MAAM,IAAIsB,MAAM,iCASpB,OANeC,EAAkC,CAC7CnC,SAAQ,EACRW,WAAU,EACVC,sBAAsB,EAAAwB,EAAA,GAAwBxB,IAItD,GA/BJ,EA1EA,SAAC,G,IAAED,EAAU,aAAE0B,EAAkB,qBAAEC,EAAiB,oBAAEC,EAAQ,WAAEC,EAAgB,mBAC1EC,GAA4B,IAAAC,UAAQ,WACtC,GAAKL,EAAL,CAIA,IAAI,EAAAM,EAAA,GAAeN,IAAqD,MAA9BA,EAAmBO,OAAgB,CACzE,IAAMC,EAAeR,EAAmBS,QAAQlD,MAAM,KAEtD,OAAIiD,EAAaE,OAAS,EAElB,gBAACC,EAAA,EAAgB,CACbC,KAAM,CAAEhD,MAAO4C,EAAa,GAAGK,QAC/BC,GAAG,+BAKR,gBAACH,EAAA,EAAgB,CAACG,GAAG,sC,CAGhC,OAAOd,EAAmBS,O,CAC9B,GAAG,CAACT,IAEJ,OACI,gBAACe,EAAA,EAAI,CACDC,UAAU,gBACVF,GAAG,8BACHG,OAAO,+BAEP,gBAACC,EAAA,EAAQ,KACJd,GACG,gBAACe,EAAA,EAAK,CAACjD,KAAMiD,EAAA,SAAkBf,GAEnC,uBAAKY,UAAU,uBACV1C,EAAW8C,KAAI,SAACC,GAAU,OACvB,gBAACC,EAAA,EAAgB,CACbC,aAAcF,EAAMG,KACpBC,WAAY,8BAAuBJ,EAAMG,MACzCH,MAAOA,EACPK,IAAKL,EAAMP,GACXa,gBAAiBN,EAAMO,OAAS,oBAAiBC,EACjD1B,iBAAkBA,GAPC,MAanC,uBAAKa,UAAU,gBACX,gBAACc,EAAA,GAAM,CACHC,SAAU9B,EACVa,GAAG,2BACHG,OAAO,2BACP/C,KAAK,SACL8D,QAASF,EAAA,YAET,gBAACnB,EAAA,EAAgB,CAACG,GAAG,oCAGzB,qBACIE,UAAU,2CAA0C,YAC1C,yBACViB,KAAK,IACLnB,GAAG,2BACHoB,SAAS,EAAAC,EAAA,GAAejC,IAExB,gBAACS,EAAA,EAAgB,CAACG,GAAG,2BAKzC,K,yFC/DA,SAAe,IAAAsB,OA3BwC,SAAC,G,IAAEC,EAAQ,WAAElC,EAAgB,mBAC1EmC,GAAc,IAAAC,cAChB,SAACC,GAAsB,OACnB,gBAACC,EAAA,GAAS,WACFD,EAAMnB,MAAK,CACfqB,aAAcF,EAAMnB,MAAMG,KAC1BV,GAAI0B,EAAMnB,MAAMG,KAChBtD,KAAK,QACLiC,iBAAkBA,IANH,GASvB,CAACA,IAGCwC,GAAe,IAAAtC,UAAQ,WAAM,uBAACM,EAAA,EAAgB,CAACG,GAAG,wBAArB,GAAgD,IAEnF,OACI,gBAAC8B,EAAA,EAAS,CACNC,MAAOP,EACPK,aAAcA,EACdnB,KAAK,QACLa,SAAUA,EACVlC,iBAAkBA,GAG9B,IC8KA,SAAe,EAAAlB,EAAA,IACX,IAAAC,YAA0E,CACtEK,iBAAkB,SAAC,G,IAAE,IAAA3B,MAAiB,OAClCA,WADsB,IAAG,KAAE,EAAO,EAGtCuB,aAAc,SAACC,EAAQ,G,IAAW,UAAA0D,uBAAgB,IAAG,IAAAxD,KAAI,GACpCF,EACrB,EACAM,iBAAkB,SAAC,GACf,OAAAhC,EAAyB,CAAEC,SADF,YACzB,GARR,EASG,IAAAyE,OArLH,SAAC,G,IACDxE,EAAK,QACLmF,EAAM,SACN,IAAAC,eAAAA,OAAc,IAAG,GAAK,EACtBC,EAAqB,wBACrB,IAAAC,eAAAA,OAAc,IAAG,IAAA5D,KAAI,EACrB6D,EAAc,iBACdC,EAAS,YACTC,EAAU,aACVlD,EAAgB,mBACCmD,EAAS,eAEpBC,GAAsB,IAAAlD,UAAQ,WAChC,OAAI4C,EACIE,EACO,uBAGJ,0BAGPvF,EACO,gCAGJ,oBACX,GAAG,CAACqF,EAAuBE,EAAgBvF,IAErC4F,GAAW,IAAAnD,UACb,WAAM,OACF,uBAAKW,UAAU,gBACX,gBAACc,EAAA,GAAM,CAACI,QAASgB,GACb,gBAACvC,EAAA,EAAgB,CAACG,GAAG,sBAH3B,GAON,CAACoC,IAGCO,GAAS,IAAApD,UAAQ,WACnB,OAAI8C,GAA4C,MAA1BA,EAAe5C,OAC1BiD,EAGPP,IAA0BE,EACtBH,EACO,gBAACU,EAAA,EAAc,CAACC,WAAS,IAGhCP,GAAsC,mBAAzBA,EAAUQ,WAChBJ,EAIP,yBACI,gBAACK,EAAA,EAAc,CAAC/C,GAAG,0BAA0BoB,QAASmB,IACtD,gBAACQ,EAAA,EAAc,CAAC/C,GAAG,gCAAgCoB,QAASgB,KAMpE,uBAAKlC,UAAU,gBACX,gBAACc,EAAA,GAAM,CACHd,UAAU,oCACVkB,QAASgB,EACThF,KAAK,UAEL,gBAACyC,EAAA,EAAgB,CAACG,GAAG,0BAEzB,gBAACgB,EAAA,GAAM,CAAC6B,UAAWX,EAAgB9E,KAAK,SAAS8D,QAASF,EAAA,YACtD,gBAACnB,EAAA,EAAgB,CAACG,GAAG,sBAIrC,GAAG,CACCqC,EACAF,EACAO,EACAH,EACAL,EACAE,EACAE,IAGEU,GAAQ,IAAAzD,UAAQ,WAClB,IAAK8C,EACD,OAAO,KAGH,IAAA5C,EAAW4C,EAAc,OAEjC,OACI,gBAAChC,EAAA,EAAK,CAACjD,KAAMiD,EAAA,SACG,MAAXZ,EACG,gBAACI,EAAA,EAAgB,CAACG,GAAG,yCAErB,gBAACH,EAAA,EAAgB,CACbG,GACe,MAAXP,EACM,8BACA,6BAM9B,GAAG,CAAC4C,IAEEY,GAAO,IAAA1D,UAAQ,WACjB,GAAI8C,GAA4C,MAA1BA,EAAe5C,OACjC,OAAO,KAGX,GAAI0C,GAAyBG,IAAcD,EAAgB,CAC/C,IAAAa,EAAuBZ,EAAS,OAAxBQ,EAAeR,EAAS,WAExC,OACI,yBACI,gBAACa,EAAA,EAAc,CACXrD,KAAM,CACFhD,MAAO0F,EACPY,QAASC,KAAKC,MAAMJ,EAAS,KAEjClD,GACmB,YAAf8C,EACM,wBACA,+C,CAO1B,OAAIX,IAA0BG,EACnB,gBAAC,EAAU,CAACjD,iBAAkBA,IAIrC,gCACI,yBACI,gBAACQ,EAAA,EAAgB,CAACG,GAAG,sBAEzB,gBAAC,EAAU,CAACX,iBAAkBA,IAG1C,GAAG,CAACgD,EAAgBF,EAAuBG,EAAWE,IAEtD,OACI,gBAACe,EAAA,EAAK,CACFC,wBAAwB,kBACxBC,yBAAyB,gBACzBC,OACI,gBAACC,EAAA,EAAW,KACR,gBAAC9D,EAAA,EAAgB,CAACG,GAAIyC,KAG9BR,OAAQA,EACRG,eAAgBA,EAChBwB,uBAAuB,GAEvB,gBAAC3D,EAAA,EAAI,KACD,gBAAC2C,EAAA,EAAc,CAACC,UAAWX,IAAmBpF,IAC7CkG,EACAC,EACAN,GAIjB,M,iCC3MMkB,EAAqE,SAAC,G,IAAEC,EAAG,MAAO,OACpF,gBAACC,EAAA,EAAiB,CACdlC,aAAc,gBAACsB,EAAA,EAAc,CAACrD,KAAM,CAAEgE,IAAG,GAAI9D,GAAG,yBAChDU,KAAK,iBAH2E,EAaxF,SAAe,IAAAY,OANmD,SAAC,G,IAAEwC,EAAG,MAAO,OAC3E,gBAAC1D,EAAA,EAAQ,CAAC4D,oBAAoB,2BAC1B,gBAACH,EAA8B,CAACC,IAAKA,IAFkC,I,gDCuB/E,SAAe,IAAAxC,OAzBgD,SAAC,G,IAC5Df,EAAK,QACL0D,EAAwB,2BACtB,OACF,gCACI,gBAACC,EAAA,GAAK,WACE3D,EAAK,CACT4D,QAAS5D,EAAM6D,MACflE,UAAU,gBACVF,GAAIO,EAAMG,KACVtD,KAAK,cAGT,gBAACiH,EAAA,EAAK,CAACC,QAAS/D,EAAMG,MAClB,gBAACb,EAAA,EAAgB,CACbG,GACIiE,EACM,mCACA,iDAfpB,ICqFN,SAAe,EAAA9F,EAAA,IACX,IAAAC,YAAgE,CAC5DK,iBAAkB,SAAC,G,IACf,IAAA3B,MAAAA,OAAK,IAAG,KAAE,EACV,IAAAyH,uBAAAA,OAAsB,IAAG,GAAK,EAE5B,OACFzH,MAAK,EACL0H,iBAHwB,4BAG4BD,EACpDE,eAAe,EAHb,EAKNpG,aAAc,SAACC,EAAQ,IACnBoG,EAD+C,2BAC7BpG,EACtB,EACAM,iBAAkB,SAAC,G,IAAE/B,EAAQ,WAAE8H,EAAgB,mBACrC7H,GAAQ,UACTA,MAAMD,EAASI,UAAU,iCACzBF,IAAI,KACJG,SAASL,EAASI,UAAU,kCAE3B2H,GAAa,QAAO,CAAE9H,MAAK,IAEjC,OAAI6H,EACOC,EAAW3G,OCjHnB,SAA0C,G,IACrD4G,EAAU,aACVhI,EAAQ,WAEFiI,EAEF,CAAC,EASL,OAPID,IACAC,EAAaL,eAAgB,UAAUM,MACnC,EAAC,GACDlI,EAASI,UAAU,oCAIpB,QAAO6H,EAClB,CDkGoBE,CAAiC,CAC7BH,aAAcF,EACd9H,SAAQ,KAKb+H,CACX,GA/BJ,EAgCG,IAAAtD,OAjGH,SAAC,G,IACD2D,EAAY,eACZC,EAAe,kBACfC,EAA4B,+BAC5BtC,EAAS,YACTuC,EAAa,gBACbT,EAAgB,mBAChBV,EAAwB,2BACxB5E,EAAgB,mBAEVgG,GAAc,IAAA5D,cAChB,SAAC6D,GAAoC,OACjC,gBAAC,GAAc,WAAKA,EAAU,CAAErB,yBAA0BA,IADzB,GAGrC,CAACA,IAGL,OACI,gBAAChE,EAAA,EAAI,CACDC,UAAU,gBACVF,GAAG,0BACHG,OAAO,2BAEP,gBAACC,EAAA,EAAQ,CACLmF,OACI,gBAACC,EAAA,EAAM,CAACC,QAAM,GACV,gBAAC5F,EAAA,EAAgB,CAACG,GAAG,mCAI7B,uBAAKE,UAAU,2BACX,uBAAKA,UAAU,sBACX,gBAAC,EAAU,CAACqB,SAAU6D,EAAe/F,iBAAkBA,KAErD4F,GAAgBhB,IACd,gBAACyB,EAAA,EAAc,CAAChF,KAAK,kBAAkBiF,OAAQN,IAGlDV,GAAoB,gBAACiB,EAAkB,CAAC9B,IAAKa,KAGlD,uBACIzE,UAAW,IAAW,oCAAqC,CACvD,kCAAmCb,KAGvC,gBAAC2B,EAAA,GAAM,CACHd,UAAU,uBACVF,GAAG,6BACH6C,UAAWA,EACX1C,OAAO,oCACP/C,KAAK,SACL8D,QAASF,EAAA,YAET,gBAACnB,EAAA,EAAgB,CAACG,GAAImF,OAIjCD,GAIjB,M,eEtFA,UAAe,EAAAW,EAAA,IANoB,WAAM,OACrC,uBAAKC,QAAQ,cAAcC,MAAM,8BAC7B,wBAAMC,EAAE,kbAFyB,ICMzC,UAAe,EAAAH,EAAA,IANyB,WAAM,OAC1C,uBAAKC,QAAQ,cAAcC,MAAM,8BAC7B,wBAAMC,EAAE,qxBAF8B,I,gBCkD9C,UAAe,IAAA1E,OAzC6C,SAAC,G,IAAE,IAAAjC,iBAAAA,OAAgB,IAAG,GAAK,EAC7EmC,GAAc,IAAAC,cAChB,SAACC,GAAsB,OACnB,gBAACuE,GAAA,EAAM,CAACC,eAAe,IAClB,SAAC,G,IAAEjE,EAAM,SAAEkE,EAAM,SAAO,OACrB,uBAAKjG,UAAU,uBACX,gBAACyB,EAAA,GAAS,WACFD,EAAMnB,MAAK,CACfyD,oBAAoB,uBACpBhE,GAAI0B,EAAMnB,MAAMG,KAChBtD,KAAM6E,EAAS,OAAS,WACxB5C,iBAAkBA,KAErBA,GACG,gBAACgF,EAAA,EAAK,CACFC,QAAS5C,EAAMnB,MAAMG,KACrBV,GAAI,UAAG0B,EAAMnB,MAAMG,KAAI,UACvBrB,kBAAkB,GAElB,gBAACQ,EAAA,EAAgB,CAACG,GAAG,6BAG7B,qBACIE,UAAU,uCACViB,KAAK,IACLC,QAAS+E,GAERlE,EAAS,gBAAC,GAAO,MAAM,gBAAC,GAAY,OAvBxB,GAFV,GA+BvB,CAAC5C,IAGCwC,GAAe,IAAAtC,UAAQ,WAAM,uBAACM,EAAA,EAAgB,CAACG,GAAG,2BAArB,GAAmD,IAEtF,OAAO,gBAAC8B,EAAA,EAAS,CAACC,MAAOP,EAAaK,aAAcxC,EAAmB,KAAOwC,EAAcnB,KAAK,WAAWrB,iBAAkBA,GAClI,ICkKA,UAAe,EAAAlB,EAAA,IACX,IAAAC,YAAgE,CAC5DK,iBAAkB,SAAC,G,IAAE,IAAA3B,MAAiB,OAClCA,WADsB,IAAG,KAAE,EAE3BkB,SAAU,GAFwB,EAItCK,aAAc,SAACC,EAAQ,IACnB8H,EADsC,kBAC7B9H,EACb,EACAM,iBAAkB,SAAC,G,IAAE/B,EAAQ,WACzB,OAAAD,EAAyB,CAAEC,SAAQ,IAAIoB,QACnC,QAAO,CACHD,UAAU,UAASd,SACfL,EAASI,UAAU,uCAH/B,GATR,EAgBG,IAAAqE,OAnLH,SAAC,G,IACD+E,EAAS,YACTlB,EAA4B,+BAC5BmB,EAAiB,oBACjBxJ,EAAK,QACLyJ,EAAoB,uBACpBC,EAAW,cACX3J,EAAQ,WACR,IAAAuC,SAAAA,OAAQ,IAAG,IAAAZ,KAAI,EACf4G,EAAa,gBACbV,EAAiB,oBACjB,IAAA+B,gBAAAA,OAAe,IAAG,IAAAjI,KAAI,EACtB,IAAAwD,iBAAAA,OAAgB,IAAG,IAAAxD,KAAI,EACvBkI,EAAW,cACXC,EAA2B,8BAC3BtH,EAAgB,mBAChB,IAAAuH,SAAAA,OAAQ,IAAG,EAAAC,EAAA,QAAsB,EAE3BC,GAAkB,IAAArF,cAAY,WAChC,OAAK3E,EAKD,qBAAGoD,UAAU,sCACT,gBAAC6C,EAAA,EAAc,CACXjD,KAAM,CAAEhD,MAAK,GACbkD,GAAG,0CACHoB,QAAShC,EACTe,OAAO,kBATR,IAaf,GAAG,CAACrD,EAAOsC,IAEX,OACI,gBAACa,EAAA,EAAI,CACDC,UAAU,gBACVF,GAAG,8BACHG,OAAO,+BAEP,gBAACC,EAAA,EAAQ,CACLmF,OACI,gBAACC,EAAA,EAAM,CAACC,QAAM,GACV,gBAAC5F,EAAA,EAAgB,CAACG,GAAG,uCAI5B0G,GACG,gBAACrG,EAAA,EAAK,CAACF,OAAO,+BAA+B/C,KAAMiD,EAAA,SCrGxD,SACX2C,EACA/F,GAIA,OAFa+F,EAAM+D,MAAQ/D,EAAM+D,KAAK3J,MAGlC,IAAK,kBACD,OAAOH,EAAU,oCAErB,IAAK,8BACD,OAAOA,EAAU,8CAErB,QACI,OAAOA,EAAU,0BAE7B,CDsFyB+J,CAAgBN,GAAa,SAAC9F,GAAQ,OAAA/D,EAASI,UAAU2D,EAAnB,KAI9CgG,IAAaC,EAAA,kBACV,gBAACxG,EAAA,EAAK,CAACjD,KAAMiD,EAAA,QACT,gBAAC8C,EAAA,EAAc,CAACrD,KAAM,CAAEhD,MAAK,GAAIkD,GAAG,gCAI3C4G,IAAaC,EAAA,4BACV,gBAACxG,EAAA,EAAK,CAACjD,KAAMiD,EAAA,QACT,gBAAC8C,EAAA,EAAc,CAACrD,KAAM,CAAEhD,MAAK,GAAIkD,GAAG,+BAI3C4G,IAAaC,EAAA,iBACV,gBAACxG,EAAA,EAAK,CAACjD,KAAMiD,EAAA,SACT,gBAAC0C,EAAA,EAAc,CACX/C,GAAG,oCACHoB,QAASqF,MAKnBG,IAAaC,EAAA,SACXD,IAAaC,EAAA,kBACb,gBAAC,EAAU,CAACtF,SAAU6D,EAAe/F,iBAAkBA,IAG3D,gBAAC,GAAa,CAACA,iBAAkBA,IAEjC,qBAAGa,UAAU,yBACT,4BACMqG,GACE,gBAACxD,EAAA,EAAc,CACX/C,GAAG,mBACHoB,QAAUY,EACV7B,OAAO,0BAGZoG,GACC,iCACc,uBACVpF,KAAOmF,EACPW,IAAI,sBACJC,OAAO,UAEP,gBAACrH,EAAA,EAAgB,CAACG,GAAG,sCAI/B4G,IAAaC,EAAA,SAA0BF,GACrC,4BACI,gBAAC5D,EAAA,EAAc,CACX/C,GAAG,2CACHoB,QAASqF,MAMzB,uBAAKvG,UAAU,gBACX,gBAACc,EAAA,GAAM,CACHC,SAAUuF,EACVxG,GAAG,6BACHG,OAAO,2BACP/C,KAAK,SACL8D,QAASF,EAAA,YAET,gBAACnB,EAAA,EAAgB,CAACG,GAAG,6BAGxB4G,IAAaC,EAAA,kBACV,qBACI3G,UAAU,2CAA0C,YAC1C,0BACViB,KAAK,IACLnB,GAAG,0BACHoB,SAAS,EAAAC,EAAA,GAAeqD,IAExB,gBAAC7E,EAAA,EAAgB,CAACG,GAAImF,KAI7BkB,GACGO,IAAaC,EAAA,iBACbD,IAAaC,EAAA,kBACT,qBACI3G,UAAU,2CAA0C,YAC1C,yBACViB,KAAK,IACLnB,GAAG,2BACHoB,SAAS,EAAAC,EAAA,GAAejC,IAExB,gBAACS,EAAA,EAAgB,CACbG,GACI4G,IAAaC,EAAA,2BACP,gCACA,2BAO7BD,IAAaC,EAAA,kBAAmCC,KAIjE,M,gBE9Me,SAASK,GAA+B,GACnD,IAAAxI,EAAsB,yBACtBD,EAAY,eACTJ,GAAM,UAH0C,2CAKnD,OAAO,oBACAA,GAAM,CACTK,uBAAwBA,GAA0BA,EAAuBiB,OAAS,EAClFlB,cAAc,EAAA0I,GAAA,GAAkC1I,IAExD,C,0BC2MA,UAAe,IAAAN,YAAkD,CAC7DK,iBAAkB,SAAC,G,IACI,IAAA3B,MAAAA,OAAK,IAAG,KAAE,EACV,IAAAyH,uBAAAA,OAAsB,IAAG,GAAK,EAE5B,OACrBzH,MAAK,EACL0H,iBAH2C,4BAGSD,EACpDE,eAAe,EAHM,EAKzBpG,aAAc,SAACC,EAAQ,IACnBoG,EAD+C,2BAC7BpG,EACtB,GAZJ,EAaG,IAAAgD,OAzM6F,SAAC,G,IAC7F6D,EAA4B,+BAC5BtC,EAAS,YACTwE,EAAU,aACVC,EAAY,eACZlC,EAAa,gBACbV,EAAiB,oBACjBO,EAAY,eACZC,EAAe,kBACfjB,EAAwB,2BACxBU,EAAgB,mBAChB4C,EAAI,OAGE,GAAsD,IAAAC,WAAS,GAA9DC,EAAsB,KAAEC,EAAyB,KAClD,GAA8B,IAAAF,UAAS,IAAtCG,EAAU,KAAEC,EAAa,KAC1B,GAAsC,IAAAJ,WAAS,GAA9CK,EAAc,KAAEC,EAAiB,KAClC,GAAwC,IAAAN,WAAS,GAAhDO,EAAe,KAAEC,EAAkB,KACpC,GAA4B,IAAAR,WAAS,GAApCS,EAAS,KAAEC,EAAY,KACxBC,EAA4B,WAC9BzD,EAAkB,CACd5H,MAAO6K,EACPnD,iBAAiB,GAEzB,EACM4D,GAAmB,IAAA3G,cAAY,SAAC4G,EAAwBvL,GAC1DsI,EAActI,GACd8K,EAAc9K,GACd4K,GAA2B5K,GAC3BgL,EAAkBO,GAEdA,GACAH,GAAa,EAErB,GAAG,CAACR,EAA2BtC,KAE/B,IAAAkD,YAAU,aACAf,EAAKgB,YAAcN,IAAcN,GAAcE,GACjDM,GAER,GAAG,CAACR,EAAYE,EAAgBI,IAEhC,IAAMO,GAAgB,IAAA/G,cAAY,SAACgH,GAC/BT,EAAmBS,EACvB,GAAG,KAqBH,IAAAH,YAAU,WAGN,OAfAjB,EAAY,CACRqB,SAAU,YACVC,UAAW,CACPC,UAAW,gBACXC,cAAeT,EACfvF,UAAW2F,EACXM,UAAWC,EACXC,UAAW,YACXN,SAAU,UAOX,WArBPpB,EAAa,CACToB,SAAU,aAoBD,CACjB,GAAG,IAEH,IAAMO,EAAuB,SACzBjJ,EACA5E,GACA,IAAM8N,EAAkB/M,SAASgN,eAAenJ,GAEhD,GAAIkJ,EACA,OAAO,EAAAhO,GAAA,GAAiBgO,EAAiB9N,EAKjD,EAEMgO,EAAc,8BAEdL,GAA8D,IAAAtH,cAAa,WAC7E,IAAM4H,EAAYJ,EAAqB,UAAGG,EAAW,WAAW,CAAC,QAAS,mBAAoB,eAAgB,eACxGE,EAAYL,EAAqB,UAAGG,EAAW,WAAW,CAAC,UAC3DG,EAAYN,EAAqB,UAAGG,EAAW,WAAW,CAAC,UAEjE,OAAOE,GAAaD,GAAaE,EAAY,CACzCC,UAAWF,EAAUG,MACrBC,UAAWL,EAAUI,MACrBE,qBAAsBN,EAAUI,MAChCG,eAAgBL,EAAUE,MAC1BI,gBAAiBR,EAAU,oBAC3BS,iBAAkBT,EAAU,cAC5BU,YAAaV,EAAU,sBACvBtI,CACR,GAAG,IAyBGsE,GAAc,IAAA5D,cAAY,SAAC6D,GAAoC,OACjE,gBAAC,GAAc,WACNA,EAAU,CACfrB,yBAA2BA,IAHkC,GAKlE,CACCA,IAGE+F,EAAanC,IAAmBI,EAAW,8CAAgD9C,EAEjG,OACI,gCACI,uBAAKjF,UAAU,iBACX,gBAAC+J,GAAA,EAAc,CACXC,wBAAsB,EACtBrH,UAAYkF,GAEZ,gBAAC3H,EAAA,EAAQ,CACLmF,QAAUsC,GACN,gBAACrC,EAAA,EAAM,CAACC,QAAM,GACV,gBAAC5F,EAAA,EAAgB,CAACG,GAAG,mCAI7B,uBAAKE,UAAU,2BACX,uBAAKA,UAAU,sBACX,uBAAKF,GAAG,kBACR,4BACGiF,GAAgBhB,IAA6B,gBAACyB,EAAA,EAAc,CAC3DhF,KAAK,kBACLiF,OAASN,IAGXV,GAAoB,gBAACiB,EAAkB,CACrC9B,IAAMa,KAId,uBAAKzE,UAAU,uCACP2H,GAAmBA,IAAmBI,IAAgB,gBAACjH,EAAA,GAAM,CAC7Dd,UAAU,6BACVe,SAAWwG,EACXzH,GAAG,oCACH6C,UAAYA,EACZzB,QAAU+G,EACVhI,OAAO,2CACP/C,KAAK,SACL8D,QAAUF,EAAA,YAEV,gBAACnB,EAAA,EAAgB,CAACG,GAAKgK,QAIhCnC,GAAkB3C,KA3EjC,uBACIhF,UAAU,+BACVF,GAAK,UAAGoJ,EAAW,WACnBe,YAAY,QAEZ,uBACIjK,UAAU,qBAEV,uBACIA,UAAU,+BACVF,GAAK,UAAGoJ,EAAW,cAG3B,uBACIlJ,UAAU,+BACVF,GAAK,UAAGoJ,EAAW,cAmEvC,KCtHA,8E,OACI,EAAAgB,MAAuB,CACnBC,sBAAsB,EACtBC,SAAS,EACTC,wBAAwB,GA8JpB,EAAAC,wBAAsC,WAC1C,EAAKC,SAAS,CACVJ,sBAAsB,EACtBE,wBAAwB,GAEhC,EAmEQ,EAAAG,wBAAsC,sD,8DAClC9D,EAAa+D,KAAKjJ,MAAK,S,8CAGvBkF,IAAaC,EAAA,SAA0B8D,KAAKC,WAC5C,GAAMD,KAAKE,qBAAqB,CAAE/N,MAAO6N,KAAKC,cAD9C,M,OACA,S,2CAGJD,KAAKF,SAAS,CACVJ,sBAAsB,I,6BAK1B,EAAAQ,qBAAwE,SAC5EvM,GAAM,2C,8DAEEwM,EAAmBH,KAAKjJ,MAAK,e,iBAGjC,O,sBAAA,GAAMoJ,EAAexM,I,cAArB,S,oBAEAqM,KAAKF,SAAS,CACVF,wBAAwB,I,6BAK5B,EAAAQ,sBAAwE,SAC5EC,GAAU,2C,8FAEJ,EASFL,KAAKjJ,MARLuD,EAAY,eACZgG,EAAe,kBACfC,EAAY,eACZ3G,EAAsB,yBACtB,IAAA4G,iBAAAA,OAAgB,IAAG,IAAA3M,KAAI,EACvB,IAAAkG,kBAAAA,OAAiB,IAAG,IAAAlG,KAAI,EACxB,IAAA4M,uBAAAA,OAAsB,IAAG,IAAA5M,KAAI,EAC7B6M,EAAuB,0BAGrBvO,EAAQkO,EAAWlO,MAAMiD,OACzBuL,GACFJ,IAAgB3G,QAAiCxD,E,iBAGhC,O,sBAAA,GAAMkK,EAAgB,CACnCnO,MAAK,EACLyO,8BACItG,IAAgB+F,EAAWxG,kBAErB8G,EACVE,6BAA4BR,EAAWxG,iBAEjC8G,K,OAOV,OAfQxL,EAAS,SASf,KAEFuL,EAAwBL,EAAWxG,kBAE7BiH,EAAW3L,EAAK4L,gBAEND,EAASE,uBAAyBF,EAASG,UAAYH,EAASI,0BACrE,CAAP,EAAOV,EAAiBtE,EAAA,mBAG5B,GAAM8D,KAAKmB,0C,cAAX,SAEAnB,KAAKC,gBAAa7J,E,aAYlB,O,aATI,EAAAgL,EAAA,GAAgB,IACA,yBAAf,EAAM3O,MACY,kCAAf,EAAMA,OAEVuN,KAAKC,gBAAa7J,EAElB2D,MAGA,EAAAqH,EAAA,GAAgB,IAA2B,MAAjB,EAAMtM,OACzB,CAAP,EAAO0L,EAAiBtE,EAAA,mBAGxB,EAAAkF,EAAA,GAAgB,IAA2B,MAAjB,EAAMtM,OACzB,CAAP,EAAO0L,EAAiBtE,EAAA,8BAG5BuE,EAAuB,G,gCAIvB,EAAAY,aAAoE,SACxEC,GAAW,2C,0EAEL,EAAoDtB,KAAKjJ,MAAvDwK,EAAM,SAAE,IAAA9F,SAAAA,OAAQ,IAAG,IAAA5H,KAAI,EAAE,IAAA2N,cAAAA,OAAa,IAAG,IAAA3N,KAAI,E,iBAGjD,O,sBAAA,GAAM0N,EAAOD,I,cAAb,SACA7F,IAEAuE,KAAKC,gBAAa7J,E,+BAElBoL,EAAc,G,+BAId,EAAAC,oBAAiE,SAAO9N,GAAM,2C,sEAGlF,OAFM,EAAoDqM,KAAKjJ,MAAvD,IAAA2K,cAAAA,OAAa,IAAG,IAAA7N,KAAI,EAAE,IAAA8N,iBAAAA,OAAgB,IAAG,IAAA9N,KAAI,EAErD,GAAM6N,EAAclF,GAA+B7I,K,cAAnD,SAEAgO,I,YAGI,EAAAC,kBAAgC,WAC5B,MAA4B,EAAK7K,MAAK,uBAAtB,IAAG,IAAAlD,KAAI,GAEdqI,EAAA,gBACrB,EAEQ,EAAA2F,0BAAwC,WACtC,MAA8D,EAAK9K,MAAjE+K,EAAU,aAAE,IAAAtB,iBAAAA,OAAgB,IAAG,IAAA3M,KAAI,EAAEU,EAAkB,qBAE3DA,GACAuN,EAAWvN,GAGfiM,EAAiBtE,EAAA,QACrB,EAEQ,EAAA6F,mBAAiC,WAC/B,MAAuD,EAAKhL,MAA1D+K,EAAU,aAAE,IAAAtB,iBAAAA,OAAgB,IAAG,IAAA3M,KAAI,EAAEkI,EAAW,cAEpDA,GACA+F,EAAW/F,GAGfyE,EAAiBtE,EAAA,QACrB,EAEQ,EAAA8F,kBAA6C,SAAC7P,GAC1C,IAAA8P,EAAqB,EAAKlL,MAAK,iBAEvC,EAAKkJ,WAAa9N,EAClB8P,EAAiBC,mBAAmB/P,EACxC,EAEQ,EAAAgP,uCAAqD,sD,oFACnD,EAIFnB,KAAKjJ,MAHLoL,EAA4B,+BAC5B,IAAApI,kBAAAA,OAAiB,IAAG,IAAAlG,KAAI,GACxBuO,EAA0B,+BAGIA,IAA+BC,EAAA,YAC7D,GAAMF,EAA6B,CAC/BpE,SAAUqE,EACVE,6BAA8BvI,EAC9BwI,8BAA+B,SAACC,GAAY,SAAKD,8BAA8BC,EAAnC,KAJhD,M,cACA,S,aAMAzI,I,oCASZ,QArZuB,aASb,YAAA0I,kBAAN,W,8HACU,EAOFzC,KAAKjJ,MANL2L,EAAkB,qBAClBC,EAAkB,qBAClBxQ,EAAK,QACL,IAAAyQ,QAAAA,OAAO,IAAG,IAAA/O,KAAI,EACd,IAAAgP,iBAAAA,OAAgB,IAAG,IAAAhP,KAAI,EACvBuO,EAA0B,6BAG9BpC,KAAKC,WAAa9N,E,iBAGd,O,sBAAA,GAAMwQ,K,cAAN,SAEIP,IAA+BC,EAAA,YAA/B,MACA,GAAMK,EAAmB,CAAC3E,SAAUqE,K,OAApC,S,sDAGJS,EAAiB,G,oBAGrB7C,KAAKF,SAAS,CAAEH,SAAS,IAEzBiD,I,YAGE,YAAAE,qBAAN,W,wHACU,EAIF9C,KAAKjJ,MAHL,IAAAgM,qBAAAA,OAAoB,IAAG,IAAAlP,KAAI,EAC3BuO,EAA0B,6BAC1B,IAAAS,iBAAAA,OAAgB,IAAG,IAAAhP,KAAI,E,iBAIvB,O,sBAAA,GAAMkP,EAAqB,CAAEhF,SAAUqE,K,cAAvC,S,+BAEAS,EAAiB,G,+BAIzB,YAAA7H,OAAA,WACY,IAAAiB,EAAa+D,KAAKjJ,MAAK,SACzB,EAAoCiJ,KAAKP,MAAvCC,EAAoB,uBAAEC,EAAO,UAC/BqD,EAAwB/G,IAAaC,EAAA,QACrC+G,EAAgChH,IAAaC,EAAA,gBAC7CgH,GAAyBF,IAA0BC,EAEzD,OACI,gBAACE,EAAA,EAAgB,CAACjL,WAAYyH,GACzBD,GAAwBM,KAAKoD,2BAC7BF,GAAyBlD,KAAKqD,kBAC9BL,GAAyBhD,KAAKsD,kBAC9BL,GAAiCjD,KAAKuD,0BAGnD,EAEQ,YAAAD,gBAAR,WACU,MAiBFtD,KAAKjJ,MAhBLuD,EAAY,eACZkJ,EAAoB,uBACpBC,EAAiB,oBACjBV,EAAoB,uBACpB5Q,EAAK,QACLuQ,EAAkB,qBAClB,IAAAgB,oBAAAA,OAAmB,IAAG,GAAK,EAC3B,IAAAC,iCAAAA,OAAgC,IAAG,GAAK,EACxC,IAAAC,eAAAA,OAAc,IAAG,GAAK,EACtBC,EAAY,eACZ7J,EAAgB,mBAChBV,EAAwB,2BACxBwK,EAAmB,sBACnB,IAAAjB,iBAAAA,OAAgB,IAAG,IAAAhP,KAAI,EACvB+I,EAAI,OACJlI,EAAgB,mBAGpB,OACIoP,EACI,gBAAC,GAAe,CACZxJ,aAAeA,EACfC,gBACI,gBAACwJ,EAAA,EAAkB,CACfP,qBAAsBA,EACtB7G,aAAcoG,EACdrG,WAAYgG,EACZkB,eAAgBA,EAChBI,UAAWP,EACXQ,QAASpB,IAGjBrI,6BAA6B,oBAC7BZ,uBAAyBiK,EACzBlH,aAAeoG,EACf5Q,MAAQ6N,KAAKC,YAAc9N,EAC3BuK,WAAagG,EACbxK,UAAYwL,GAAuBE,GAAkBD,EACrDlJ,cAAgBuF,KAAKgC,kBACrBjI,kBAAoBiG,KAAKI,sBACzBpG,iBAAmBA,EACnBV,yBAA2BA,EAC3BsD,KAAOA,IAGf,gBAAC,EAAS,CACNtC,aAAcA,EACdC,gBACI,gBAACwJ,EAAA,EAAkB,CACfP,qBAAsBA,EACtB7G,aAAcoG,EACdrG,WAAYgG,EACZkB,eAAgBA,EAChBI,UAAWP,EACXQ,QAASpB,IAGjBrI,6BAA6B,oBAC7BZ,uBAAwBiK,EACxB1R,MAAO6N,KAAKC,YAAc9N,EAC1B+F,UACIwL,GAAuBE,GAAkBD,EAE7ClJ,cAAeuF,KAAKgC,kBACpBjI,kBAAmBiG,KAAKI,sBACxBpG,iBAAkBA,EAClBV,yBAA0BA,EAC1B5E,iBAAkBA,GAG9B,EAEQ,YAAA0O,yBAAR,WACU,MAAmDpD,KAAKP,MAAtDC,EAAoB,uBAAEE,EAAsB,yBAE9C,EACFI,KAAKjJ,MADDmN,EAAoB,uBAAEC,EAAgB,mBAAEC,EAAW,cAAE1P,EAAgB,mBAG7E,OACI,gBAAC,EAAc,CACXvC,MAAO6N,KAAKC,WACZzI,sBAAuBoI,EACvBtI,OAAQoI,EACRnI,eAAgB2M,EAChBzM,eAAgBuI,KAAKH,wBACrBxI,iBAAkB2I,KAAKE,qBACvBvI,UAAWyM,EACX1M,eAAgByM,EAChBzP,iBAAkBA,GAG9B,EASQ,YAAA6O,wBAAR,WACU,MAMFvD,KAAKjJ,MALLsN,EAAqB,wBACrB7P,EAAiB,oBACjBD,EAAkB,qBAClB+E,EAAwB,2BACxB5E,EAAgB,mBAGpB,OACI,gBAAC,EAAiB,CACdH,mBAAoBA,EACpB1B,WAAYwR,EACZ7P,kBAAmBA,EACnBC,SAAUuL,KAAK6B,0BACfjO,SAAUoM,KAAKyB,oBACfnI,yBAA0BA,EAC1B5E,iBAAkBA,GAG9B,EAEQ,YAAA2O,gBAAR,WACU,MAaFrD,KAAKjJ,MAZLuN,EAAU,aACVnS,EAAK,QACLwJ,EAAiB,oBACjBC,EAAoB,uBACpB2I,EAAc,iBACdL,EAAoB,uBACpBrI,EAAW,cACX2I,EAAwB,2BACxBpC,EAA0B,6BAC1BrG,EAAW,cACXrH,EAAgB,mBAChBuH,EAAQ,WAGZ,OACI,gBAAC,GAAS,CACNP,UAAW6I,EACX/J,6BACI4H,EACM,oBACA,oCAEVjQ,MAAO6N,KAAKC,YAAc9N,EAC1BwJ,kBAAmBA,EACnBuI,qBAAsBA,EACtBtI,qBAAsBA,IAAyB0I,EAC/CzI,YAAaA,EACbpH,SAAUuL,KAAK+B,mBACftH,cAAeuF,KAAKgC,kBACpBjI,kBAAmBiG,KAAKmB,uCACxBrF,gBAAiBkE,KAAK4B,kBACtBvK,iBAAkB2I,KAAKD,wBACvBtE,SAAUuE,KAAKqB,aACfrF,4BAA6BwI,EAC7BzI,YAAaA,EACbrH,iBAAkBA,EAClBuH,SAAUA,GAGtB,EAwKQ,YAAAsG,8BAAR,SAAsCC,GACLxC,KAAKjJ,MAAK,iBAEtB0N,8BAA8BjC,EACnD,EACJ,EArZA,CAAuB,EAAAkC,WAuZhB,SAASC,GAA+B,G,IAC3CC,EAAe,kBACfC,EAAa,gBAGT,EAmBAA,EAAa,KAlBTC,EAAiB,oBACjBC,EAAwB,2BACxBC,EAAW,cACXjE,EAAW,cACXkE,EAAc,iBACdC,EAAS,YACTC,EAAgB,mBAChBC,EAAO,UAEX,EASAP,EAAa,OATHQ,EAAc,iBAAEC,EAAmB,sBAAEC,EAA6B,gCAC5E,EAQAV,EAAa,SAPTnB,EAAmB,sBACnBC,EAAgC,mCAChC6B,EAAsB,yBACtB3J,EAAW,cACXqI,EAAoB,uBACpBuB,EAAyB,4BAI3BC,EAAON,IACPO,EAAiBb,IACjBc,EAAWZ,IACXlE,EAAWC,IACXqD,EAAca,IACdY,EAASX,IACXY,GAAuB,EAG3B,GAAIJ,EAAM,CACN,IAAMK,EAAYZ,EAAiB,OAAQ9C,EAAA,aACrC2D,GAAcD,aAAS,EAATA,EAAWE,mBAAmBC,cAAc,EAC1DC,EAAoD,QAAvBT,EAAKU,SAASC,OAAkB,EAEnEP,EAAuBE,GAAeG,C,CAG1C,IAAKP,IAAaC,EACd,OAAO,KAIP,MAMAA,EAAmF,iBAL/E7L,EAAgB,mBAChBV,EAAwB,2BACxBsC,EAAoB,uBACpB4I,EAAwB,2BAIhC,MAAO,CACHH,sBAAuBU,IACvBzK,aAAcuL,EAAOS,cAAcC,qBACnC9C,kBAAmBoC,EAAO1U,iBAAiBqV,wBAC3C1E,WAAY8C,EAAgB9C,WAC5BJ,cAAekD,EAAgB6B,sBAC/BnG,gBAAiBsE,EAAgBtE,gBACjCH,eAAgByE,EAAgB8B,gBAChC9M,uBAAwBiM,EAAOS,cAAcK,wBAC7C5D,qBAAsB6B,EAAgB7B,qBACtCZ,6BAA8ByC,EAAgBzC,6BAC9ChQ,OAAOwT,aAAc,EAAdA,EAAgBxT,SAAS2O,aAAQ,EAARA,EAAU3O,OAC1CgB,UAAW2N,aAAQ,EAARA,EAAU3N,UACrBwI,kBAAmBkK,EAAOe,MAAMC,mBAChCnE,mBAAoBkC,EAAgBlC,mBACpClO,kBAAmBiR,IACnBlR,mBAAoBgR,IACpBhF,gBAAgBoF,aAAc,EAAdA,EAAgBtQ,IAChCqO,oBAAqBA,IACrBC,iCAAkCA,IAClCC,eAAgB4B,IAChB5J,qBAAoB,EACpB4I,yBAAwB,EACxBD,eAAgBsB,EAAO1U,iBAAiB2V,qBACxCjL,YAAaA,IACbqI,qBAAsBA,IACtBE,YAAW,EACXD,iBAAkBmB,IAClBtL,iBAAgB,EAChBoI,2BAA4ByD,EAAO1U,iBAAiBiR,iCAA8BhM,EAClFkD,yBAAwB,EACxBiI,OAAQqD,EAAgBmC,eACxBhL,YAAasJ,IACbvB,oBAAqBgC,EACrBnD,mBAAoBiC,EAAgBjC,mBACpCjO,kBAAkB,EAAAxD,EAAA,GAAuB2U,EAAO1U,kBAExD,CAEA,UAAe,EAAA6V,EAAA,IAAc,EAAAC,EAAA,GAAatC,GAAb,CAA6CuC,I,kDCvlB3D,SAASzK,EAAkC0K,GAGtD,IAAMpT,EAA+D,GAoBrE,OAlBA,IAAAqT,OAAMD,GAAoB,SAAC1N,EAAOxD,GAC9B,IAAIoR,EAEJ,IAAI,IAAAC,QAAO7N,GAAQ,CACf,IAAM8N,GAAW,IAAAC,WAAU/N,EAAMgO,WAAa,GAAGC,WAAY,EAAG,KAC1DC,GAAS,IAAAH,UAAS/N,EAAMmO,UAAUF,WAAY,EAAG,KAEvDL,EAAa,UAAG5N,EAAMoO,cAAa,YAAIN,EAAQ,YAAII,E,MAEnDN,EAAa5N,EAGjB1F,EAAa+T,KAAK,CACdC,QAAS9R,EACToR,WAAU,GAElB,IAEOtT,CACX,C,wECUA,SAAe,E,SAAA,IAvBoE,SAAC,G,IAChFoB,EAAI,OACJE,EAAE,KACFnD,EAAQ,WACRuE,EAAO,UACPjB,EAAM,SAEAwS,EAAmB9V,EAASI,UAAU+C,EAAIF,GAC1C8S,GAAe,OAAYD,GAEjC,OAAOC,EAAahT,OAChB,gCACKgT,EAAa,GACd,iCAAczS,EAAQgB,KAAK,IAAIC,SAAS,OAAeA,IAClDwR,EAAa,IAEjBA,EAAa,IAGlB,gCAAGD,EAEX,G,wGCsBA,SAAe,IAAArR,OAvCsD,SAAC,G,IAClE0C,EAAmB,sBACnB,IAAA/C,SAAAA,OAAQ,IAAG,GAAK,EAChBY,EAAY,eACZN,EAAQ,WACRb,EAAI,OACJV,EAAE,KAEIqF,GAAc,IAAA5D,cAChB,SAAC,G,IAAElB,EAAK,QAAmB,OACvB,gCACI,gBAAC,KAAa,WACNA,EAAK,CACT4D,UAAW5D,EAAM6D,MACjBnD,SAAUA,EACVjB,GAAIA,GAAMO,EAAMG,KAChBrD,MAAOwE,KAGX,gBAAC,IAAc,CACXgR,QAAS,UAAG7S,QAAAA,EAAMU,EAAI,wBACtBA,KAAMA,EACNP,OAAQ,WAAG,IAAAvE,WAAU8E,GAAK,0BAbX,GAiB3B,CAACO,EAAUjB,EAAI6B,EAAcnB,IAGjC,OACI,gBAAC,IAAc,CACXsD,oBAAqBA,EACrBtD,KAAMA,EACNa,SAAUA,EACVoE,OAAQN,GAGpB,G,qGCnBA,SAtBsB,IAAAyN,aAClB,SACI,EACAC,GADE,IAAA/O,EAAmB,sBAAE3G,EAAK,QAAE2C,EAAE,KAAKgT,GAAI,UAAzC,sCAEC,OACD,gCACI,gBAAC,KAAK,WACEA,EAAI,CACR9S,UAAW,IACP,gBACA,kCACA8D,GAEJhE,GAAIA,EACJ+S,IAAKA,EACL3V,KAAK,cAET,gBAAC,IAAK,CAACkH,QAAStE,GAAK3C,G,wKCfjC,SAL2C,EAAA4V,EAAA,GAAgBC,EAAA,EAAe,CACtEC,kBAAmB,WACnBC,UAAW,SAAChP,EAAOxD,GAAQ,MAAQ,SAARA,KAAoBwD,CAApB,I,gDCyB/B,SAxBmB,IAAA0O,aACf,SACI,EACAC,GADE,IAAA/O,EAAmB,sBAAE3G,EAAK,QAAE+G,EAAK,QAAED,EAAO,UAAEnE,EAAE,KAAKgT,GAAI,UAAzD,wDAEC,OACD,gCACI,gBAAC9O,EAAA,GAAK,WACE8O,EAAI,CACR7O,QAASA,EACTjE,UAAW,IACP,aACA,+BACA8D,GAEJhE,GAAIA,EACJ+S,IAAKA,EACL3V,KAAK,QACLgH,MAAOA,KAEX,gBAACC,EAAA,EAAK,CAACC,QAAStE,GAAK3C,G,6BC4JjC,SAAe,IAAAiE,MAAK,GAlKuD,SAAC,GACrD,sBAAnB,IACA+R,EAAI,OACJC,EAAS,YACTtT,EAAE,KACFU,EAAI,OACJ,IAAAa,SAAAA,OAAQ,IAAG,IAAA/C,KAAI,EACf+U,EAAO,UACPpJ,EAAW,cACX9K,EAAgB,mBAChB+E,EAAK,QACF4O,GAAI,UAXiE,sHAahEQ,EAAgBH,EAAI,YACtBI,GAAmB,IAAAhS,cACrB,SAACiS,EAAWC,GACR,OAAApS,GAAS,oBACFoS,GAAK,CACRzM,OAAQ,CACJxG,KAAI,EACJ0D,MAAOsP,KAJf,GAOJ,CAACnS,EAAUb,IAGf,OAAQ4S,GACJ,KAAKM,EAAA,WACD,OACI,gCACI,uBACI1T,UAAW,IACP,CAAE,oBAAqBb,GACvB,CAAE,0BAA2BA,KAEjC,gBAACwU,EAAA,EAAe,OAEpB,qCACSb,EAAY,CACjB9S,UAAW,IACP,CAAE,kBAAmBb,GACrB,6CACH,YACU,UAAGW,EAAE,WAChBA,GAAIA,EACJU,KAAMA,EACNa,SAAUA,EACV6C,MAAiB,OAAVA,EAAiB,GAAKA,IAE5B+F,GAAe,0BAAQ/F,MAAM,IAAI+F,GACjCoJ,GACGA,EAAQjT,KAAI,SAAC,G,IAAEjD,EAAK,QAASyW,EAAW,QAAO,OAC3C,0BAAQlT,IAAKkT,EAAa1P,MAAO0P,GAC5BzW,EAFsC,MASnE,KAAKuW,EAAA,QACD,OAAKL,GAAYA,EAAQ3T,OAKrB,gCACK2T,EAAQjT,KAAI,SAAC,G,IAAEjD,EAAK,QAASyW,EAAW,QAAO,OAC5C,gBAAC,GAAU,WACHd,EAAI,CACR7O,QAAS2P,IAAgB1P,EACzBpE,GAAI,UAAGA,EAAE,YAAI8T,GACblT,IAAKkT,EACLzW,MAAOA,EACPqD,KAAMA,EACNa,SAAUA,EACVpB,OAAQ,UAAGH,EAAE,YAAI8T,EAAW,UAC5B1P,MAAO0P,IAViC,KAL7C,KAqBf,KAAKF,EAAA,WACD,OAAKL,GAAYA,EAAQ3T,OAKrB,gCACK2T,EAAQjT,KAAI,SAAC,G,IAAEjD,EAAK,QAASyW,EAAW,QAAO,OAC5C,gBAACC,EAAA,GAAa,WACNf,EAAI,CACR7O,UAAS6P,MAAMC,QAAQ7P,IAASA,EAAM8P,SAASJ,GAC/C9T,GAAI,UAAGA,EAAE,YAAI8T,GACblT,IAAKkT,EACLzW,MAAOA,EACPqD,KAAMA,EACNa,SAAUA,EACVpB,OAAQ,UAAGH,EAAE,YAAI8T,EAAW,aAC5B1P,MAAO0P,IAViC,KAL7C,KAqBf,KAAKF,EAAA,OACD,OACI,gBAAC,KAAe,WACPZ,EAAY,CACjBpR,aAAa,MAIbuS,kBAAkB,mCAClBjU,UAAW,IAAW,0CAA2C,CAC7D,iBAAkBb,IAEtB+U,WAAYZ,EACZa,QAASrB,EAAKjW,IAAM,IAAIuX,KAAK,UAAGtB,EAAKjW,IAAG,oBAAgBgE,EACxDwT,QAASvB,EAAK1V,IAAM,IAAIgX,KAAK,UAAGtB,EAAK1V,IAAG,oBAAgByD,EACxDL,KAAMA,EACNa,SAAUkS,EACVe,gBAAiBhB,EAAYiB,cAC7BC,gBAAgB,mCAChBC,UAAU,IAAA1C,QAAO7N,GAASA,OAAQrD,KAI9C,KAAK6S,EAAA,YACD,OACI,gBAACgB,EAAA,GAAQ,WACA5B,EAAY,CACjBhT,GAAIA,EACJU,KAAMA,EACNa,SAAUA,EACVpB,OAAQ,UAAGH,EAAE,SACb5C,KAAMkW,EACNjU,iBAAkBA,EAClB+E,MAAOA,KAInB,QACI,OACI,gBAACzC,EAAA,GAAS,WACFqR,EAAI,CACRhT,GAAIA,EACJU,KAAMA,EACNa,SAAUA,EACV4I,YAAaA,EACbhK,OAAQ,UAAGH,EAAE,YACTsT,IAAcM,EAAA,WAAgC,WAAa,QAE/DxW,KAAMkW,EACNjU,iBAAkBA,EAClB+E,MAAOA,KAI3B,K,yBC5HA,SAAe,IAAA9C,OAlD4D,SAAC,G,IACxEnB,EAAM,SACN0U,EAAa,gBACbC,EAAc,iBAERC,GAAuB,IAAAtT,cACzB,SAACkS,GACGA,EAAMtS,iBACNwT,GACJ,GACA,CAACA,IAGCG,GAAwB,IAAAvT,cAC1B,SAACkS,GACGA,EAAMtS,iBACNyT,GACJ,GACA,CAACA,IAGL,OACI,sBAAI5U,UAAU,2BACV,sBAAIA,UAAU,0BACV,gBAACL,EAAA,EAAgB,CAACG,GAAG,oBAGzB,sBAAIE,UAAU,0BACV,iCACe,UAAGC,EAAM,uBACpBgB,KAAK,IACLC,QAAS2T,GAET,gBAAClV,EAAA,EAAgB,CAACG,GAAG,yBAI7B,sBAAIE,UAAU,0BACV,iCACe,UAAGC,EAAM,wBACpBgB,KAAK,IACLC,QAAS4T,GAET,gBAACnV,EAAA,EAAgB,CAACG,GAAG,0BAKzC,ICtCA,IAAMiV,EAAyE,SAAC,G,IAC5E,IAAAhS,KAAQ3E,EAAM,SAAE4W,EAAM,SACtBlV,EAAE,KACF3C,EAAK,QACLqD,EAAI,OACJ,IAAAa,SAAAA,OAAQ,IAAG,IAAA/C,KAAI,EACf+U,EAAO,UACPd,EAAI,OACJ0C,EAAM,SAEAC,GAAkB,IAAA3T,cAAY,WAChC,IAAM4T,GAA0B,IAAAC,OAAMhX,EAAQoC,IAAS,IAEvD,IAAA6U,YACIhC,EAAQjT,KAAI,SAAC,GAAc,OAAP,OAAO,IAC3B+U,GACFG,SAAQ,SAACC,GAAQ,OAAAhD,EAAKgD,EAAL,IAEnBlU,GAAS,IAAA+T,OAAMhX,EAAQoC,GAC3B,GAAG,CAACA,EAAMa,EAAUgS,EAASd,EAAMnU,IAE7BoX,GAAmB,IAAAjU,cAAY,aACD,IAAA6T,OAAMhX,EAAQoC,IAAS,IAEzC8U,SAAQ,WAAM,OAAAL,EAAO,EAAP,IAE5B5T,GAAS,IAAA+T,OAAMhX,EAAQoC,GAC3B,GAAG,CAACA,EAAMa,EAAU4T,EAAQ7W,IAEtBqX,GAAoB,IAAAlU,cACtB,SAACkS,GACG,IAAM0B,GAA0B,IAAAC,OAAMhX,EAAQoC,IAAS,GACjD,EAAqBiT,EAAMzM,OAAzB9C,EAAK,QAAS,UAGlBqO,EAAKrO,GAEL+Q,EAAOE,EAAcO,QAAQxR,IAGjC7C,GAAS,IAAA+T,OAAMhX,EAAQoC,GAC3B,GACA,CAACA,EAAMa,EAAUkR,EAAM0C,EAAQ7W,IAGnC,OACI,gBAACuX,EAAA,EAAkB,CAACC,UAAU,IAAAR,OAAMJ,EAAQxU,KAAS,IAAA4U,OAAMJ,EAAQxU,GAAMd,QACpEvC,EAEAkW,EAAQ3T,OAAS,GACd,gBAAC,EAAoB,CACjBiV,cAAeO,EACfN,eAAgBY,EAChBvV,OAAQH,IAIhB,gBAAC,EAAY,CACTsT,UAAWM,EAAA,WACX5T,GAAIA,EACJU,KAAMA,EACNa,SAAUoU,EACVpC,QAASA,EACTnP,OAAO,IAAAkR,OAAMhX,EAAQoC,IAAS,KAGlC,gBAACqV,EAAA,EAAc,CACXlD,QAAS,UAAG7S,QAAAA,EAAMU,EAAI,wBACtBA,KAAMA,EACNP,OAAQ,WAAG,IAAAvE,WAAU8E,GAAK,0BAI1C,EA0BA,SAAe,IAAAY,OAxBgE,SAAC,G,IAC5EtB,EAAE,KACF3C,EAAK,QACLqD,EAAI,OACJa,EAAQ,WACRgS,EAAO,UAEDlO,GAAc,IAAA5D,cAChB,SAACuU,GAAuC,OACpC,gBAACf,GAAsB,SACnBjV,GAAIA,EACJ3C,MAAOA,EACPqD,KAAMA,EACNa,SAAUA,EACVgS,QAASA,IACL,IAAA0C,MAAKD,EAAa,CAAC,OAAQ,MAAO,OAAQ,YAPd,GAUxC,CAAChW,EAAI3C,EAAOqD,EAAMa,EAAUgS,IAGhC,OAAO,gBAAC,EAAA2C,WAAU,CAACxV,KAAMA,EAAMiF,OAAQN,GAC3C,I,eC8CA,SAAe,IAAA/D,OAhIoD,SAAC,G,IAChE,IAAAf,MACI+S,EAAS,YACTlW,EAAI,OACJ+Y,EAAM,SACNzV,EAAI,OACG0V,EAAU,QACjBlZ,EAAQ,WACRqW,EAAO,UACPxW,EAAG,MACHO,EAAG,MACH+Y,EAAS,YAEbxV,EAAe,kBACfU,EAAQ,WACR4I,EAAW,cACXmM,EAAO,UACP7V,EAAY,eACZpD,EAAK,QACLsD,EAAU,aACVtB,EAAgB,mBAChBkX,EAAc,iBAERC,EAAeF,GAAW5V,EAC1B+V,EAAY5V,EAAkB,UAAGA,EAAe,YAAIH,GAASA,EAC7DgW,EAAoCC,QACtCtX,KACK,IAAA6U,UAAS,CAAC,OAAQ,WAAY,WAAY,OAAQ,aAAcZ,KAC5DA,IAEPsD,GAAiB,IAAArX,UACnB,WAAM,OACF,gBAAC8E,EAAA,EAAK,CACFC,QAASkS,EACTxW,GAAI,UAAGwW,EAAY,UACnBnX,iBAAkBqX,GAEjBrZ,GAAS+Y,GACRlZ,GACE,gCACK,IACD,yBAAOgD,UAAU,sCACb,gBAACL,EAAA,EAAgB,CAACG,GAAG,2BAXnC,GAiBN,CAACwW,EAAcJ,EAAYlZ,EAAUwZ,EAAmCrZ,IAGtEwZ,GAAuB,IAAAtX,UAAQ,WACjC,MAAkB,SAAd+T,EACa,YAATlW,EACOwW,EAAA,UAGP,IAAAM,UAASxT,EAAM,WAAY,IAAAwT,UAASxT,EAAM,OACnCkT,EAAA,YAGJuC,EAASvC,EAAA,WAAgCA,EAAA,OAG7CN,CACX,GAAG,CAACA,EAAWlW,EAAM+Y,EAAQzV,IAEvBc,GAAc,IAAAC,cAChB,SAAC,G,IAAE8U,EAAc,iBAAEhW,EAAK,QAAgD,OACpE,gBAAC,GAAY,WACLA,EAAK,mBACQ,UAAGiW,EAAY,kBAAUA,EAAY,wBACtD5U,aAAcnB,EACdQ,SAAUsV,EACVjD,UAAWuD,EACX7W,GAAIwW,EACJzZ,IAAKA,EACLsZ,UAAWA,QAAatV,EACxBzD,IAAKA,EACLiW,QAASA,GAAWA,EAAQuD,MAC5B3M,YAAaA,GAAgBoJ,GAAWA,EAAQwD,YAChDC,KAAMzD,GAAYA,EAAgByD,KAClC3X,iBAAkBqX,IAd8C,GAiBxE,CACIF,EACAzZ,EACAsZ,EACA/Y,EACAiW,EACApJ,EACA0M,EACApW,IAIR,OACI,uBACIP,UAAW,IACP,qBACA,CAAE,sBAAuBwW,GACzB/V,IAGH2S,IAAcM,EAAA,WACX,gBAAC,EAAsB,CACnB5T,GAAIwW,EACJnZ,MAAOuZ,EACPlW,KAAM+V,EACNlV,SAAUA,EACVgS,QAAUA,GAAWA,EAAQuD,OAAU,KAG3C,gBAAChV,EAAA,EAAS,CACNyU,eAAgBA,EAChBvW,GAAIwW,EACJzU,MAAOP,EACPnE,MAAOuZ,EACPlW,KAAM+V,EACNlV,SAAUA,EACVlC,iBAAkBqX,IAKtC,G,+EClIA,SAxBiB,IAAA5D,aACb,SACI,EACAC,GADE,IAAA/O,EAAmB,sBAAE7D,EAAM,SAAED,EAAS,YAAEb,EAAgB,mBAAK2T,GAAI,UAAnE,iEAGA,OACI,uCACQA,EAAI,CACR9S,UACIA,GACA,IACI,CAAE,oBAAqBb,GACvB,aACA,+BACA2E,GACH,YAEM7D,EACX4S,IAAKA,IAGjB,G,kDCpBJ,SAAe,E,SAAA,IAN4B,WAAM,OAC7C,uBAAKkE,OAAO,KAAKnR,QAAQ,YAAYoR,MAAM,KAAKnR,MAAM,8BAClD,wBAAMC,EAAE,iDAFiC,G","sources":["webpack://checkout/./packages/core/src/app/common/dom/getAppliedStyles.ts","webpack://checkout/./packages/core/src/app/common/utility/isFloatingLabelEnabled.ts","webpack://checkout/./packages/core/src/app/common/utility/parseAnchor.ts","webpack://checkout/./packages/core/src/app/customer/validationPatterns.ts","webpack://checkout/./packages/core/src/app/customer/getEmailValidationSchema.ts","webpack://checkout/./packages/core/src/app/customer/getCreateCustomerValidationSchema.ts","webpack://checkout/./packages/core/src/app/customer/CreateAccountForm.tsx","webpack://checkout/./packages/core/src/app/customer/EmailField.tsx","webpack://checkout/./packages/core/src/app/customer/EmailLoginForm.tsx","webpack://checkout/./packages/core/src/app/privacyPolicy/PrivacyPolicyField.tsx","webpack://checkout/./packages/core/src/app/customer/SubscribeField.tsx","webpack://checkout/./packages/core/src/app/customer/GuestForm.tsx","webpack://checkout/./packages/core/src/app/privacyPolicy/getPrivacyPolicyValidationSchema.ts","webpack://checkout/./packages/core/src/app/ui/icon/IconEye.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconEyeSlash.tsx","webpack://checkout/./packages/core/src/app/customer/PasswordField.tsx","webpack://checkout/./packages/core/src/app/customer/LoginForm.tsx","webpack://checkout/./packages/core/src/app/customer/mapErrorMessage.ts","webpack://checkout/./packages/core/src/app/customer/mapCreateAccountFromFormValues.ts","webpack://checkout/./packages/core/src/app/customer/StripeGuestForm.tsx","webpack://checkout/./packages/core/src/app/customer/Customer.tsx","webpack://checkout/./packages/core/src/app/formFields/mapCustomFormFieldsFromFormValues.ts","webpack://checkout/./packages/core/src/app/locale/TranslatedLink.tsx","webpack://checkout/./packages/core/src/app/ui/form/CheckboxFormField.tsx","webpack://checkout/./packages/core/src/app/ui/form/CheckboxInput.tsx","webpack://checkout/./packages/core/src/app/locale/withDate.tsx","webpack://checkout/./packages/core/src/app/ui/form/RadioInput.tsx","webpack://checkout/./packages/core/src/app/ui/form/DynamicInput.tsx","webpack://checkout/./packages/core/src/app/ui/form/MultiCheckboxControl.tsx","webpack://checkout/./packages/core/src/app/ui/form/CheckboxGroupFormField.tsx","webpack://checkout/./packages/core/src/app/ui/form/DynamicFormField.tsx","webpack://checkout/./packages/core/src/app/ui/form/TextArea.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconChevronDown.tsx"],"sourcesContent":["import { kebabCase } from 'lodash';\r\n\r\nexport default function getAppliedStyles(\r\n    element: HTMLElement,\r\n    properties: string[],\r\n): { [key: string]: string } {\r\n    const declaration = window.getComputedStyle(element);\r\n\r\n    return properties.reduce(\r\n        (result, propertyName) => ({\r\n            ...result,\r\n            [propertyName]: declaration.getPropertyValue(kebabCase(propertyName)),\r\n        }),\r\n        {},\r\n    );\r\n}\r\n","import { CheckoutSettings } from '@bigcommerce/checkout-sdk';\r\n\r\nexport default function isFloatingLabelEnabled(checkoutSettings: CheckoutSettings): boolean {\r\n    return !!checkoutSettings.features['CHECKOUT-6879.enable_floating_labels'];\r\n}\r\n","export default function parseAnchor(text: string): string[] {\r\n    const div = document.createElement('div');\r\n\r\n    div.innerHTML = text;\r\n\r\n    const anchor = div.querySelector('a');\r\n\r\n    if (!anchor) {\r\n        return [];\r\n    }\r\n\r\n    const anchorSiblings = div.innerHTML.split(anchor.outerHTML);\r\n\r\n    return [anchorSiblings[0], anchor.text, anchorSiblings[1]];\r\n}\r\n","// NOTE: This is a legacy regex used to create accounts, more flexible than the current used one\r\n// we need to keep this regex for login validation as accounts might have been created using this regex\r\nexport const EMAIL_REGEXP =\r\n    /^[a-z0-9!#$%&'*+/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;\r\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\r\nimport { object, ObjectSchema, string } from 'yup';\r\n\r\nimport { EMAIL_REGEXP } from './validationPatterns';\r\n\r\nexport interface EmailValidationSchemaOptions {\r\n    language: LanguageService;\r\n}\r\n\r\nexport default function getEmailValidationSchema({\r\n    language,\r\n}: EmailValidationSchemaOptions): ObjectSchema<{ email: string }> {\r\n    return object({\r\n        email: string()\r\n            .max(256)\r\n            .matches(EMAIL_REGEXP, language.translate('customer.email_invalid_error'))\r\n            .required(language.translate('customer.email_required_error')),\r\n    });\r\n}\r\n","import { FormField, LanguageService } from '@bigcommerce/checkout-sdk';\r\nimport { memoize } from '@bigcommerce/memoize';\r\nimport { object, ObjectSchema, string } from 'yup';\r\n\r\nimport {\r\n    CustomFormFieldValues,\r\n    getCustomFormFieldsValidationSchema,\r\n    TranslateValidationErrorFunction,\r\n} from '../formFields';\r\n\r\nimport getEmailValidationSchema from './getEmailValidationSchema';\r\nimport { PasswordRequirements } from './getPasswordRequirements';\r\n\r\nexport type CreateAccountFormValues = {\r\n    firstName: string;\r\n    lastName: string;\r\n    email: string;\r\n    password: string;\r\n    acceptsMarketingEmails?: string[];\r\n    token?: string;\r\n} & CustomFormFieldValues;\r\n\r\nexport interface CreateCustomerValidationSchema {\r\n    formFields: FormField[];\r\n    language: LanguageService;\r\n    passwordRequirements: PasswordRequirements;\r\n}\r\n\r\nfunction getTranslateCreateCustomerError(\r\n    language?: LanguageService,\r\n): TranslateValidationErrorFunction {\r\n    return (type, { label, min, max }) => {\r\n        if (!language) {\r\n            return;\r\n        }\r\n\r\n        if (type === 'required') {\r\n            return language.translate('customer.required_error', { label });\r\n        }\r\n\r\n        if (type === 'max' && max) {\r\n            return language.translate('customer.max_error', { label, max });\r\n        }\r\n\r\n        if (type === 'min' && min) {\r\n            return language.translate('customer.min_error', { label, min });\r\n        }\r\n\r\n        if (type === 'invalid') {\r\n            return language.translate('customer.invalid_characters_error', { label });\r\n        }\r\n    };\r\n}\r\n\r\nexport default memoize(function getCreateCustomerValidationSchema({\r\n    formFields,\r\n    language,\r\n    passwordRequirements: { description, numeric, alpha, minLength },\r\n}: CreateCustomerValidationSchema): ObjectSchema<CreateAccountFormValues> {\r\n    return object({\r\n        firstName: string().required(language.translate('address.first_name_required_error')),\r\n        lastName: string().required(language.translate('address.last_name_required_error')),\r\n        password: string()\r\n            .required(language.translate('customer.password_required_error') || description)\r\n            .matches(\r\n                numeric,\r\n                language.translate('customer.password_number_required_error') || description,\r\n            )\r\n            .matches(\r\n                alpha,\r\n                language.translate('customer.password_letter_required_error') || description,\r\n            )\r\n            .min(\r\n                minLength,\r\n                language.translate('customer.password_under_minimum_length_error' || description),\r\n            )\r\n            .max(100, language.translate('customer.password_over_maximum_length_error')),\r\n    })\r\n        .concat(getEmailValidationSchema({ language }))\r\n        .concat(\r\n            getCustomFormFieldsValidationSchema({\r\n                formFields,\r\n                translate: getTranslateCreateCustomerError(language),\r\n            }),\r\n        );\r\n});\r\n","import { FormField } from '@bigcommerce/checkout-sdk';\r\nimport { FormikProps, withFormik } from 'formik';\r\nimport { noop } from 'lodash';\r\nimport React, { FunctionComponent, useMemo } from 'react';\r\n\r\nimport { preventDefault } from '../common/dom';\r\nimport { isRequestError } from '../common/error';\r\nimport { TranslatedString, withLanguage, WithLanguageProps } from '../locale';\r\nimport { Alert, AlertType } from '../ui/alert';\r\nimport { Button, ButtonVariant } from '../ui/button';\r\nimport { DynamicFormField, Fieldset, Form } from '../ui/form';\r\n\r\nimport getCreateCustomerValidationSchema, {\r\n    CreateAccountFormValues,\r\n} from './getCreateCustomerValidationSchema';\r\nimport getPasswordRequirements from './getPasswordRequirements';\r\nimport './CreateAccountForm.scss';\r\n\r\nexport interface CreateAccountFormProps {\r\n    formFields: FormField[];\r\n    createAccountError?: Error;\r\n    isCreatingAccount?: boolean;\r\n    requiresMarketingConsent: boolean;\r\n    useFloatingLabel?: boolean;\r\n    onCancel?(): void;\r\n    onSubmit?(values: CreateAccountFormValues): void;\r\n}\r\n\r\nconst CreateAccountForm: FunctionComponent<\r\n    CreateAccountFormProps & WithLanguageProps & FormikProps<CreateAccountFormValues>\r\n> = ({ formFields, createAccountError, isCreatingAccount, onCancel, useFloatingLabel }) => {\r\n    const createAccountErrorMessage = useMemo(() => {\r\n        if (!createAccountError) {\r\n            return;\r\n        }\r\n\r\n        if (isRequestError(createAccountError) && createAccountError.status === 409) {\r\n            const splitMessage = createAccountError.message.split(':');\r\n\r\n            if (splitMessage.length > 1) {\r\n                return (\r\n                    <TranslatedString\r\n                        data={{ email: splitMessage[1].trim() }}\r\n                        id=\"customer.email_in_use_text\"\r\n                    />\r\n                );\r\n            }\r\n\r\n            return <TranslatedString id=\"customer.unknown_email_in_use_text\" />;\r\n        }\r\n\r\n        return createAccountError.message;\r\n    }, [createAccountError]);\r\n\r\n    return (\r\n        <Form\r\n            className=\"checkout-form\"\r\n            id=\"checkout-customer-returning\"\r\n            testId=\"checkout-customer-returning\"\r\n        >\r\n            <Fieldset>\r\n                {createAccountErrorMessage && (\r\n                    <Alert type={AlertType.Error}>{createAccountErrorMessage}</Alert>\r\n                )}\r\n                <div className=\"create-account-form\">\r\n                    {formFields.map((field) => (\r\n                        <DynamicFormField\r\n                            autocomplete={field.name}\r\n                            extraClass={`dynamic-form-field--${field.name}`}\r\n                            field={field}\r\n                            key={field.id}\r\n                            parentFieldName={field.custom ? 'customFields' : undefined}\r\n                            useFloatingLabel={useFloatingLabel}\r\n                        />\r\n                    ))}\r\n                </div>\r\n            </Fieldset>\r\n\r\n            <div className=\"form-actions\">\r\n                <Button\r\n                    disabled={isCreatingAccount}\r\n                    id=\"checkout-customer-create\"\r\n                    testId=\"customer-continue-create\"\r\n                    type=\"submit\"\r\n                    variant={ButtonVariant.Primary}\r\n                >\r\n                    <TranslatedString id=\"customer.create_account_action\" />\r\n                </Button>\r\n\r\n                <a\r\n                    className=\"button optimizedCheckout-buttonSecondary\"\r\n                    data-test=\"customer-cancel-button\"\r\n                    href=\"#\"\r\n                    id=\"checkout-customer-cancel\"\r\n                    onClick={preventDefault(onCancel)}\r\n                >\r\n                    <TranslatedString id=\"common.cancel_action\" />\r\n                </a>\r\n            </div>\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default withLanguage(\r\n    withFormik<CreateAccountFormProps & WithLanguageProps, CreateAccountFormValues>({\r\n        handleSubmit: (values, { props: { onSubmit = noop } }) => {\r\n            onSubmit(values);\r\n        },\r\n        mapPropsToValues: ({ requiresMarketingConsent }) => ({\r\n            firstName: '',\r\n            lastName: '',\r\n            email: '',\r\n            password: '',\r\n            customFields: {},\r\n            acceptsMarketingEmails: requiresMarketingConsent ? [] : ['0'],\r\n        }),\r\n        validationSchema: ({\r\n            language,\r\n            formFields,\r\n        }: CreateAccountFormProps & WithLanguageProps) => {\r\n            const passwordRequirements = formFields.find(\r\n                ({ requirements }) => requirements,\r\n            )?.requirements;\r\n\r\n            if (!passwordRequirements) {\r\n                throw new Error('Password requirements missing');\r\n            }\r\n\r\n            const schema = getCreateCustomerValidationSchema({\r\n                language,\r\n                formFields,\r\n                passwordRequirements: getPasswordRequirements(passwordRequirements),\r\n            });\r\n\r\n            return schema;\r\n        },\r\n    })(CreateAccountForm),\r\n);\r\n","import { FieldProps } from 'formik';\r\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\r\n\r\nimport { TranslatedString } from '../locale';\r\nimport { FormField, TextInput } from '../ui/form';\r\n\r\nexport interface EmailFieldProps {\r\n    useFloatingLabel?: boolean;\r\n    onChange?(value: string): void;\r\n}\r\n\r\nconst EmailField: FunctionComponent<EmailFieldProps> = ({ onChange, useFloatingLabel }) => {\r\n    const renderInput = useCallback(\r\n        (props: FieldProps) => (\r\n            <TextInput\r\n                {...props.field}\r\n                autoComplete={props.field.name}\r\n                id={props.field.name}\r\n                type=\"email\"\r\n                useFloatingLabel={useFloatingLabel}\r\n            />\r\n        ),\r\n        [useFloatingLabel],\r\n    );\r\n\r\n    const labelContent = useMemo(() => <TranslatedString id=\"customer.email_label\" />, []);\r\n\r\n    return (\r\n        <FormField\r\n            input={renderInput}\r\n            labelContent={labelContent}\r\n            name=\"email\"\r\n            onChange={onChange}\r\n            useFloatingLabel={useFloatingLabel}\r\n        />\r\n    );\r\n};\r\n\r\nexport default memo(EmailField);\r\n","import { SignInEmail } from '@bigcommerce/checkout-sdk';\r\nimport { FormikProps, withFormik } from 'formik';\r\nimport { noop } from 'lodash';\r\nimport React, { FunctionComponent, memo, useMemo } from 'react';\r\n\r\nimport {\r\n    TranslatedHtml,\r\n    TranslatedLink,\r\n    TranslatedString,\r\n    withLanguage,\r\n    WithLanguageProps,\r\n} from '../locale';\r\nimport { Alert, AlertType } from '../ui/alert';\r\nimport { Button, ButtonVariant } from '../ui/button';\r\nimport { Form } from '../ui/form';\r\nimport { LoadingSpinner } from '../ui/loading';\r\nimport { Modal, ModalHeader } from '../ui/modal';\r\n\r\nimport EmailField from './EmailField';\r\nimport getEmailValidationSchema from './getEmailValidationSchema';\r\n\r\nexport interface EmailLoginFormProps {\r\n    email?: string;\r\n    isOpen: boolean;\r\n    isSendingEmail?: boolean;\r\n    emailHasBeenRequested?: boolean;\r\n    sentEmail?: SignInEmail;\r\n    sentEmailError?: any;\r\n    useFloatingLabel?: boolean;\r\n    onRequestClose?(): void;\r\n    onSendLoginEmail?(values: EmailLoginFormValues): void;\r\n}\r\n\r\nexport interface EmailLoginFormValues {\r\n    email: string;\r\n}\r\n\r\nconst EmailLoginForm: FunctionComponent<\r\n    EmailLoginFormProps & WithLanguageProps & FormikProps<EmailLoginFormValues>\r\n> = ({\r\n    email,\r\n    isOpen,\r\n    isSendingEmail = false,\r\n    emailHasBeenRequested,\r\n    onRequestClose = noop,\r\n    sentEmailError,\r\n    sentEmail,\r\n    submitForm,\r\n    useFloatingLabel,\r\n    values: { email: formEmail },\r\n}) => {\r\n    const modalHeaderStringId = useMemo(() => {\r\n        if (emailHasBeenRequested) {\r\n            if (sentEmailError) {\r\n                return 'common.error_heading';\r\n            }\r\n\r\n            return 'login_email.sent_header';\r\n        }\r\n\r\n        if (email) {\r\n            return 'login_email.header_with_email';\r\n        }\r\n\r\n        return 'login_email.header';\r\n    }, [emailHasBeenRequested, sentEmailError, email]);\r\n\r\n    const okButton = useMemo(\r\n        () => (\r\n            <div className=\"modal-footer\">\r\n                <Button onClick={onRequestClose}>\r\n                    <TranslatedString id=\"common.ok_action\" />\r\n                </Button>\r\n            </div>\r\n        ),\r\n        [onRequestClose],\r\n    );\r\n\r\n    const footer = useMemo(() => {\r\n        if (sentEmailError && sentEmailError.status === 429) {\r\n            return okButton;\r\n        }\r\n\r\n        if (emailHasBeenRequested && !sentEmailError) {\r\n            if (isSendingEmail) {\r\n                return <LoadingSpinner isLoading />;\r\n            }\r\n\r\n            if (sentEmail && sentEmail.sent_email === 'reset_password') {\r\n                return okButton;\r\n            }\r\n\r\n            return (\r\n                <p>\r\n                    <TranslatedLink id=\"login_email.resend_link\" onClick={submitForm} />\r\n                    <TranslatedLink id=\"login_email.use_password_link\" onClick={onRequestClose} />\r\n                </p>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className=\"modal-footer\">\r\n                <Button\r\n                    className=\"optimizedCheckout-buttonSecondary\"\r\n                    onClick={onRequestClose}\r\n                    type=\"button\"\r\n                >\r\n                    <TranslatedString id=\"common.cancel_action\" />\r\n                </Button>\r\n                <Button isLoading={isSendingEmail} type=\"submit\" variant={ButtonVariant.Primary}>\r\n                    <TranslatedString id=\"login_email.send\" />\r\n                </Button>\r\n            </div>\r\n        );\r\n    }, [\r\n        sentEmailError,\r\n        emailHasBeenRequested,\r\n        okButton,\r\n        submitForm,\r\n        isSendingEmail,\r\n        onRequestClose,\r\n        sentEmail,\r\n    ]);\r\n\r\n    const error = useMemo(() => {\r\n        if (!sentEmailError) {\r\n            return null;\r\n        }\r\n\r\n        const { status } = sentEmailError;\r\n\r\n        return (\r\n            <Alert type={AlertType.Error}>\r\n                {status === 429 ? (\r\n                    <TranslatedString id=\"login_email.error_temporary_disabled\" />\r\n                ) : (\r\n                    <TranslatedString\r\n                        id={\r\n                            status === 404\r\n                                ? 'login_email.error_not_found'\r\n                                : 'login_email.error_server'\r\n                        }\r\n                    />\r\n                )}\r\n            </Alert>\r\n        );\r\n    }, [sentEmailError]);\r\n\r\n    const form = useMemo(() => {\r\n        if (sentEmailError && sentEmailError.status === 429) {\r\n            return null;\r\n        }\r\n\r\n        if (emailHasBeenRequested && sentEmail && !sentEmailError) {\r\n            const { expiry, sent_email } = sentEmail;\r\n\r\n            return (\r\n                <p>\r\n                    <TranslatedHtml\r\n                        data={{\r\n                            email: formEmail,\r\n                            minutes: Math.round(expiry / 60),\r\n                        }}\r\n                        id={\r\n                            sent_email === 'sign_in'\r\n                                ? 'login_email.sent_text'\r\n                                : 'customer.reset_password_before_login_error'\r\n                        }\r\n                    />\r\n                </p>\r\n            );\r\n        }\r\n\r\n        if (emailHasBeenRequested && !sentEmail) {\r\n            return <EmailField useFloatingLabel={useFloatingLabel} />;\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <p>\r\n                    <TranslatedString id=\"login_email.text\" />\r\n                </p>\r\n                <EmailField useFloatingLabel={useFloatingLabel} />\r\n            </>\r\n        );\r\n    }, [sentEmailError, emailHasBeenRequested, sentEmail, formEmail]);\r\n\r\n    return (\r\n        <Modal\r\n            additionalBodyClassName=\"modal--withText\"\r\n            additionalModalClassName=\"modal--medium\"\r\n            header={\r\n                <ModalHeader>\r\n                    <TranslatedString id={modalHeaderStringId} />\r\n                </ModalHeader>\r\n            }\r\n            isOpen={isOpen}\r\n            onRequestClose={onRequestClose}\r\n            shouldShowCloseButton={true}\r\n        >\r\n            <Form>\r\n                <LoadingSpinner isLoading={isSendingEmail && !email} />\r\n                {error}\r\n                {form}\r\n                {footer}\r\n            </Form>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default withLanguage(\r\n    withFormik<EmailLoginFormProps & WithLanguageProps, EmailLoginFormValues>({\r\n        mapPropsToValues: ({ email = '' }) => ({\r\n            email,\r\n        }),\r\n        handleSubmit: (values, { props: { onSendLoginEmail = noop } }) => {\r\n            onSendLoginEmail(values);\r\n        },\r\n        validationSchema: ({ language }: WithLanguageProps) =>\r\n            getEmailValidationSchema({ language }),\r\n    })(memo(EmailLoginForm)),\r\n);\r\n","import React, { FunctionComponent, memo } from 'react';\r\n\r\nimport { TranslatedHtml } from '../locale';\r\nimport { CheckboxFormField, Fieldset } from '../ui/form';\r\n\r\nconst PrivacyPolicyCheckboxFieldLink: FunctionComponent<{ url: string }> = ({ url }) => (\r\n    <CheckboxFormField\r\n        labelContent={<TranslatedHtml data={{ url }} id=\"privacy_policy.label\" />}\r\n        name=\"privacyPolicy\"\r\n    />\r\n);\r\n\r\nconst PrivacyPolicyFieldset: FunctionComponent<{ url: string }> = ({ url }) => (\r\n    <Fieldset additionalClassName=\"checkout-privacy-policy\">\r\n        <PrivacyPolicyCheckboxFieldLink url={url} />\r\n    </Fieldset>\r\n);\r\n\r\nexport default memo(PrivacyPolicyFieldset);\r\n","import { FieldProps } from 'formik';\r\nimport React, { FunctionComponent, memo } from 'react';\r\n\r\nimport { TranslatedString } from '../locale';\r\nimport { Input, Label } from '../ui/form';\r\n\r\nexport type SubscribeFieldProps = FieldProps<boolean> & {\r\n    requiresMarketingConsent: boolean;\r\n};\r\n\r\nconst SubscribeField: FunctionComponent<SubscribeFieldProps> = ({\r\n    field,\r\n    requiresMarketingConsent,\r\n}) => (\r\n    <>\r\n        <Input\r\n            {...field}\r\n            checked={field.value}\r\n            className=\"form-checkbox\"\r\n            id={field.name}\r\n            type=\"checkbox\"\r\n        />\r\n\r\n        <Label htmlFor={field.name}>\r\n            <TranslatedString\r\n                id={\r\n                    requiresMarketingConsent\r\n                        ? 'customer.guest_marketing_consent'\r\n                        : 'customer.guest_subscribe_to_newsletter_text'\r\n                }\r\n            />\r\n        </Label>\r\n    </>\r\n);\r\n\r\nexport default memo(SubscribeField);\r\n","import classNames from 'classnames';\r\nimport { FieldProps, FormikProps, withFormik } from 'formik';\r\nimport React, { FunctionComponent, memo, ReactNode, useCallback } from 'react';\r\nimport { object, string } from 'yup';\r\n\r\nimport { TranslatedString, withLanguage, WithLanguageProps } from '../locale';\r\nimport { getPrivacyPolicyValidationSchema, PrivacyPolicyField } from '../privacyPolicy';\r\nimport { Button, ButtonVariant } from '../ui/button';\r\nimport { BasicFormField, Fieldset, Form, Legend } from '../ui/form';\r\n\r\nimport EmailField from './EmailField';\r\nimport SubscribeField from './SubscribeField';\r\n\r\nexport interface GuestFormProps {\r\n    canSubscribe: boolean;\r\n    checkoutButtons?: ReactNode;\r\n    continueAsGuestButtonLabelId: string;\r\n    requiresMarketingConsent: boolean;\r\n    defaultShouldSubscribe: boolean;\r\n    email?: string;\r\n    isLoading: boolean;\r\n    privacyPolicyUrl?: string;\r\n    useFloatingLabel?: boolean;\r\n    onChangeEmail(email: string): void;\r\n    onContinueAsGuest(data: GuestFormValues): void;\r\n}\r\n\r\nexport interface GuestFormValues {\r\n    email: string;\r\n    shouldSubscribe: boolean;\r\n}\r\n\r\nconst GuestForm: FunctionComponent<\r\n    GuestFormProps & WithLanguageProps & FormikProps<GuestFormValues>\r\n> = ({\r\n    canSubscribe,\r\n    checkoutButtons,\r\n    continueAsGuestButtonLabelId,\r\n    isLoading,\r\n    onChangeEmail,\r\n    privacyPolicyUrl,\r\n    requiresMarketingConsent,\r\n    useFloatingLabel,\r\n}) => {\r\n    const renderField = useCallback(\r\n        (fieldProps: FieldProps<boolean>) => (\r\n            <SubscribeField {...fieldProps} requiresMarketingConsent={requiresMarketingConsent} />\r\n        ),\r\n        [requiresMarketingConsent],\r\n    );\r\n\r\n    return (\r\n        <Form\r\n            className=\"checkout-form\"\r\n            id=\"checkout-customer-guest\"\r\n            testId=\"checkout-customer-guest\"\r\n        >\r\n            <Fieldset\r\n                legend={\r\n                    <Legend hidden>\r\n                        <TranslatedString id=\"customer.guest_customer_text\" />\r\n                    </Legend>\r\n                }\r\n            >\r\n                <div className=\"customerEmail-container\">\r\n                    <div className=\"customerEmail-body\">\r\n                        <EmailField onChange={onChangeEmail} useFloatingLabel={useFloatingLabel}/>\r\n\r\n                        {(canSubscribe || requiresMarketingConsent) && (\r\n                            <BasicFormField name=\"shouldSubscribe\" render={renderField} />\r\n                        )}\r\n\r\n                        {privacyPolicyUrl && <PrivacyPolicyField url={privacyPolicyUrl} />}\r\n                    </div>\r\n\r\n                    <div\r\n                        className={classNames('form-actions customerEmail-action', {\r\n                            'customerEmail-floating--enabled': useFloatingLabel,\r\n                        })}\r\n                    >\r\n                        <Button\r\n                            className=\"customerEmail-button\"\r\n                            id=\"checkout-customer-continue\"\r\n                            isLoading={isLoading}\r\n                            testId=\"customer-continue-as-guest-button\"\r\n                            type=\"submit\"\r\n                            variant={ButtonVariant.Primary}\r\n                        >\r\n                            <TranslatedString id={continueAsGuestButtonLabelId} />\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n                {checkoutButtons}\r\n            </Fieldset>\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default withLanguage(\r\n    withFormik<GuestFormProps & WithLanguageProps, GuestFormValues>({\r\n        mapPropsToValues: ({\r\n            email = '',\r\n            defaultShouldSubscribe = false,\r\n            requiresMarketingConsent,\r\n        }) => ({\r\n            email,\r\n            shouldSubscribe: requiresMarketingConsent ? false : defaultShouldSubscribe,\r\n            privacyPolicy: false,\r\n        }),\r\n        handleSubmit: (values, { props: { onContinueAsGuest } }) => {\r\n            onContinueAsGuest(values);\r\n        },\r\n        validationSchema: ({ language, privacyPolicyUrl }: GuestFormProps & WithLanguageProps) => {\r\n            const email = string()\r\n                .email(language.translate('customer.email_invalid_error'))\r\n                .max(256)\r\n                .required(language.translate('customer.email_required_error'));\r\n\r\n            const baseSchema = object({ email });\r\n\r\n            if (privacyPolicyUrl) {\r\n                return baseSchema.concat(\r\n                    getPrivacyPolicyValidationSchema({\r\n                        isRequired: !!privacyPolicyUrl,\r\n                        language,\r\n                    }),\r\n                );\r\n            }\r\n\r\n            return baseSchema;\r\n        },\r\n    })(memo(GuestForm)),\r\n);\r\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\r\nimport { boolean, BooleanSchema, object, ObjectSchema } from 'yup';\r\n\r\nexport interface PrivacyPolicyValidatonSchemaProps {\r\n    isRequired: boolean;\r\n    language: LanguageService;\r\n}\r\n\r\nexport default function getPrivacyPolicyValidationSchema({\r\n    isRequired,\r\n    language,\r\n}: PrivacyPolicyValidatonSchemaProps): ObjectSchema<{ privacyPolicy?: boolean }> {\r\n    const schemaFields: {\r\n        privacyPolicy?: BooleanSchema;\r\n    } = {};\r\n\r\n    if (isRequired) {\r\n        schemaFields.privacyPolicy = boolean().oneOf(\r\n            [true],\r\n            language.translate('privacy_policy.required_error'),\r\n        );\r\n    }\r\n\r\n    return object(schemaFields);\r\n}\r\n","import React, { FunctionComponent } from 'react';\r\n\r\nimport withIconContainer from './withIconContainer';\r\n\r\nconst IconEye: FunctionComponent = () => (\r\n    <svg viewBox=\"0 0 576 512\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path d=\"M288 144a110.94 110.94 0 0 0-31.24 5 55.4 55.4 0 0 1 7.24 27 56 56 0 0 1-56 56 55.4 55.4 0 0 1-27-7.24A111.71 111.71 0 1 0 288 144zm284.52 97.4C518.29 135.59 410.93 64 288 64S57.68 135.64 3.48 241.41a32.35 32.35 0 0 0 0 29.19C57.71 376.41 165.07 448 288 448s230.32-71.64 284.52-177.41a32.35 32.35 0 0 0 0-29.19zM288 400c-98.65 0-189.09-55-237.93-144C98.91 167 189.34 112 288 112s189.09 55 237.93 144C477.1 345 386.66 400 288 400z\" />\r\n    </svg>\r\n);\r\n\r\nexport default withIconContainer(IconEye);\r\n","import React, { FunctionComponent } from 'react';\r\n\r\nimport withIconContainer from './withIconContainer';\r\n\r\nconst IconEyeSlash: FunctionComponent = () => (\r\n    <svg viewBox=\"0 0 640 512\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path d=\"M634 471L36 3.51A16 16 0 0 0 13.51 6l-10 12.49A16 16 0 0 0 6 41l598 467.49a16 16 0 0 0 22.49-2.49l10-12.49A16 16 0 0 0 634 471zM296.79 146.47l134.79 105.38C429.36 191.91 380.48 144 320 144a112.26 112.26 0 0 0-23.21 2.47zm46.42 219.07L208.42 260.16C210.65 320.09 259.53 368 320 368a113 113 0 0 0 23.21-2.46zM320 112c98.65 0 189.09 55 237.93 144a285.53 285.53 0 0 1-44 60.2l37.74 29.5a333.7 333.7 0 0 0 52.9-75.11 32.35 32.35 0 0 0 0-29.19C550.29 135.59 442.93 64 320 64c-36.7 0-71.71 7-104.63 18.81l46.41 36.29c18.94-4.3 38.34-7.1 58.22-7.1zm0 288c-98.65 0-189.08-55-237.93-144a285.47 285.47 0 0 1 44.05-60.19l-37.74-29.5a333.6 333.6 0 0 0-52.89 75.1 32.35 32.35 0 0 0 0 29.19C89.72 376.41 197.08 448 320 448c36.7 0 71.71-7.05 104.63-18.81l-46.41-36.28C359.28 397.2 339.89 400 320 400z\" />\r\n    </svg>\r\n);\r\n\r\nexport default withIconContainer(IconEyeSlash);\r\n","import { FieldProps } from 'formik';\r\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\r\n\r\nimport { TranslatedString } from '../locale';\r\nimport { FormField, TextInput } from '../ui/form';\r\nimport Label from '../ui/form/Label';\r\nimport { IconEye, IconEyeSlash } from '../ui/icon';\r\nimport { Toggle } from '../ui/toggle';\r\n\r\ninterface WithFloatingLabel {\r\n    useFloatingLabel?: boolean;\r\n}\r\n\r\nconst PasswordField: FunctionComponent<WithFloatingLabel> = ({ useFloatingLabel = false }) => {\r\n    const renderInput = useCallback(\r\n        (props: FieldProps) => (\r\n            <Toggle openByDefault={false}>\r\n                {({ isOpen, toggle }) => (\r\n                    <div className=\"form-field-password\">\r\n                        <TextInput\r\n                            {...props.field}\r\n                            additionalClassName=\"form-input--withIcon\"\r\n                            id={props.field.name}\r\n                            type={isOpen ? 'text' : 'password'}\r\n                            useFloatingLabel={useFloatingLabel}\r\n                        />\r\n                        {useFloatingLabel && (\r\n                            <Label\r\n                                htmlFor={props.field.name}\r\n                                id={`${props.field.name}-label`}\r\n                                useFloatingLabel={true}\r\n                            >\r\n                                <TranslatedString id=\"customer.password_label\" />\r\n                            </Label>\r\n                        )}\r\n                        <a\r\n                            className=\"form-toggle-password form-input-icon\"\r\n                            href=\"#\"\r\n                            onClick={toggle}\r\n                        >\r\n                            {isOpen ? <IconEye /> : <IconEyeSlash />}\r\n                        </a>\r\n                    </div>\r\n                )}\r\n            </Toggle>\r\n        ),\r\n        [useFloatingLabel],\r\n    );\r\n\r\n    const labelContent = useMemo(() => <TranslatedString id=\"customer.password_label\" />, []);\r\n\r\n    return <FormField input={renderInput} labelContent={useFloatingLabel ? null : labelContent} name=\"password\" useFloatingLabel={useFloatingLabel} />;\r\n};\r\n\r\nexport default memo(PasswordField);\r\n","import { FormikProps, withFormik } from 'formik';\r\nimport { noop } from 'lodash';\r\nimport React, { FunctionComponent, memo, useCallback } from 'react';\r\nimport { object, string } from 'yup';\r\n\r\nimport { preventDefault } from '../common/dom';\r\nimport {\r\n    TranslatedHtml,\r\n    TranslatedLink,\r\n    TranslatedString,\r\n    withLanguage,\r\n    WithLanguageProps,\r\n} from '../locale';\r\nimport { Alert, AlertType } from '../ui/alert';\r\nimport { Button, ButtonVariant } from '../ui/button';\r\nimport { Fieldset, Form, Legend } from '../ui/form';\r\n\r\nimport CustomerViewType from './CustomerViewType';\r\nimport EmailField from './EmailField';\r\nimport getEmailValidationSchema from './getEmailValidationSchema';\r\nimport mapErrorMessage from './mapErrorMessage';\r\nimport PasswordField from './PasswordField';\r\n\r\nexport interface LoginFormProps {\r\n    canCancel?: boolean;\r\n    continueAsGuestButtonLabelId: string;\r\n    email?: string;\r\n    forgotPasswordUrl: string;\r\n    isSignInEmailEnabled?: boolean;\r\n    isSendingSignInEmail?: boolean;\r\n    isSigningIn?: boolean;\r\n    signInError?: Error;\r\n    signInEmailError?: Error;\r\n    viewType?: Omit<CustomerViewType, 'guest'>;\r\n    passwordlessLogin?: boolean;\r\n    shouldShowCreateAccountLink?: boolean;\r\n    useFloatingLabel?: boolean;\r\n    onCancel?(): void;\r\n    onCreateAccount?(): void;\r\n    onChangeEmail?(email: string): void;\r\n    onSignIn(data: LoginFormValues): void;\r\n    onSendLoginEmail?(): void;\r\n    onContinueAsGuest?(): void;\r\n}\r\n\r\nexport interface LoginFormValues {\r\n    email: string;\r\n    password: string;\r\n}\r\n\r\nconst LoginForm: FunctionComponent<\r\n    LoginFormProps & WithLanguageProps & FormikProps<LoginFormValues>\r\n> = ({\r\n    canCancel,\r\n    continueAsGuestButtonLabelId,\r\n    forgotPasswordUrl,\r\n    email,\r\n    isSignInEmailEnabled,\r\n    isSigningIn,\r\n    language,\r\n    onCancel = noop,\r\n    onChangeEmail,\r\n    onContinueAsGuest,\r\n    onCreateAccount = noop,\r\n    onSendLoginEmail = noop,\r\n    signInError,\r\n    shouldShowCreateAccountLink,\r\n    useFloatingLabel,\r\n    viewType = CustomerViewType.Login,\r\n}) => {\r\n    const changeEmailLink = useCallback(() => {\r\n        if (!email) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <p className=\"optimizedCheckout-contentSecondary\">\r\n                <TranslatedLink\r\n                    data={{ email }}\r\n                    id=\"customer.guest_could_login_change_email\"\r\n                    onClick={onCancel}\r\n                    testId=\"change-email\"\r\n                />\r\n            </p>\r\n        );\r\n    }, [email, onCancel]);\r\n\r\n    return (\r\n        <Form\r\n            className=\"checkout-form\"\r\n            id=\"checkout-customer-returning\"\r\n            testId=\"checkout-customer-returning\"\r\n        >\r\n            <Fieldset\r\n                legend={\r\n                    <Legend hidden>\r\n                        <TranslatedString id=\"customer.returning_customer_text\" />\r\n                    </Legend>\r\n                }\r\n            >\r\n                {signInError && (\r\n                    <Alert testId=\"customer-login-error-message\" type={AlertType.Error}>\r\n                        {mapErrorMessage(signInError, (key) => language.translate(key))}\r\n                    </Alert>\r\n                )}\r\n\r\n                {viewType === CustomerViewType.SuggestedLogin && (\r\n                    <Alert type={AlertType.Info}>\r\n                        <TranslatedHtml data={{ email }} id=\"customer.guest_could_login\" />\r\n                    </Alert>\r\n                )}\r\n\r\n                {viewType === CustomerViewType.CancellableEnforcedLogin && (\r\n                    <Alert type={AlertType.Info}>\r\n                        <TranslatedHtml data={{ email }} id=\"customer.guest_must_login\" />\r\n                    </Alert>\r\n                )}\r\n\r\n                {viewType === CustomerViewType.EnforcedLogin && (\r\n                    <Alert type={AlertType.Error}>\r\n                        <TranslatedLink\r\n                            id=\"customer.guest_temporary_disabled\"\r\n                            onClick={onCreateAccount}\r\n                        />\r\n                    </Alert>\r\n                )}\r\n\r\n                {(viewType === CustomerViewType.Login ||\r\n                    viewType === CustomerViewType.EnforcedLogin) && (\r\n                    <EmailField onChange={onChangeEmail} useFloatingLabel={useFloatingLabel} />\r\n                )}\r\n\r\n                <PasswordField useFloatingLabel={useFloatingLabel} />\r\n\r\n                <p className=\"form-legend-container\">\r\n                    <span>\r\n                        { isSignInEmailEnabled &&\r\n                            <TranslatedLink\r\n                                id=\"login_email.link\"\r\n                                onClick={ onSendLoginEmail }\r\n                                testId=\"customer-signin-link\"\r\n                            />\r\n                        }\r\n                        { !isSignInEmailEnabled &&\r\n                            <a\r\n                                data-test=\"forgot-password-link\"\r\n                                href={ forgotPasswordUrl }\r\n                                rel=\"noopener noreferrer\"\r\n                                target=\"_blank\"\r\n                            >\r\n                                <TranslatedString id=\"customer.forgot_password_action\" />\r\n                            </a>\r\n                        }\r\n                    </span>\r\n                    { viewType === CustomerViewType.Login && shouldShowCreateAccountLink &&\r\n                        <span>\r\n                            <TranslatedLink\r\n                                id=\"customer.create_account_to_continue_text\"\r\n                                onClick={onCreateAccount}\r\n                            />\r\n                        </span>\r\n                    }\r\n                </p>\r\n\r\n                <div className=\"form-actions\">\r\n                    <Button\r\n                        disabled={isSigningIn}\r\n                        id=\"checkout-customer-continue\"\r\n                        testId=\"customer-continue-button\"\r\n                        type=\"submit\"\r\n                        variant={ButtonVariant.Primary}\r\n                    >\r\n                        <TranslatedString id=\"customer.sign_in_action\" />\r\n                    </Button>\r\n\r\n                    {viewType === CustomerViewType.SuggestedLogin && (\r\n                        <a\r\n                            className=\"button optimizedCheckout-buttonSecondary\"\r\n                            data-test=\"customer-guest-continue\"\r\n                            href=\"#\"\r\n                            id=\"checkout-guest-continue\"\r\n                            onClick={preventDefault(onContinueAsGuest)}\r\n                        >\r\n                            <TranslatedString id={continueAsGuestButtonLabelId} />\r\n                        </a>\r\n                    )}\r\n\r\n                    {canCancel &&\r\n                        viewType !== CustomerViewType.EnforcedLogin &&\r\n                        viewType !== CustomerViewType.SuggestedLogin && (\r\n                            <a\r\n                                className=\"button optimizedCheckout-buttonSecondary\"\r\n                                data-test=\"customer-cancel-button\"\r\n                                href=\"#\"\r\n                                id=\"checkout-customer-cancel\"\r\n                                onClick={preventDefault(onCancel)}\r\n                            >\r\n                                <TranslatedString\r\n                                    id={\r\n                                        viewType === CustomerViewType.CancellableEnforcedLogin\r\n                                            ? 'login_email.use_another_email'\r\n                                            : 'common.cancel_action'\r\n                                    }\r\n                                />\r\n                            </a>\r\n                        )}\r\n                </div>\r\n\r\n                {viewType === CustomerViewType.SuggestedLogin && changeEmailLink()}\r\n            </Fieldset>\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default withLanguage(\r\n    withFormik<LoginFormProps & WithLanguageProps, LoginFormValues>({\r\n        mapPropsToValues: ({ email = '' }) => ({\r\n            email,\r\n            password: '',\r\n        }),\r\n        handleSubmit: (values, { props: { onSignIn } }) => {\r\n            onSignIn(values);\r\n        },\r\n        validationSchema: ({ language }: LoginFormProps & WithLanguageProps) =>\r\n            getEmailValidationSchema({ language }).concat(\r\n                object({\r\n                    password: string().required(\r\n                        language.translate('customer.password_required_error'),\r\n                    ),\r\n                }),\r\n            ),\r\n    })(memo(LoginForm)),\r\n);\r\n","export default function mapErrorMessage(\r\n    error: any, // TODO: Export `RequestError`\r\n    translate: (key: string) => string,\r\n): string {\r\n    const type = error.body && error.body.type;\r\n\r\n    switch (type) {\r\n        case 'throttled_login':\r\n            return translate('customer.sign_in_throttled_error');\r\n\r\n        case 'reset_password_before_login':\r\n            return translate('customer.reset_password_before_login_error');\r\n\r\n        default:\r\n            return translate('customer.sign_in_error');\r\n    }\r\n}\r\n","import { CustomerAccountRequestBody } from '@bigcommerce/checkout-sdk';\r\n\r\nimport { mapCustomFormFieldsFromFormValues } from '../formFields';\r\n\r\nimport { CreateAccountFormValues } from './getCreateCustomerValidationSchema';\r\n\r\nexport default function mapCreateAccountFromFormValues({\r\n    acceptsMarketingEmails,\r\n    customFields,\r\n    ...values\r\n}: CreateAccountFormValues): CustomerAccountRequestBody {\r\n    return {\r\n        ...values,\r\n        acceptsMarketingEmails: acceptsMarketingEmails && acceptsMarketingEmails.length > 0,\r\n        customFields: mapCustomFormFieldsFromFormValues(customFields),\r\n    };\r\n}\r\n","import { CustomerInitializeOptions, CustomerRequestOptions } from '@bigcommerce/checkout-sdk';\r\nimport { FieldProps, FormikProps, withFormik } from 'formik';\r\nimport React, { FunctionComponent, memo, ReactNode, useCallback, useEffect, useState } from 'react';\r\n\r\nimport CheckoutStepStatus from '../checkout/CheckoutStepStatus';\r\nimport { getAppliedStyles } from '../common/dom';\r\nimport { TranslatedString } from '../locale';\r\nimport { PrivacyPolicyField } from '../privacyPolicy';\r\nimport { Button, ButtonVariant } from '../ui/button';\r\nimport { BasicFormField, Fieldset, Legend } from '../ui/form';\r\nimport { LoadingOverlay } from '../ui/loading';\r\n\r\nimport { GuestFormValues } from './GuestForm';\r\nimport SubscribeField from './SubscribeField';\r\n\r\nexport interface StripeGuestFormProps {\r\n    canSubscribe: boolean;\r\n    checkoutButtons?: ReactNode;\r\n    step: CheckoutStepStatus;\r\n    continueAsGuestButtonLabelId: string;\r\n    email?: string;\r\n    isLoading: boolean;\r\n    requiresMarketingConsent: boolean;\r\n    defaultShouldSubscribe: boolean;\r\n    privacyPolicyUrl?: string;\r\n    onChangeEmail(email: string): void;\r\n    onContinueAsGuest(data: GuestFormValues): void;\r\n    deinitialize(options: CustomerRequestOptions): void;\r\n    initialize(options: CustomerInitializeOptions): void;\r\n}\r\n\r\nconst StripeGuestForm: FunctionComponent<StripeGuestFormProps & FormikProps<GuestFormValues>> = ({\r\n    continueAsGuestButtonLabelId,\r\n    isLoading,\r\n    initialize,\r\n    deinitialize,\r\n    onChangeEmail,\r\n    onContinueAsGuest,\r\n    canSubscribe,\r\n    checkoutButtons,\r\n    requiresMarketingConsent,\r\n    privacyPolicyUrl,\r\n    step,\r\n}) => {\r\n\r\n    const [continueAsAGuestButton, setContinueAsAGuestButton] = useState(true);\r\n    const [emailValue, setEmailValue] = useState('');\r\n    const [authentication, setAuthentication] = useState(false);\r\n    const [isStripeLoading, setIsStripeLoading] = useState(true);\r\n    const [isNewAuth, setIsNewAuth] = useState(false);\r\n    const handleOnClickSubmitButton = () => {\r\n        onContinueAsGuest({\r\n            email: emailValue,\r\n            shouldSubscribe: false,\r\n        });\r\n    };\r\n    const setEmailCallback = useCallback((authenticated: boolean, email: string) => {\r\n        onChangeEmail(email);\r\n        setEmailValue(email);\r\n        setContinueAsAGuestButton(!email);\r\n        setAuthentication(authenticated);\r\n\r\n        if(!authenticated){\r\n            setIsNewAuth(true);\r\n        }\r\n    }, [setContinueAsAGuestButton, onChangeEmail]);\r\n\r\n    useEffect(() => {\r\n        if ((!step.isComplete || isNewAuth) && emailValue && authentication) {\r\n            handleOnClickSubmitButton();\r\n        }\r\n    }, [emailValue, authentication, isNewAuth]);\r\n\r\n    const handleLoading = useCallback((mounted: boolean) => {\r\n        setIsStripeLoading(mounted);\r\n    }, []);\r\n\r\n    const stripeDeinitialize = () => {\r\n        deinitialize({\r\n            methodId: 'stripeupe',\r\n        });\r\n    };\r\n\r\n    const stripeInitialize = () => {\r\n        initialize( {\r\n            methodId: 'stripeupe',\r\n            stripeupe: {\r\n                container: 'stripeupeLink',\r\n                onEmailChange: setEmailCallback,\r\n                isLoading: handleLoading,\r\n                getStyles: getStripeStyles,\r\n                gatewayId: 'stripeupe',\r\n                methodId: 'card',\r\n            },\r\n        })};\r\n\r\n    useEffect(() => {\r\n        stripeInitialize();\r\n\r\n        return () => stripeDeinitialize();\r\n    }, []);\r\n\r\n    const getStylesFromElement = (\r\n        id: string,\r\n        properties: string[]) => {\r\n        const parentContainer = document.getElementById(id);\r\n\r\n        if (parentContainer) {\r\n            return getAppliedStyles(parentContainer, properties);\r\n        }\r\n \r\n            return undefined;\r\n        \r\n    };\r\n\r\n    const containerId = 'stripe-card-component-field';\r\n\r\n    const getStripeStyles: () => (Record<string, string> | undefined) = useCallback( () => {\r\n        const formInput = getStylesFromElement(`${containerId}--input`, ['color', 'background-color', 'border-color', 'box-shadow']);\r\n        const formLabel = getStylesFromElement(`${containerId}--label`, ['color']);\r\n        const formError = getStylesFromElement(`${containerId}--error`, ['color']);\r\n\r\n        return formLabel && formInput && formError ? {\r\n            labelText: formLabel.color,\r\n            fieldText: formInput.color,\r\n            fieldPlaceholderText: formInput.color,\r\n            fieldErrorText: formError.color,\r\n            fieldBackground: formInput['background-color'],\r\n            fieldInnerShadow: formInput['box-shadow'],\r\n            fieldBorder: formInput['border-color'],\r\n        } : undefined;\r\n    }, [])\r\n\r\n    const renderCheckoutThemeStylesForStripeUPE = () => {\r\n        return (\r\n            <div\r\n                className=\"optimizedCheckout-form-input\"\r\n                id={ `${containerId}--input` }\r\n                placeholder=\"1111\"\r\n            >\r\n                <div\r\n                    className=\"form-field--error\"\r\n                >\r\n                    <div\r\n                        className=\"optimizedCheckout-form-label\"\r\n                        id={ `${containerId}--error` }\r\n                    />\r\n                </div>\r\n                <div\r\n                    className=\"optimizedCheckout-form-label\"\r\n                    id={ `${containerId}--label` }\r\n                />\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const renderField = useCallback((fieldProps: FieldProps<boolean>) => (\r\n        <SubscribeField\r\n            { ...fieldProps }\r\n            requiresMarketingConsent={ requiresMarketingConsent }\r\n        />\r\n    ), [\r\n        requiresMarketingConsent,\r\n    ]);\r\n\r\n    const buttonText = authentication && !isNewAuth? 'customer.continue_as_stripe_customer_action' : continueAsGuestButtonLabelId;\r\n\r\n    return (\r\n        <>\r\n            <div className=\"checkout-form\">\r\n                <LoadingOverlay\r\n                    hideContentWhenLoading\r\n                    isLoading={ isStripeLoading }\r\n                >\r\n                    <Fieldset\r\n                        legend={ !authentication &&\r\n                            <Legend hidden>\r\n                                <TranslatedString id=\"customer.guest_customer_text\"/>\r\n                            </Legend>\r\n                        }\r\n                    >\r\n                        <div className=\"customerEmail-container\">\r\n                            <div className=\"customerEmail-body\">\r\n                                <div id=\"stripeupeLink\"/>\r\n                                <br/>\r\n                                { (canSubscribe || requiresMarketingConsent) && <BasicFormField\r\n                                    name=\"shouldSubscribe\"\r\n                                    render={ renderField }\r\n                                /> }\r\n\r\n                                { privacyPolicyUrl && <PrivacyPolicyField\r\n                                    url={ privacyPolicyUrl }\r\n                                /> }\r\n                            </div>\r\n\r\n                            <div className=\"form-actions customerEmail-action\">\r\n                                { (!authentication || (authentication && !isNewAuth )) && <Button\r\n                                    className=\"stripeCustomerEmail-button\"\r\n                                    disabled={ continueAsAGuestButton }\r\n                                    id=\"stripe-checkout-customer-continue\"\r\n                                    isLoading={ isLoading }\r\n                                    onClick={ handleOnClickSubmitButton }\r\n                                    testId=\"stripe-customer-continue-as-guest-button\"\r\n                                    type=\"submit\"\r\n                                    variant={ ButtonVariant.Primary }\r\n                                >\r\n                                    <TranslatedString id={ buttonText }/>\r\n                                </Button> }\r\n                            </div>\r\n                        </div>\r\n                        { !authentication && checkoutButtons }\r\n                    </Fieldset>\r\n                </LoadingOverlay>\r\n            </div>\r\n            { renderCheckoutThemeStylesForStripeUPE() }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default withFormik<StripeGuestFormProps, GuestFormValues>({\r\n    mapPropsToValues: ({\r\n                           email = '',\r\n                           defaultShouldSubscribe = false,\r\n                           requiresMarketingConsent,\r\n                       }) => ({\r\n        email,\r\n        shouldSubscribe: requiresMarketingConsent ? false : defaultShouldSubscribe,\r\n        privacyPolicy: false,\r\n    }),\r\n    handleSubmit: (values, { props: { onContinueAsGuest } }) => {\r\n        onContinueAsGuest(values);\r\n    },\r\n})(memo(StripeGuestForm));\r\n","import {\r\n    CheckoutPaymentMethodExecutedOptions,\r\n    CheckoutSelectors,\r\n    CustomerAccountRequestBody,\r\n    CustomerCredentials,\r\n    CustomerInitializeOptions,\r\n    CustomerRequestOptions,\r\n    ExecutePaymentMethodCheckoutOptions,\r\n    FormField,\r\n    GuestCredentials,\r\n    SignInEmail,\r\n    StoreConfig,\r\n} from '@bigcommerce/checkout-sdk';\r\nimport { noop } from 'lodash';\r\nimport React, { Component, ReactNode } from 'react';\r\n\r\nimport { AnalyticsContextProps } from '@bigcommerce/checkout/analytics';\r\nimport { CustomerSkeleton } from '@bigcommerce/checkout/ui';\r\n\r\nimport { withAnalytics } from '../analytics';\r\nimport { CheckoutContextProps, withCheckout } from '../checkout';\r\nimport CheckoutStepStatus from '../checkout/CheckoutStepStatus';\r\nimport { isErrorWithType } from '../common/error';\r\nimport { isFloatingLabelEnabled } from '../common/utility';\r\nimport { PaymentMethodId } from '../payment/paymentMethod';\r\n\r\nimport CheckoutButtonList from './CheckoutButtonList';\r\nimport CreateAccountForm from './CreateAccountForm';\r\nimport CustomerViewType from './CustomerViewType';\r\nimport EmailLoginForm, { EmailLoginFormValues } from './EmailLoginForm';\r\nimport { CreateAccountFormValues } from './getCreateCustomerValidationSchema';\r\nimport GuestForm, { GuestFormValues } from './GuestForm';\r\nimport LoginForm from './LoginForm';\r\nimport mapCreateAccountFromFormValues from './mapCreateAccountFromFormValues';\r\nimport StripeGuestForm from './StripeGuestForm';\r\n\r\nexport interface CustomerProps {\r\n    viewType: CustomerViewType;\r\n    step: CheckoutStepStatus;\r\n    isEmbedded?: boolean;\r\n    isSubscribed: boolean;\r\n    checkEmbeddedSupport?(methodIds: string[]): void;\r\n    onChangeViewType?(viewType: CustomerViewType): void;\r\n    onAccountCreated?(): void;\r\n    onContinueAsGuest?(): void;\r\n    onContinueAsGuestError?(error: Error): void;\r\n    onReady?(): void;\r\n    onSubscribeToNewsletter(subscribe: boolean): void;\r\n    onSignIn?(): void;\r\n    onSignInError?(error: Error): void;\r\n    onUnhandledError?(error: Error): void;\r\n}\r\n\r\nexport interface WithCheckoutCustomerProps {\r\n    canSubscribe: boolean;\r\n    customerAccountFields: FormField[];\r\n    checkoutButtonIds: string[];\r\n    defaultShouldSubscribe: boolean;\r\n    email?: string;\r\n    firstName?: string;\r\n    forgotPasswordUrl: string;\r\n    isContinuingAsGuest: boolean;\r\n    isCreatingAccount: boolean;\r\n    isExecutingPaymentMethodCheckout: boolean;\r\n    isGuestEnabled: boolean;\r\n    hasBillingId: boolean;\r\n    isInitializing: boolean;\r\n    isSendingSignInEmail: boolean;\r\n    isSignInEmailEnabled: boolean;\r\n    isSigningIn: boolean;\r\n    privacyPolicyUrl?: string;\r\n    providerWithCustomCheckout?: string;\r\n    requiresMarketingConsent: boolean;\r\n    signInEmail?: SignInEmail;\r\n    signInEmailError?: Error;\r\n    isAccountCreationEnabled: boolean;\r\n    createAccountError?: Error;\r\n    signInError?: Error;\r\n    isStripeLinkEnabled?: boolean;\r\n    useFloatingLabel?: boolean;\r\n    clearError(error: Error): Promise<CheckoutSelectors>;\r\n    continueAsGuest(credentials: GuestCredentials): Promise<CheckoutSelectors>;\r\n    deinitializeCustomer(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\r\n    executePaymentMethodCheckout(\r\n        options: ExecutePaymentMethodCheckoutOptions,\r\n    ): Promise<CheckoutSelectors>;\r\n    initializeCustomer(options: CustomerInitializeOptions): Promise<CheckoutSelectors>;\r\n    sendLoginEmail(params: { email: string }): Promise<CheckoutSelectors>;\r\n    signIn(credentials: CustomerCredentials): Promise<CheckoutSelectors>;\r\n    createAccount(values: CustomerAccountRequestBody): Promise<CheckoutSelectors>;\r\n    loadPaymentMethods(): Promise<CheckoutSelectors>;\r\n}\r\n\r\nexport interface CustomerState {\r\n    isEmailLoginFormOpen: boolean;\r\n    isReady: boolean;\r\n    hasRequestedLoginEmail: boolean;\r\n}\r\n\r\nclass Customer extends Component<CustomerProps & WithCheckoutCustomerProps & AnalyticsContextProps, CustomerState> {\r\n    state: CustomerState = {\r\n        isEmailLoginFormOpen: false,\r\n        isReady: false,\r\n        hasRequestedLoginEmail: false,\r\n    };\r\n\r\n    private draftEmail?: string;\r\n\r\n    async componentDidMount(): Promise<void> {\r\n        const {\r\n            initializeCustomer,\r\n            loadPaymentMethods,\r\n            email,\r\n            onReady = noop,\r\n            onUnhandledError = noop,\r\n            providerWithCustomCheckout,\r\n        } = this.props;\r\n\r\n        this.draftEmail = email;\r\n\r\n        try {\r\n            await loadPaymentMethods();\n\r\n            if (providerWithCustomCheckout !== PaymentMethodId.StripeUPE) {\r\n                await initializeCustomer({methodId: providerWithCustomCheckout});\r\n            }\r\n        } catch (error) {\r\n            onUnhandledError(error);\r\n        }\r\n\r\n        this.setState({ isReady: true });\r\n\r\n        onReady();\r\n    }\r\n\r\n    async componentWillUnmount(): Promise<void> {\r\n        const {\r\n            deinitializeCustomer = noop,\r\n            providerWithCustomCheckout,\r\n            onUnhandledError = noop,\r\n        } = this.props;\r\n\r\n        try {\r\n            await deinitializeCustomer({ methodId: providerWithCustomCheckout });\r\n        } catch (error) {\r\n            onUnhandledError(error);\r\n        }\r\n    }\r\n\r\n    render(): ReactNode {\r\n        const { viewType } = this.props;\r\n        const { isEmailLoginFormOpen, isReady } = this.state;\r\n        const shouldRenderGuestForm = viewType === CustomerViewType.Guest;\r\n        const shouldRenderCreateAccountForm = viewType === CustomerViewType.CreateAccount;\r\n        const shouldRenderLoginForm = !shouldRenderGuestForm && !shouldRenderCreateAccountForm;\r\n\r\n        return (\r\n            <CustomerSkeleton isLoading={!isReady}>\r\n                {isEmailLoginFormOpen && this.renderEmailLoginLinkForm()}\r\n                {shouldRenderLoginForm && this.renderLoginForm()}\r\n                {shouldRenderGuestForm && this.renderGuestForm()}\r\n                {shouldRenderCreateAccountForm && this.renderCreateAccountForm()}\r\n            </CustomerSkeleton>\r\n        );\r\n    }\r\n\r\n    private renderGuestForm(): ReactNode {\r\n        const {\r\n            canSubscribe,\r\n            checkEmbeddedSupport,\r\n            checkoutButtonIds,\r\n            deinitializeCustomer,\r\n            email,\r\n            initializeCustomer,\r\n            isContinuingAsGuest = false,\r\n            isExecutingPaymentMethodCheckout = false,\r\n            isInitializing = false,\r\n            isSubscribed,\r\n            privacyPolicyUrl,\r\n            requiresMarketingConsent,\r\n            isStripeLinkEnabled,\r\n            onUnhandledError = noop,\r\n            step,\r\n            useFloatingLabel,\r\n        } = this.props;\r\n\r\n        return (\r\n            isStripeLinkEnabled ?\r\n                <StripeGuestForm\r\n                    canSubscribe={ canSubscribe }\r\n                    checkoutButtons={\r\n                        <CheckoutButtonList\r\n                            checkEmbeddedSupport={checkEmbeddedSupport}\r\n                            deinitialize={deinitializeCustomer}\r\n                            initialize={initializeCustomer}\r\n                            isInitializing={isInitializing}\r\n                            methodIds={checkoutButtonIds}\r\n                            onError={onUnhandledError}\r\n                        />\r\n                    }\r\n                    continueAsGuestButtonLabelId=\"customer.continue\"\r\n                    defaultShouldSubscribe={ isSubscribed }\r\n                    deinitialize={ deinitializeCustomer }\r\n                    email={ this.draftEmail || email }\r\n                    initialize={ initializeCustomer }\r\n                    isLoading={ isContinuingAsGuest || isInitializing || isExecutingPaymentMethodCheckout }\r\n                    onChangeEmail={ this.handleChangeEmail }\r\n                    onContinueAsGuest={ this.handleContinueAsGuest }\r\n                    privacyPolicyUrl={ privacyPolicyUrl }\r\n                    requiresMarketingConsent={ requiresMarketingConsent }\r\n                    step={ step }\r\n                />\r\n                :\r\n            <GuestForm\r\n                canSubscribe={canSubscribe}\r\n                checkoutButtons={\r\n                    <CheckoutButtonList\r\n                        checkEmbeddedSupport={checkEmbeddedSupport}\r\n                        deinitialize={deinitializeCustomer}\r\n                        initialize={initializeCustomer}\r\n                        isInitializing={isInitializing}\r\n                        methodIds={checkoutButtonIds}\r\n                        onError={onUnhandledError}\r\n                    />\r\n                }\r\n                continueAsGuestButtonLabelId=\"customer.continue\"\r\n                defaultShouldSubscribe={isSubscribed}\r\n                email={this.draftEmail || email}\r\n                isLoading={\r\n                    isContinuingAsGuest || isInitializing || isExecutingPaymentMethodCheckout\r\n                }\r\n                onChangeEmail={this.handleChangeEmail}\r\n                onContinueAsGuest={this.handleContinueAsGuest}\r\n                privacyPolicyUrl={privacyPolicyUrl}\r\n                requiresMarketingConsent={requiresMarketingConsent}\r\n                useFloatingLabel={useFloatingLabel}\r\n            />\r\n        );\r\n    }\r\n\r\n    private renderEmailLoginLinkForm(): ReactNode {\r\n        const { isEmailLoginFormOpen, hasRequestedLoginEmail } = this.state;\r\n\r\n        const { isSendingSignInEmail, signInEmailError, signInEmail, useFloatingLabel } =\r\n            this.props;\r\n\r\n        return (\r\n            <EmailLoginForm\r\n                email={this.draftEmail}\r\n                emailHasBeenRequested={hasRequestedLoginEmail}\r\n                isOpen={isEmailLoginFormOpen}\r\n                isSendingEmail={isSendingSignInEmail}\r\n                onRequestClose={this.closeEmailLoginFormForm}\r\n                onSendLoginEmail={this.handleSendLoginEmail}\r\n                sentEmail={signInEmail}\r\n                sentEmailError={signInEmailError}\r\n                useFloatingLabel={useFloatingLabel}\r\n            />\r\n        );\r\n    }\r\n\r\n    private closeEmailLoginFormForm: () => void = () => {\r\n        this.setState({\r\n            isEmailLoginFormOpen: false,\r\n            hasRequestedLoginEmail: false,\r\n        });\r\n    };\r\n\r\n    private renderCreateAccountForm(): ReactNode {\r\n        const {\r\n            customerAccountFields,\r\n            isCreatingAccount,\r\n            createAccountError,\r\n            requiresMarketingConsent,\r\n            useFloatingLabel,\r\n        } = this.props;\r\n\r\n        return (\r\n            <CreateAccountForm\r\n                createAccountError={createAccountError}\r\n                formFields={customerAccountFields}\r\n                isCreatingAccount={isCreatingAccount}\r\n                onCancel={this.handleCancelCreateAccount}\r\n                onSubmit={this.handleCreateAccount}\r\n                requiresMarketingConsent={requiresMarketingConsent}\r\n                useFloatingLabel={useFloatingLabel}\r\n            />\r\n        );\r\n    }\r\n\r\n    private renderLoginForm(): ReactNode {\r\n        const {\r\n            isEmbedded,\r\n            email,\r\n            forgotPasswordUrl,\r\n            isSignInEmailEnabled,\r\n            isGuestEnabled,\r\n            isSendingSignInEmail,\r\n            isSigningIn,\r\n            isAccountCreationEnabled,\r\n            providerWithCustomCheckout,\r\n            signInError,\r\n            useFloatingLabel,\r\n            viewType,\r\n        } = this.props;\r\n\r\n        return (\r\n            <LoginForm\r\n                canCancel={isGuestEnabled}\r\n                continueAsGuestButtonLabelId={\r\n                    providerWithCustomCheckout\r\n                        ? 'customer.continue'\r\n                        : 'customer.continue_as_guest_action'\r\n                }\r\n                email={this.draftEmail || email}\r\n                forgotPasswordUrl={forgotPasswordUrl}\r\n                isSendingSignInEmail={isSendingSignInEmail}\r\n                isSignInEmailEnabled={isSignInEmailEnabled && !isEmbedded}\r\n                isSigningIn={isSigningIn}\r\n                onCancel={this.handleCancelSignIn}\r\n                onChangeEmail={this.handleChangeEmail}\r\n                onContinueAsGuest={this.executePaymentMethodCheckoutOrContinue}\r\n                onCreateAccount={this.showCreateAccount}\r\n                onSendLoginEmail={this.handleEmailLoginClicked}\r\n                onSignIn={this.handleSignIn}\r\n                shouldShowCreateAccountLink={isAccountCreationEnabled}\r\n                signInError={signInError}\r\n                useFloatingLabel={useFloatingLabel}\r\n                viewType={viewType}\r\n            />\r\n        );\r\n    }\r\n\r\n    private handleEmailLoginClicked: () => void = async () => {\r\n        const { viewType } = this.props;\r\n\r\n        try {\r\n            if (viewType !== CustomerViewType.Login && this.draftEmail) {\r\n                await this.handleSendLoginEmail({ email: this.draftEmail });\r\n            }\r\n        } finally {\r\n            this.setState({\r\n                isEmailLoginFormOpen: true,\r\n            });\r\n        }\r\n    };\r\n\r\n    private handleSendLoginEmail: (values: EmailLoginFormValues) => Promise<void> = async (\r\n        values,\r\n    ) => {\r\n        const { sendLoginEmail } = this.props;\r\n\r\n        try {\r\n            await sendLoginEmail(values);\r\n        } finally {\r\n            this.setState({\r\n                hasRequestedLoginEmail: true,\r\n            });\r\n        }\r\n    };\r\n\r\n    private handleContinueAsGuest: (formValues: GuestFormValues) => Promise<void> = async (\r\n        formValues,\r\n    ) => {\r\n        const {\r\n            canSubscribe,\r\n            continueAsGuest,\r\n            hasBillingId,\r\n            defaultShouldSubscribe,\r\n            onChangeViewType = noop,\r\n            onContinueAsGuest = noop,\r\n            onContinueAsGuestError = noop,\r\n            onSubscribeToNewsletter,\r\n        } = this.props;\r\n\r\n        const email = formValues.email.trim();\r\n        const updateSubscriptionWhenUnchecked =\r\n            hasBillingId || defaultShouldSubscribe ? false : undefined;\r\n\r\n        try {\r\n            const { data } = await continueAsGuest({\r\n                email,\r\n                acceptsMarketingNewsletter:\r\n                    canSubscribe && formValues.shouldSubscribe\r\n                        ? true\r\n                        : updateSubscriptionWhenUnchecked,\r\n                acceptsAbandonedCartEmails: formValues.shouldSubscribe\r\n                    ? true\r\n                    : updateSubscriptionWhenUnchecked,\r\n            });\r\n\r\n            onSubscribeToNewsletter(formValues.shouldSubscribe);\r\n\r\n            const customer = data.getCustomer();\r\n\r\n            if (customer && customer.shouldEncourageSignIn && customer.isGuest && !customer.isStripeLinkAuthenticated) {\r\n                return onChangeViewType(CustomerViewType.SuggestedLogin);\r\n            }\r\n\r\n            await this.executePaymentMethodCheckoutOrContinue();\r\n\r\n            this.draftEmail = undefined;\r\n        } catch (error) {\r\n            if (\r\n                isErrorWithType(error) &&\r\n                (error.type === 'update_subscriptions' ||\r\n                    error.type === 'payment_method_client_invalid')\r\n            ) {\r\n                this.draftEmail = undefined;\r\n\r\n                onContinueAsGuest();\r\n            }\r\n\r\n            if (isErrorWithType(error) && error.status === 429) {\r\n                return onChangeViewType(CustomerViewType.EnforcedLogin);\r\n            }\r\n\r\n            if (isErrorWithType(error) && error.status === 403) {\r\n                return onChangeViewType(CustomerViewType.CancellableEnforcedLogin);\r\n            }\r\n\r\n            onContinueAsGuestError(error);\r\n        }\r\n    };\r\n\r\n    private handleSignIn: (credentials: CustomerCredentials) => Promise<void> = async (\r\n        credentials,\r\n    ) => {\r\n        const { signIn, onSignIn = noop, onSignInError = noop } = this.props;\r\n\r\n        try {\r\n            await signIn(credentials);\r\n            onSignIn();\r\n\r\n            this.draftEmail = undefined;\r\n        } catch (error) {\r\n            onSignInError(error);\r\n        }\r\n    };\r\n\r\n    private handleCreateAccount: (values: CreateAccountFormValues) => void = async (values) => {\r\n        const { createAccount = noop, onAccountCreated = noop } = this.props;\r\n\r\n        await createAccount(mapCreateAccountFromFormValues(values));\r\n\r\n        onAccountCreated();\r\n    };\r\n\r\n    private showCreateAccount: () => void = () => {\r\n        const { onChangeViewType = noop } = this.props;\r\n\r\n        onChangeViewType(CustomerViewType.CreateAccount);\r\n    };\r\n\r\n    private handleCancelCreateAccount: () => void = () => {\r\n        const { clearError, onChangeViewType = noop, createAccountError } = this.props;\r\n\r\n        if (createAccountError) {\r\n            clearError(createAccountError);\r\n        }\r\n\r\n        onChangeViewType(CustomerViewType.Login);\r\n    };\r\n\r\n    private handleCancelSignIn: () => void = () => {\r\n        const { clearError, onChangeViewType = noop, signInError } = this.props;\r\n\r\n        if (signInError) {\r\n            clearError(signInError);\r\n        }\r\n\r\n        onChangeViewType(CustomerViewType.Guest);\r\n    };\r\n\r\n    private handleChangeEmail: (email: string) => void = (email) => {\r\n        const { analyticsTracker } = this.props;\n\r\n        this.draftEmail = email;\r\n        analyticsTracker.customerEmailEntry(email);\r\n    };\r\n\r\n    private executePaymentMethodCheckoutOrContinue: () => void = async () => {\r\n        const {\r\n            executePaymentMethodCheckout,\r\n            onContinueAsGuest = noop,\r\n            providerWithCustomCheckout\r\n        } = this.props;\r\n\r\n        if (providerWithCustomCheckout && providerWithCustomCheckout !== PaymentMethodId.StripeUPE) {\r\n            await executePaymentMethodCheckout({\r\n                methodId: providerWithCustomCheckout,\r\n                continueWithCheckoutCallback: onContinueAsGuest,\r\n                checkoutPaymentMethodExecuted: (payload) => this.checkoutPaymentMethodExecuted(payload)\r\n            });\r\n        } else {\r\n            onContinueAsGuest();\r\n        }\r\n    };\r\n\r\n    private checkoutPaymentMethodExecuted(payload?: CheckoutPaymentMethodExecutedOptions) {\r\n        const { analyticsTracker } = this.props;\n\r\n        analyticsTracker.customerPaymentMethodExecuted(payload);\r\n    }\r\n}\r\n\r\nexport function mapToWithCheckoutCustomerProps({\r\n    checkoutService,\r\n    checkoutState,\r\n}: CheckoutContextProps): WithCheckoutCustomerProps | null {\r\n    const {\r\n        data: {\r\n            getBillingAddress,\r\n            getCustomerAccountFields,\r\n            getCheckout,\r\n            getCustomer,\r\n            getSignInEmail,\r\n            getConfig,\r\n            getPaymentMethod,\r\n            getCart,\r\n        },\r\n        errors: { getSignInError, getSignInEmailError, getCreateCustomerAccountError },\r\n        statuses: {\r\n            isContinuingAsGuest,\r\n            isExecutingPaymentMethodCheckout,\r\n            isInitializingCustomer,\r\n            isSigningIn,\r\n            isSendingSignInEmail,\r\n            isCreatingCustomerAccount,\r\n        },\r\n    } = checkoutState;\r\n\r\n    const cart = getCart();\r\n    const billingAddress = getBillingAddress();\r\n    const checkout = getCheckout();\r\n    const customer = getCustomer();\r\n    const signInEmail = getSignInEmail();\r\n    const config = getConfig();\r\n    let stripeUpeLinkEnabled = false;\r\n\r\n    // TODO: This should be driven by backend, same as other wallet buttons.\r\n    if (cart) {\r\n        const stripeUpe = getPaymentMethod('card', PaymentMethodId.StripeUPE);\r\n        const linkEnabled = stripeUpe?.initializationData.enableLink || false;\r\n        const stripeUpeSupportedCurrency = cart.currency.code === 'USD' || false;\r\n\r\n        stripeUpeLinkEnabled = linkEnabled && stripeUpeSupportedCurrency;\r\n    }\r\n\r\n    if (!checkout || !config) {\r\n        return null;\r\n    }\r\n\r\n    const {\r\n        checkoutSettings: {\r\n            privacyPolicyUrl,\r\n            requiresMarketingConsent,\r\n            isSignInEmailEnabled,\r\n            isAccountCreationEnabled,\r\n        },\r\n    } = config as StoreConfig & { checkoutSettings: { isAccountCreationEnabled: boolean } };\r\n\r\n    return {\r\n        customerAccountFields: getCustomerAccountFields(),\r\n        canSubscribe: config.shopperConfig.showNewsletterSignup,\r\n        checkoutButtonIds: config.checkoutSettings.remoteCheckoutProviders,\r\n        clearError: checkoutService.clearError,\r\n        createAccount: checkoutService.createCustomerAccount,\r\n        continueAsGuest: checkoutService.continueAsGuest,\r\n        sendLoginEmail: checkoutService.sendSignInEmail,\r\n        defaultShouldSubscribe: config.shopperConfig.defaultNewsletterSignup,\r\n        deinitializeCustomer: checkoutService.deinitializeCustomer,\r\n        executePaymentMethodCheckout: checkoutService.executePaymentMethodCheckout,\r\n        email: billingAddress?.email || customer?.email,\r\n        firstName: customer?.firstName,\r\n        forgotPasswordUrl: config.links.forgotPasswordLink,\r\n        initializeCustomer: checkoutService.initializeCustomer,\r\n        isCreatingAccount: isCreatingCustomerAccount(),\r\n        createAccountError: getCreateCustomerAccountError(),\r\n        hasBillingId: !!billingAddress?.id,\r\n        isContinuingAsGuest: isContinuingAsGuest(),\r\n        isExecutingPaymentMethodCheckout: isExecutingPaymentMethodCheckout(),\r\n        isInitializing: isInitializingCustomer(),\r\n        isSignInEmailEnabled,\r\n        isAccountCreationEnabled,\r\n        isGuestEnabled: config.checkoutSettings.guestCheckoutEnabled,\r\n        isSigningIn: isSigningIn(),\r\n        isSendingSignInEmail: isSendingSignInEmail(),\r\n        signInEmail,\r\n        signInEmailError: getSignInEmailError(),\r\n        privacyPolicyUrl,\r\n        providerWithCustomCheckout: config.checkoutSettings.providerWithCustomCheckout || undefined,\r\n        requiresMarketingConsent,\r\n        signIn: checkoutService.signInCustomer,\r\n        signInError: getSignInError(),\r\n        isStripeLinkEnabled: stripeUpeLinkEnabled,\r\n        loadPaymentMethods: checkoutService.loadPaymentMethods,\r\n        useFloatingLabel: isFloatingLabelEnabled(config.checkoutSettings),\r\n    };\r\n}\r\n\r\nexport default withAnalytics(withCheckout(mapToWithCheckoutCustomerProps)(Customer));\r\n","import { forIn, isDate, padStart } from 'lodash';\r\n\r\nexport default function mapCustomFormFieldsFromFormValues(customFieldsObject: {\r\n    [id: string]: any;\r\n}): Array<{ fieldId: string; fieldValue: string }> {\r\n    const customFields: Array<{ fieldId: string; fieldValue: string }> = [];\r\n\r\n    forIn(customFieldsObject, (value, key) => {\r\n        let fieldValue: string;\r\n\r\n        if (isDate(value)) {\r\n            const padMonth = padStart((value.getMonth() + 1).toString(), 2, '0');\r\n            const padDay = padStart(value.getDate().toString(), 2, '0');\r\n\r\n            fieldValue = `${value.getFullYear()}-${padMonth}-${padDay}`;\r\n        } else {\r\n            fieldValue = value;\r\n        }\r\n\r\n        customFields.push({\r\n            fieldId: key,\r\n            fieldValue,\r\n        });\r\n    });\r\n\r\n    return customFields;\r\n}\r\n","import React, { FunctionComponent, MouseEventHandler } from 'react';\r\n\r\nimport { preventDefault } from '../common/dom';\r\nimport { parseAnchor } from '../common/utility';\r\n\r\nimport { TranslatedStringProps } from './TranslatedString';\r\nimport withLanguage, { WithLanguageProps } from './withLanguage';\r\n\r\nexport type TranslatedLinkProps = TranslatedStringProps & {\r\n    testId?: string;\r\n    onClick: MouseEventHandler;\r\n};\r\n\r\nconst TranslatedLink: FunctionComponent<TranslatedLinkProps & WithLanguageProps> = ({\r\n    data,\r\n    id,\r\n    language,\r\n    onClick,\r\n    testId,\r\n}) => {\r\n    const translatedString = language.translate(id, data);\r\n    const parsedString = parseAnchor(translatedString);\r\n\r\n    return parsedString.length ? (\r\n        <>\r\n            {parsedString[0]}\r\n            <a data-test={testId} href=\"#\" onClick={preventDefault(onClick)}>\r\n                {parsedString[1]}\r\n            </a>\r\n            {parsedString[2]}\r\n        </>\r\n    ) : (\r\n        <>{translatedString}</>\r\n    );\r\n};\r\n\r\nexport default withLanguage(TranslatedLink);\r\n","import { FieldProps } from 'formik';\r\nimport { kebabCase } from 'lodash';\r\nimport React, { FunctionComponent, memo, ReactNode, useCallback } from 'react';\r\n\r\nimport BasicFormField from './BasicFormField';\r\nimport CheckboxInput from './CheckboxInput';\r\nimport FormFieldError from './FormFieldError';\r\n\r\nexport interface CheckboxFormFieldProps {\r\n    additionalClassName?: string;\r\n    disabled?: boolean;\r\n    name: string;\r\n    id?: string;\r\n    labelContent: ReactNode;\r\n    onChange?(isChecked: boolean): void;\r\n}\r\n\r\nconst CheckboxFormField: FunctionComponent<CheckboxFormFieldProps> = ({\r\n    additionalClassName,\r\n    disabled = false,\r\n    labelContent,\r\n    onChange,\r\n    name,\r\n    id,\r\n}) => {\r\n    const renderField = useCallback(\r\n        ({ field }: FieldProps) => (\r\n            <>\r\n                <CheckboxInput\r\n                    {...field}\r\n                    checked={!!field.value}\r\n                    disabled={disabled}\r\n                    id={id || field.name}\r\n                    label={labelContent}\r\n                />\r\n\r\n                <FormFieldError\r\n                    errorId={`${id ?? name}-field-error-message`}\r\n                    name={name}\r\n                    testId={`${kebabCase(name)}-field-error-message`}\r\n                />\r\n            </>\r\n        ),\r\n        [disabled, id, labelContent, name],\r\n    );\r\n\r\n    return (\r\n        <BasicFormField\r\n            additionalClassName={additionalClassName}\r\n            name={name}\r\n            onChange={onChange}\r\n            render={renderField}\r\n        />\r\n    );\r\n};\r\n\r\nexport default memo(CheckboxFormField);\r\n","import classNames from 'classnames';\r\nimport React, { forwardRef, ReactNode, Ref } from 'react';\r\n\r\nimport Input, { InputProps } from './Input';\r\nimport Label from './Label';\r\n\r\nexport interface CheckboxInputProps extends InputProps {\r\n    additionalClassName?: string;\r\n    label: ReactNode;\r\n    value: string;\r\n    checked: boolean;\r\n}\r\n\r\nconst CheckboxInput = forwardRef(\r\n    (\r\n        { additionalClassName, label, id, ...rest }: CheckboxInputProps,\r\n        ref: Ref<HTMLInputElement>,\r\n    ) => (\r\n        <>\r\n            <Input\r\n                {...rest}\r\n                className={classNames(\r\n                    'form-checkbox',\r\n                    'optimizedCheckout-form-checkbox',\r\n                    additionalClassName,\r\n                )}\r\n                id={id}\r\n                ref={ref}\r\n                type=\"checkbox\"\r\n            />\r\n            <Label htmlFor={id}>{label}</Label>\r\n        </>\r\n    ),\r\n);\r\n\r\nexport default CheckboxInput;\r\n","import { createInjectHoc, InjectHoc } from '../common/hoc';\r\n\r\nimport LocaleContext from './LocaleContext';\r\n\r\nexport interface WithDateProps {\r\n    date: {\r\n        inputFormat: string;\r\n    };\r\n}\r\n\r\nconst withDate: InjectHoc<WithDateProps> = createInjectHoc(LocaleContext, {\r\n    displayNamePrefix: 'withDate',\r\n    pickProps: (value, key) => key === 'date' && !!value,\r\n});\r\n\r\nexport default withDate;\r\n","import classNames from 'classnames';\r\nimport React, { forwardRef, ReactNode, Ref } from 'react';\r\n\r\nimport Input, { InputProps } from './Input';\r\nimport Label from './Label';\r\n\r\nexport interface RadioInputProps extends InputProps {\r\n    additionalClassName?: string;\r\n    label: ReactNode;\r\n    value: string;\r\n    checked: boolean;\r\n}\r\n\r\nconst RadioInput = forwardRef(\r\n    (\r\n        { additionalClassName, label, value, checked, id, ...rest }: RadioInputProps,\r\n        ref: Ref<HTMLInputElement>,\r\n    ) => (\r\n        <>\r\n            <Input\r\n                {...rest}\r\n                checked={checked}\r\n                className={classNames(\r\n                    'form-radio',\r\n                    'optimizedCheckout-form-radio',\r\n                    additionalClassName,\r\n                )}\r\n                id={id}\r\n                ref={ref}\r\n                type=\"radio\"\r\n                value={value}\r\n            />\r\n            <Label htmlFor={id}>{label}</Label>\r\n        </>\r\n    ),\r\n);\r\n\r\nexport default RadioInput;\r\n","import { FormFieldItem } from '@bigcommerce/checkout-sdk';\r\nimport classNames from 'classnames';\r\nimport { isDate, noop } from 'lodash';\r\nimport React, { FunctionComponent, memo, useCallback } from 'react';\r\nimport ReactDatePicker from 'react-datepicker';\r\n\r\nimport { withDate, WithDateProps } from '../../locale';\r\nimport { IconChevronDown } from '../icon';\r\n\r\nimport CheckboxInput from './CheckboxInput';\r\nimport DynamicFormFieldType from './DynamicFormFieldType';\r\nimport { InputProps } from './Input';\r\nimport RadioInput from './RadioInput';\r\nimport TextArea from './TextArea';\r\nimport TextInput from './TextInput';\r\n\r\nexport interface DynamicInputProps extends InputProps {\r\n    id: string;\r\n    additionalClassName?: string;\r\n    value?: string | string[];\r\n    rows?: number;\r\n    fieldType?: DynamicFormFieldType;\r\n    options?: FormFieldItem[];\r\n    useFloatingLabel?: boolean;\r\n}\r\n\r\nconst DynamicInput: FunctionComponent<DynamicInputProps & WithDateProps> = ({\r\n    additionalClassName,\r\n    date,\r\n    fieldType,\r\n    id,\r\n    name,\r\n    onChange = noop,\r\n    options,\r\n    placeholder,\r\n    useFloatingLabel,\r\n    value,\r\n    ...rest\r\n}) => {\r\n    const { inputFormat } = date;\r\n    const handleDateChange = useCallback(\r\n        (dateValue, event) =>\r\n            onChange({\r\n                ...event,\r\n                target: {\r\n                    name,\r\n                    value: dateValue,\r\n                },\r\n            }),\r\n        [onChange, name],\r\n    );\r\n\r\n    switch (fieldType) {\r\n        case DynamicFormFieldType.dropdown:\r\n            return (\r\n                <>\r\n                    <div\r\n                        className={classNames(\r\n                            { 'dropdown-chevron': !useFloatingLabel },\r\n                            { 'floating-select-chevron': useFloatingLabel },\r\n                        )}>\r\n                        <IconChevronDown />\r\n                    </div>\r\n                    <select\r\n                        {...(rest as any)}\r\n                        className={classNames(\r\n                            { 'floating-select': useFloatingLabel },\r\n                            'form-select optimizedCheckout-form-select',\r\n                        )}\r\n                        data-test={`${id}-select`}\r\n                        id={id}\r\n                        name={name}\r\n                        onChange={onChange}\r\n                        value={value === null ? '' : value}\r\n                    >\r\n                        {placeholder && <option value=\"\">{placeholder}</option>}\r\n                        {options &&\r\n                            options.map(({ label, value: optionValue }) => (\r\n                                <option key={optionValue} value={optionValue}>\r\n                                    {label}\r\n                                </option>\r\n                            ))}\r\n                    </select>\r\n                </>\r\n            );\r\n\r\n        case DynamicFormFieldType.radio:\r\n            if (!options || !options.length) {\r\n                return null;\r\n            }\r\n\r\n            return (\r\n                <>\r\n                    {options.map(({ label, value: optionValue }) => (\r\n                        <RadioInput\r\n                            {...rest}\r\n                            checked={optionValue === value}\r\n                            id={`${id}-${optionValue}`}\r\n                            key={optionValue}\r\n                            label={label}\r\n                            name={name}\r\n                            onChange={onChange}\r\n                            testId={`${id}-${optionValue}-radio`}\r\n                            value={optionValue}\r\n                        />\r\n                    ))}\r\n                </>\r\n            );\r\n\r\n        case DynamicFormFieldType.checkbox:\r\n            if (!options || !options.length) {\r\n                return null;\r\n            }\r\n\r\n            return (\r\n                <>\r\n                    {options.map(({ label, value: optionValue }) => (\r\n                        <CheckboxInput\r\n                            {...rest}\r\n                            checked={Array.isArray(value) ? value.includes(optionValue) : false}\r\n                            id={`${id}-${optionValue}`}\r\n                            key={optionValue}\r\n                            label={label}\r\n                            name={name}\r\n                            onChange={onChange}\r\n                            testId={`${id}-${optionValue}-checkbox`}\r\n                            value={optionValue}\r\n                        />\r\n                    ))}\r\n                </>\r\n            );\r\n\r\n        case DynamicFormFieldType.date:\r\n            return (\r\n                <ReactDatePicker\r\n                    {...(rest as any)}\r\n                    autoComplete=\"off\"\r\n                    // FIXME: we can avoid this by simply using onChangeRaw, but it's not being triggered properly\r\n                    // https://github.com/Hacker0x01/react-datepicker/issues/1357\r\n                    // onChangeRaw={ rest.onChange }\r\n                    calendarClassName=\"optimizedCheckout-contentPrimary\"\r\n                    className={classNames('form-input optimizedCheckout-form-input', {\r\n                        'floating-input': useFloatingLabel,\r\n                    })}\r\n                    dateFormat={inputFormat}\r\n                    maxDate={rest.max ? new Date(`${rest.max}T00:00:00Z`) : undefined}\r\n                    minDate={rest.min ? new Date(`${rest.min}T00:00:00Z`) : undefined}\r\n                    name={name}\r\n                    onChange={handleDateChange}\r\n                    placeholderText={inputFormat.toUpperCase()}\r\n                    popperClassName=\"optimizedCheckout-contentPrimary\"\r\n                    selected={isDate(value) ? value : undefined}\r\n                />\r\n            );\r\n\r\n        case DynamicFormFieldType.multiline:\r\n            return (\r\n                <TextArea\r\n                    {...(rest as any)}\r\n                    id={id}\r\n                    name={name}\r\n                    onChange={onChange}\r\n                    testId={`${id}-text`}\r\n                    type={fieldType}\r\n                    useFloatingLabel={useFloatingLabel}\r\n                    value={value}\r\n                />\r\n            );\r\n\r\n        default:\r\n            return (\r\n                <TextInput\r\n                    {...rest}\r\n                    id={id}\r\n                    name={name}\r\n                    onChange={onChange}\r\n                    placeholder={placeholder}\r\n                    testId={`${id}-${\r\n                        fieldType === DynamicFormFieldType.password ? 'password' : 'text'\r\n                    }`}\r\n                    type={fieldType}\r\n                    useFloatingLabel={useFloatingLabel}\r\n                    value={value}\r\n                />\r\n            );\r\n    }\r\n};\r\n\r\nexport default memo(withDate(DynamicInput));\r\n","import React, { FunctionComponent, memo, MouseEvent, useCallback } from 'react';\r\n\r\nimport { TranslatedString } from '../../locale';\r\n\r\nimport './MultiCheckboxControl.scss';\r\n\r\nexport interface MultiCheckboxControlProps {\r\n    testId?: string;\r\n    onSelectedAll(): void;\r\n    onSelectedNone(): void;\r\n}\r\n\r\nconst MultiCheckboxControl: FunctionComponent<MultiCheckboxControlProps> = ({\r\n    testId,\r\n    onSelectedAll,\r\n    onSelectedNone,\r\n}) => {\r\n    const handleSelectAllClick = useCallback(\r\n        (event: MouseEvent) => {\r\n            event.preventDefault();\r\n            onSelectedAll();\r\n        },\r\n        [onSelectedAll],\r\n    );\r\n\r\n    const handleSelectNoneClick = useCallback(\r\n        (event: MouseEvent) => {\r\n            event.preventDefault();\r\n            onSelectedNone();\r\n        },\r\n        [onSelectedNone],\r\n    );\r\n\r\n    return (\r\n        <ul className=\"multiCheckbox--controls\">\r\n            <li className=\"multiCheckbox--control\">\r\n                <TranslatedString id=\"address.select\" />\r\n            </li>\r\n\r\n            <li className=\"multiCheckbox--control\">\r\n                <a\r\n                    data-test={`${testId}Checkbox-all-button`}\r\n                    href=\"#\"\r\n                    onClick={handleSelectAllClick}\r\n                >\r\n                    <TranslatedString id=\"address.select_all\" />\r\n                </a>\r\n            </li>\r\n\r\n            <li className=\"multiCheckbox--control\">\r\n                <a\r\n                    data-test={`${testId}Checkbox-none-button`}\r\n                    href=\"#\"\r\n                    onClick={handleSelectNoneClick}\r\n                >\r\n                    <TranslatedString id=\"address.select_none\" />\r\n                </a>\r\n            </li>\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default memo(MultiCheckboxControl);\r\n","import { FormFieldItem } from '@bigcommerce/checkout-sdk';\r\nimport { FieldArray, FieldArrayRenderProps, getIn } from 'formik';\r\nimport { difference, kebabCase, noop, pick } from 'lodash';\r\nimport React, { ChangeEvent, FunctionComponent, memo, ReactNode, useCallback } from 'react';\r\n\r\nimport DynamicFormFieldType from './DynamicFormFieldType';\r\nimport DynamicInput from './DynamicInput';\r\nimport FormFieldContainer from './FormFieldContainer';\r\nimport FormFieldError from './FormFieldError';\r\nimport MultiCheckboxControl from './MultiCheckboxControl';\r\n\r\nexport interface CheckboxGroupFormFieldProps {\r\n    id: string;\r\n    label: ReactNode;\r\n    name: string;\r\n    options: FormFieldItem[];\r\n    onChange?(values: string[]): void;\r\n}\r\n\r\ntype MultiCheckboxFormFieldProps = CheckboxGroupFormFieldProps &\r\n    Pick<FieldArrayRenderProps, 'push' | 'remove' | 'pop' | 'form'>;\r\n\r\nconst MultiCheckboxFormField: FunctionComponent<MultiCheckboxFormFieldProps> = ({\r\n    form: { values, errors },\r\n    id,\r\n    label,\r\n    name,\r\n    onChange = noop,\r\n    options,\r\n    push,\r\n    remove,\r\n}) => {\r\n    const handleSelectAll = useCallback(() => {\r\n        const checkedValues: string[] = getIn(values, name) || [];\r\n\r\n        difference(\r\n            options.map(({ value }) => value),\r\n            checkedValues,\r\n        ).forEach((val) => push(val));\r\n\r\n        onChange(getIn(values, name));\r\n    }, [name, onChange, options, push, values]);\r\n\r\n    const handleSelectNone = useCallback(() => {\r\n        const checkedValues: string[] = getIn(values, name) || [];\r\n\r\n        checkedValues.forEach(() => remove(0));\r\n\r\n        onChange(getIn(values, name));\r\n    }, [name, onChange, remove, values]);\r\n\r\n    const handleInputChange = useCallback(\r\n        (event: ChangeEvent<HTMLInputElement>) => {\r\n            const checkedValues: string[] = getIn(values, name) || [];\r\n            const { value, checked } = event.target;\r\n\r\n            if (checked) {\r\n                push(value);\r\n            } else {\r\n                remove(checkedValues.indexOf(value));\r\n            }\r\n\r\n            onChange(getIn(values, name));\r\n        },\r\n        [name, onChange, push, remove, values],\r\n    );\r\n\r\n    return (\r\n        <FormFieldContainer hasError={getIn(errors, name) && getIn(errors, name).length}>\r\n            {label}\r\n\r\n            {options.length > 1 && (\r\n                <MultiCheckboxControl\r\n                    onSelectedAll={handleSelectAll}\r\n                    onSelectedNone={handleSelectNone}\r\n                    testId={id}\r\n                />\r\n            )}\r\n\r\n            <DynamicInput\r\n                fieldType={DynamicFormFieldType.checkbox}\r\n                id={id}\r\n                name={name}\r\n                onChange={handleInputChange}\r\n                options={options}\r\n                value={getIn(values, name) || []}\r\n            />\r\n\r\n            <FormFieldError\r\n                errorId={`${id ?? name}-field-error-message`}\r\n                name={name}\r\n                testId={`${kebabCase(name)}-field-error-message`}\r\n            />\r\n        </FormFieldContainer>\r\n    );\r\n};\r\n\r\nconst CheckboxGroupFormField: FunctionComponent<CheckboxGroupFormFieldProps> = ({\r\n    id,\r\n    label,\r\n    name,\r\n    onChange,\r\n    options,\r\n}) => {\r\n    const renderField = useCallback(\r\n        (renderProps: FieldArrayRenderProps) => (\r\n            <MultiCheckboxFormField\r\n                id={id}\r\n                label={label}\r\n                name={name}\r\n                onChange={onChange}\r\n                options={options}\r\n                {...pick(renderProps, ['form', 'pop', 'push', 'remove'])}\r\n            />\r\n        ),\r\n        [id, label, name, onChange, options],\r\n    );\r\n\r\n    return <FieldArray name={name} render={renderField} />;\r\n};\r\n\r\nexport default memo(CheckboxGroupFormField);\r\n","import { FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\r\nimport classNames from 'classnames';\r\nimport { FieldProps } from 'formik';\r\nimport { includes } from 'lodash';\r\nimport React, { FunctionComponent, memo, ReactNode, useCallback, useMemo } from 'react';\r\n\r\nimport { TranslatedString } from '../../locale';\r\n\r\nimport CheckboxGroupFormField from './CheckboxGroupFormField';\r\nimport DynamicFormFieldType from './DynamicFormFieldType';\r\nimport DynamicInput from './DynamicInput';\r\nimport FormField from './FormField';\r\nimport Label from './Label';\r\n\r\nexport interface DynamicFormFieldOption {\r\n    code: string;\r\n    name: string;\r\n}\r\n\r\nexport interface DynamicFormFieldProps {\r\n    field: FormFieldType;\r\n    inputId?: string;\r\n    extraClass?: string;\r\n    autocomplete?: string;\r\n    parentFieldName?: string;\r\n    placeholder?: string;\r\n    label?: ReactNode;\r\n    useFloatingLabel?: boolean;\r\n    onChange?(value: string | string[]): void;\r\n    disabledFields?: boolean;\r\n}\r\n\r\nexport interface FieldPropsExtended {\r\n    onChange?(value: string): void;\r\n    disabledFields?: boolean;\r\n}\r\n\r\nconst DynamicFormField: FunctionComponent<DynamicFormFieldProps> = ({\r\n    field: {\r\n        fieldType,\r\n        type,\r\n        secret,\r\n        name,\r\n        label: fieldLabel,\r\n        required,\r\n        options,\r\n        max,\r\n        min,\r\n        maxLength\r\n    },\r\n    parentFieldName,\r\n    onChange,\r\n    placeholder,\r\n    inputId,\r\n    autocomplete,\r\n    label,\r\n    extraClass,\r\n    useFloatingLabel,\r\n    disabledFields\r\n}) => {\r\n    const fieldInputId = inputId || name;\r\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\r\n    const isFloatingLabelSupportedFieldType = Boolean(\r\n        useFloatingLabel &&\r\n            (includes(['text', 'password', 'dropdown', 'date', 'multiline'], fieldType) ||\r\n                !fieldType),\r\n    );\r\n    const labelComponent = useMemo(\r\n        () => (\r\n            <Label\r\n                htmlFor={fieldInputId}\r\n                id={`${fieldInputId}-label`}\r\n                useFloatingLabel={isFloatingLabelSupportedFieldType}\r\n            >\r\n                {label || fieldLabel}\r\n                {!required && (\r\n                    <>\r\n                        {' '}\r\n                        <small className=\"optimizedCheckout-contentSecondary\">\r\n                            <TranslatedString id=\"common.optional_text\" />\r\n                        </small>\r\n                    </>\r\n                )}\r\n            </Label>\r\n        ),\r\n        [fieldInputId, fieldLabel, required, isFloatingLabelSupportedFieldType, label],\r\n    );\r\n\r\n    const dynamicFormFieldType = useMemo((): DynamicFormFieldType => {\r\n        if (fieldType === 'text') {\r\n            if (type === 'integer') {\r\n                return DynamicFormFieldType.number;\r\n            }\r\n\r\n            if (includes(name, 'phone') || includes(name, 'tel')) {\r\n                return DynamicFormFieldType.telephone;\r\n            }\r\n\r\n            return secret ? DynamicFormFieldType.password : DynamicFormFieldType.text;\r\n        }\r\n\r\n        return fieldType as DynamicFormFieldType;\r\n    }, [fieldType, type, secret, name]);\r\n\r\n    const renderInput = useCallback(\r\n        ({ disabledFields, field }: FieldProps<string> & FieldPropsExtended) => (\r\n            <DynamicInput\r\n                {...field}\r\n                aria-labelledby={`${fieldInputId}-label ${fieldInputId}-field-error-message`}\r\n                autoComplete={autocomplete}\r\n                disabled={disabledFields}\r\n                fieldType={dynamicFormFieldType}\r\n                id={fieldInputId}\r\n                max={max}\r\n                maxLength={maxLength || undefined}\r\n                min={min}\r\n                options={options && options.items}\r\n                placeholder={placeholder || (options && options.helperLabel)}\r\n                rows={options && (options as any).rows}\r\n                useFloatingLabel={isFloatingLabelSupportedFieldType}\r\n            />\r\n        ),\r\n        [\r\n            fieldInputId,\r\n            max,\r\n            maxLength,\r\n            min,\r\n            options,\r\n            placeholder,\r\n            dynamicFormFieldType,\r\n            autocomplete,\r\n        ],\r\n    );\r\n\r\n    return (\r\n        <div\r\n            className={classNames(\r\n                'dynamic-form-field',\r\n                { 'floating-form-field': isFloatingLabelSupportedFieldType },\r\n                extraClass,\r\n            )}\r\n        >\r\n            {fieldType === DynamicFormFieldType.checkbox ? (\r\n                <CheckboxGroupFormField\r\n                    id={fieldInputId}\r\n                    label={labelComponent}\r\n                    name={fieldName}\r\n                    onChange={onChange}\r\n                    options={(options && options.items) || []}\r\n                />\r\n            ) : (\r\n                <FormField\r\n                    disabledFields={disabledFields}\r\n                    id={fieldInputId}\r\n                    input={renderInput}\r\n                    label={labelComponent}\r\n                    name={fieldName}\r\n                    onChange={onChange}\r\n                    useFloatingLabel={isFloatingLabelSupportedFieldType}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default memo(DynamicFormField);\r\n","import classNames from 'classnames';\r\nimport React, { forwardRef, Ref, TextareaHTMLAttributes } from 'react';\r\n\r\nexport interface TextAreaProps extends TextareaHTMLAttributes<HTMLTextAreaElement> {\r\n    additionalClassName?: string;\r\n    testId?: string;\r\n    useFloatingLabel?: boolean;\r\n}\r\n\r\nconst TextArea = forwardRef(\r\n    (\r\n        { additionalClassName, testId, className, useFloatingLabel, ...rest }: TextAreaProps,\r\n        ref: Ref<HTMLTextAreaElement>,\r\n    ) => {\r\n        return (\r\n            <textarea\r\n                {...rest}\r\n                className={\r\n                    className ||\r\n                    classNames(\r\n                        { 'floating-textarea': useFloatingLabel },\r\n                        'form-input',\r\n                        'optimizedCheckout-form-input',\r\n                        additionalClassName,\r\n                    )\r\n                }\r\n                data-test={testId}\r\n                ref={ref}\r\n            />\r\n        );\r\n    },\r\n);\r\n\r\nexport default TextArea;\r\n","import React, { FunctionComponent } from 'react';\r\n\r\nimport withIconContainer from './withIconContainer';\r\n\r\nconst IconChevronDown: FunctionComponent = () => (\r\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path d=\"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\" />\r\n    </svg>\r\n);\r\n\r\nexport default withIconContainer(IconChevronDown);\r\n"],"names":["getAppliedStyles","element","properties","declaration","window","getComputedStyle","reduce","result","propertyName","getPropertyValue","kebabCase","isFloatingLabelEnabled","checkoutSettings","features","parseAnchor","text","div","document","createElement","innerHTML","anchor","querySelector","anchorSiblings","split","outerHTML","EMAIL_REGEXP","getEmailValidationSchema","language","email","max","matches","translate","required","getTranslateCreateCustomerError","type","label","min","memoize","formFields","passwordRequirements","description","numeric","alpha","minLength","firstName","lastName","password","concat","getCustomFormFieldsValidationSchema","withLanguage","withFormik","handleSubmit","values","onSubmit","noop","mapPropsToValues","customFields","acceptsMarketingEmails","validationSchema","find","requirements","Error","getCreateCustomerValidationSchema","getPasswordRequirements","createAccountError","isCreatingAccount","onCancel","useFloatingLabel","createAccountErrorMessage","useMemo","isRequestError","status","splitMessage","message","length","TranslatedString","data","trim","id","Form","className","testId","Fieldset","Alert","map","field","DynamicFormField","autocomplete","name","extraClass","key","parentFieldName","custom","undefined","Button","disabled","variant","href","onClick","preventDefault","memo","onChange","renderInput","useCallback","props","TextInput","autoComplete","labelContent","FormField","input","onSendLoginEmail","isOpen","isSendingEmail","emailHasBeenRequested","onRequestClose","sentEmailError","sentEmail","submitForm","formEmail","modalHeaderStringId","okButton","footer","LoadingSpinner","isLoading","sent_email","TranslatedLink","error","form","expiry","TranslatedHtml","minutes","Math","round","Modal","additionalBodyClassName","additionalModalClassName","header","ModalHeader","shouldShowCloseButton","PrivacyPolicyCheckboxFieldLink","url","CheckboxFormField","additionalClassName","requiresMarketingConsent","Input","checked","value","Label","htmlFor","defaultShouldSubscribe","shouldSubscribe","privacyPolicy","onContinueAsGuest","privacyPolicyUrl","baseSchema","isRequired","schemaFields","oneOf","getPrivacyPolicyValidationSchema","canSubscribe","checkoutButtons","continueAsGuestButtonLabelId","onChangeEmail","renderField","fieldProps","legend","Legend","hidden","BasicFormField","render","PrivacyPolicyField","withIconContainer","viewBox","xmlns","d","Toggle","openByDefault","toggle","onSignIn","canCancel","forgotPasswordUrl","isSignInEmailEnabled","isSigningIn","onCreateAccount","signInError","shouldShowCreateAccountLink","viewType","CustomerViewType","changeEmailLink","body","mapErrorMessage","rel","target","mapCreateAccountFromFormValues","mapCustomFormFieldsFromFormValues","initialize","deinitialize","step","useState","continueAsAGuestButton","setContinueAsAGuestButton","emailValue","setEmailValue","authentication","setAuthentication","isStripeLoading","setIsStripeLoading","isNewAuth","setIsNewAuth","handleOnClickSubmitButton","setEmailCallback","authenticated","useEffect","isComplete","handleLoading","mounted","methodId","stripeupe","container","onEmailChange","getStyles","getStripeStyles","gatewayId","getStylesFromElement","parentContainer","getElementById","containerId","formInput","formLabel","formError","labelText","color","fieldText","fieldPlaceholderText","fieldErrorText","fieldBackground","fieldInnerShadow","fieldBorder","buttonText","LoadingOverlay","hideContentWhenLoading","placeholder","state","isEmailLoginFormOpen","isReady","hasRequestedLoginEmail","closeEmailLoginFormForm","setState","handleEmailLoginClicked","this","draftEmail","handleSendLoginEmail","sendLoginEmail","handleContinueAsGuest","formValues","continueAsGuest","hasBillingId","onChangeViewType","onContinueAsGuestError","onSubscribeToNewsletter","updateSubscriptionWhenUnchecked","acceptsMarketingNewsletter","acceptsAbandonedCartEmails","customer","getCustomer","shouldEncourageSignIn","isGuest","isStripeLinkAuthenticated","executePaymentMethodCheckoutOrContinue","isErrorWithType","handleSignIn","credentials","signIn","onSignInError","handleCreateAccount","createAccount","onAccountCreated","showCreateAccount","handleCancelCreateAccount","clearError","handleCancelSignIn","handleChangeEmail","analyticsTracker","customerEmailEntry","executePaymentMethodCheckout","providerWithCustomCheckout","PaymentMethodId","continueWithCheckoutCallback","checkoutPaymentMethodExecuted","payload","componentDidMount","initializeCustomer","loadPaymentMethods","onReady","onUnhandledError","componentWillUnmount","deinitializeCustomer","shouldRenderGuestForm","shouldRenderCreateAccountForm","shouldRenderLoginForm","CustomerSkeleton","renderEmailLoginLinkForm","renderLoginForm","renderGuestForm","renderCreateAccountForm","checkEmbeddedSupport","checkoutButtonIds","isContinuingAsGuest","isExecutingPaymentMethodCheckout","isInitializing","isSubscribed","isStripeLinkEnabled","CheckoutButtonList","methodIds","onError","isSendingSignInEmail","signInEmailError","signInEmail","customerAccountFields","isEmbedded","isGuestEnabled","isAccountCreationEnabled","customerPaymentMethodExecuted","Component","mapToWithCheckoutCustomerProps","checkoutService","checkoutState","getBillingAddress","getCustomerAccountFields","getCheckout","getSignInEmail","getConfig","getPaymentMethod","getCart","getSignInError","getSignInEmailError","getCreateCustomerAccountError","isInitializingCustomer","isCreatingCustomerAccount","cart","billingAddress","checkout","config","stripeUpeLinkEnabled","stripeUpe","linkEnabled","initializationData","enableLink","stripeUpeSupportedCurrency","currency","code","shopperConfig","showNewsletterSignup","remoteCheckoutProviders","createCustomerAccount","sendSignInEmail","defaultNewsletterSignup","links","forgotPasswordLink","guestCheckoutEnabled","signInCustomer","withAnalytics","withCheckout","Customer","customFieldsObject","forIn","fieldValue","isDate","padMonth","padStart","getMonth","toString","padDay","getDate","getFullYear","push","fieldId","translatedString","parsedString","errorId","forwardRef","ref","rest","createInjectHoc","LocaleContext","displayNamePrefix","pickProps","date","fieldType","options","inputFormat","handleDateChange","dateValue","event","DynamicFormFieldType","IconChevronDown","optionValue","CheckboxInput","Array","isArray","includes","calendarClassName","dateFormat","maxDate","Date","minDate","placeholderText","toUpperCase","popperClassName","selected","TextArea","onSelectedAll","onSelectedNone","handleSelectAllClick","handleSelectNoneClick","MultiCheckboxFormField","errors","remove","handleSelectAll","checkedValues","getIn","difference","forEach","val","handleSelectNone","handleInputChange","indexOf","FormFieldContainer","hasError","FormFieldError","renderProps","pick","FieldArray","secret","fieldLabel","maxLength","inputId","disabledFields","fieldInputId","fieldName","isFloatingLabelSupportedFieldType","Boolean","labelComponent","dynamicFormFieldType","items","helperLabel","rows","height","width"],"sourceRoot":""}