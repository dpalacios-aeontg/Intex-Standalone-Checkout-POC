{"version":3,"file":"billing-ee0e69ec.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/billing/BillingForm.tsx","webpack://checkout/./packages/core/src/app/billing/getBillingMethodId.ts","webpack://checkout/./packages/core/src/app/billing/Billing.tsx"],"sourcesContent":["import {\r\n    Address,\r\n    CheckoutSelectors,\r\n    Country,\r\n    Customer,\r\n    FormField,\r\n} from '@bigcommerce/checkout-sdk';\r\nimport { FormikProps, withFormik } from 'formik';\r\nimport React, { createRef, PureComponent, ReactNode, RefObject } from 'react';\r\nimport { lazy } from 'yup';\r\n\r\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\r\n\r\nimport {\r\n    AddressForm,\r\n    AddressFormValues,\r\n    AddressSelect,\r\n    getAddressFormFieldsValidationSchema,\r\n    getTranslateAddressError,\r\n    isValidCustomerAddress,\r\n    mapAddressToFormValues,\r\n} from '../address';\r\nimport { getCustomFormFieldsValidationSchema } from '../formFields';\r\nimport { TranslatedString, withLanguage, WithLanguageProps } from '../locale';\r\nimport { OrderComments } from '../orderComments';\r\nimport { Button, ButtonVariant } from '../ui/button';\r\nimport { Fieldset, Form } from '../ui/form';\r\nimport { LoadingOverlay } from '../ui/loading';\r\n\r\nimport StaticBillingAddress from './StaticBillingAddress';\r\n\r\nexport type BillingFormValues = AddressFormValues & { orderComment: string };\r\n\r\nexport interface BillingFormProps {\r\n    billingAddress?: Address;\r\n    countries: Country[];\r\n    countriesWithAutocomplete: string[];\r\n    customer: Customer;\r\n    customerMessage: string;\r\n    googleMapsApiKey: string;\r\n    isUpdating: boolean;\r\n    methodId?: string;\r\n    shouldShowOrderComments: boolean;\r\n    useFloatingLabel?: boolean;\r\n    getFields(countryCode?: string): FormField[];\r\n    onSubmit(values: BillingFormValues): void;\r\n    onUnhandledError(error: Error): void;\r\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\r\n}\r\n\r\ninterface BillingFormState {\r\n    isResettingAddress: boolean;\r\n}\r\n\r\nclass BillingForm extends PureComponent<\r\n    BillingFormProps & WithLanguageProps & FormikProps<BillingFormValues>,\r\n    BillingFormState\r\n> {\r\n    state: BillingFormState = {\r\n        isResettingAddress: false,\r\n    };\r\n\r\n    private addressFormRef: RefObject<HTMLFieldSetElement> = createRef();\r\n\r\n    render(): ReactNode {\r\n        const {\r\n            googleMapsApiKey,\r\n            billingAddress,\r\n            countriesWithAutocomplete,\r\n            customer: { addresses, isGuest },\r\n            getFields,\r\n            countries,\r\n            isUpdating,\r\n            setFieldValue,\r\n            shouldShowOrderComments,\r\n            values,\r\n            methodId,\r\n            useFloatingLabel,\r\n        } = this.props;\r\n\r\n        const shouldRenderStaticAddress = methodId === 'amazonpay';\r\n        const allFormFields = getFields(values.countryCode);\r\n        const customFormFields = allFormFields.filter(({ custom }) => custom);\r\n        const hasCustomFormFields = customFormFields.length > 0;\r\n        const editableFormFields =\r\n            shouldRenderStaticAddress && hasCustomFormFields ? customFormFields : allFormFields;\r\n        const { isResettingAddress } = this.state;\r\n        const hasAddresses = addresses && addresses.length > 0;\r\n        const hasValidCustomerAddress =\r\n            billingAddress &&\r\n            isValidCustomerAddress(\r\n                billingAddress,\r\n                addresses,\r\n                getFields(billingAddress.countryCode),\r\n            );\r\n\r\n        return (\r\n            <Form autoComplete=\"on\">\r\n                {shouldRenderStaticAddress && billingAddress && (\r\n                    <div className=\"form-fieldset\">\r\n                        <StaticBillingAddress address={billingAddress} />\r\n                    </div>\r\n                )}\r\n\r\n                <Fieldset id=\"checkoutBillingAddress\" ref={this.addressFormRef}>\r\n                    {hasAddresses && !shouldRenderStaticAddress && (\r\n                        <Fieldset id=\"billingAddresses\">\r\n                            <LoadingOverlay isLoading={isResettingAddress}>\r\n                                <AddressSelect\r\n                                    addresses={addresses}\r\n                                    onSelectAddress={this.handleSelectAddress}\r\n                                    onUseNewAddress={this.handleUseNewAddress}\r\n                                    selectedAddress={\r\n                                        hasValidCustomerAddress ? billingAddress : undefined\r\n                                    }\r\n                                />\r\n                            </LoadingOverlay>\r\n                        </Fieldset>\r\n                    )}\r\n\r\n                    {!hasValidCustomerAddress && (\r\n                        <AddressFormSkeleton isLoading={isResettingAddress}>\r\n                            <AddressForm\r\n                                countries={countries}\r\n                                countriesWithAutocomplete={countriesWithAutocomplete}\r\n                                countryCode={values.countryCode}\r\n                                formFields={editableFormFields}\r\n                                googleMapsApiKey={googleMapsApiKey}\r\n                                setFieldValue={setFieldValue}\r\n                                shouldShowSaveAddress={!isGuest}\r\n                                useFloatingLabel={useFloatingLabel}\r\n                            />\r\n                        </AddressFormSkeleton>\r\n                    )}\r\n                </Fieldset>\r\n\r\n                {shouldShowOrderComments && <OrderComments />}\r\n\r\n                <div className=\"form-actions\">\r\n                    <Button\r\n                        disabled={isUpdating || isResettingAddress}\r\n                        id=\"checkout-billing-continue\"\r\n                        isLoading={isUpdating || isResettingAddress}\r\n                        type=\"submit\"\r\n                        variant={ButtonVariant.Primary}\r\n                    >\r\n                        <TranslatedString id=\"common.continue_action\" />\r\n                    </Button>\r\n                </div>\r\n            </Form>\r\n        );\r\n    }\r\n\r\n    private handleSelectAddress: (address: Partial<Address>) => void = async (address) => {\r\n        const { updateAddress, onUnhandledError } = this.props;\r\n\r\n        this.setState({ isResettingAddress: true });\r\n\r\n        try {\r\n            await updateAddress(address);\r\n        } catch (error) {\r\n            if (error instanceof Error) {\r\n                onUnhandledError(error);\r\n            }\r\n        } finally {\r\n            this.setState({ isResettingAddress: false });\r\n        }\r\n    };\r\n\r\n    private handleUseNewAddress: () => void = () => {\r\n        this.handleSelectAddress({});\r\n    };\r\n}\r\n\r\nexport default withLanguage(\r\n    withFormik<BillingFormProps & WithLanguageProps, BillingFormValues>({\r\n        handleSubmit: (values, { props: { onSubmit } }) => {\r\n            onSubmit(values);\r\n        },\r\n        mapPropsToValues: ({ getFields, customerMessage, billingAddress }) => ({\r\n            ...mapAddressToFormValues(\r\n                getFields(billingAddress && billingAddress.countryCode),\r\n                billingAddress,\r\n            ),\r\n            orderComment: customerMessage,\r\n        }),\r\n        isInitialValid: ({ billingAddress, getFields, language }) =>\r\n            !!billingAddress &&\r\n            getAddressFormFieldsValidationSchema({\r\n                language,\r\n                formFields: getFields(billingAddress.countryCode),\r\n            }).isValidSync(billingAddress),\r\n        validationSchema: ({\r\n            language,\r\n            getFields,\r\n            methodId,\r\n        }: BillingFormProps & WithLanguageProps) =>\r\n            methodId === 'amazonpay'\r\n                ? lazy<Partial<AddressFormValues>>((values) =>\r\n                      getCustomFormFieldsValidationSchema({\r\n                          translate: getTranslateAddressError(language),\r\n                          formFields: getFields(values && values.countryCode),\r\n                      }),\r\n                  )\r\n                : lazy<Partial<AddressFormValues>>((values) =>\r\n                      getAddressFormFieldsValidationSchema({\r\n                          language,\r\n                          formFields: getFields(values && values.countryCode),\r\n                      }),\r\n                  ),\r\n        enableReinitialize: true,\r\n    })(BillingForm),\r\n);\r\n","import { Checkout } from '@bigcommerce/checkout-sdk';\r\n\r\nimport { getPreselectedPayment } from '../payment';\r\n\r\nexport default function getBillingMethodId(checkout: Checkout): string | undefined {\r\n    const BILLING_METHOD_IDS = ['amazonpay'];\r\n    const preselectedPayment = getPreselectedPayment(checkout);\r\n\r\n    return preselectedPayment && BILLING_METHOD_IDS.indexOf(preselectedPayment.providerId) > -1\r\n        ? preselectedPayment.providerId\r\n        : undefined;\r\n}\r\n","import {\r\n    Address,\r\n    CheckoutRequestBody,\r\n    CheckoutSelectors,\r\n    Country,\r\n    Customer,\r\n    FormField,\r\n} from '@bigcommerce/checkout-sdk';\r\nimport { noop } from 'lodash';\r\nimport React, { Component, ReactNode } from 'react';\r\n\r\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\r\n\r\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\r\nimport { CheckoutContextProps, withCheckout } from '../checkout';\r\nimport { EMPTY_ARRAY, isFloatingLabelEnabled } from '../common/utility';\r\nimport { TranslatedString } from '../locale';\r\nimport { getShippableItemsCount } from '../shipping';\r\nimport { Legend } from '../ui/form';\r\n\r\nimport BillingForm, { BillingFormValues } from './BillingForm';\r\nimport getBillingMethodId from './getBillingMethodId';\r\n\r\nexport interface BillingProps {\r\n    navigateNextStep(): void;\r\n    onReady?(): void;\r\n    onUnhandledError(error: Error): void;\r\n}\r\n\r\nexport interface WithCheckoutBillingProps {\r\n    countries: Country[];\r\n    countriesWithAutocomplete: string[];\r\n    customer: Customer;\r\n    customerMessage: string;\r\n    googleMapsApiKey: string;\r\n    isInitializing: boolean;\r\n    isUpdating: boolean;\r\n    shouldShowOrderComments: boolean;\r\n    billingAddress?: Address;\r\n    methodId?: string;\r\n    useFloatingLabel?: boolean;\r\n    getFields(countryCode?: string): FormField[];\r\n    initialize(): Promise<CheckoutSelectors>;\r\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\r\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\r\n}\r\n\r\nclass Billing extends Component<BillingProps & WithCheckoutBillingProps> {\r\n    async componentDidMount(): Promise<void> {\r\n        const { initialize, onReady = noop, onUnhandledError } = this.props;\r\n\r\n        try {\r\n            await initialize();\r\n            onReady();\r\n        } catch (error) {\r\n            if (error instanceof Error) {\r\n                onUnhandledError(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    render(): ReactNode {\r\n        const { updateAddress, isInitializing, ...props } = this.props;\r\n\r\n        return (\r\n            <AddressFormSkeleton isLoading={isInitializing}>\r\n                <div className=\"checkout-form\">\r\n                    <div className=\"form-legend-container\">\r\n                        <Legend testId=\"billing-address-heading\">\r\n                            <TranslatedString id=\"billing.billing_address_heading\" />\r\n                        </Legend>\r\n                    </div>\r\n                    <BillingForm\r\n                        {...props}\r\n                        onSubmit={this.handleSubmit}\r\n                        updateAddress={updateAddress}\r\n                    />\r\n                </div>\r\n            </AddressFormSkeleton>\r\n        );\r\n    }\r\n\r\n    private handleSubmit: (values: BillingFormValues) => void = async ({\r\n        orderComment,\r\n        ...addressValues\r\n    }) => {\r\n        const {\r\n            updateAddress,\r\n            updateCheckout,\r\n            customerMessage,\r\n            billingAddress,\r\n            navigateNextStep,\r\n            onUnhandledError,\r\n        } = this.props;\r\n\r\n        const promises: Array<Promise<CheckoutSelectors>> = [];\r\n        const address = mapAddressFromFormValues(addressValues);\r\n\r\n        if (address && !isEqualAddress(address, billingAddress)) {\r\n            promises.push(updateAddress(address));\r\n        }\r\n\r\n        if (customerMessage !== orderComment) {\r\n            promises.push(updateCheckout({ customerMessage: orderComment }));\r\n        }\r\n\r\n        try {\r\n            await Promise.all(promises);\r\n\r\n            navigateNextStep();\r\n        } catch (error) {\r\n            if (error instanceof Error) {\r\n                onUnhandledError(error);\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nfunction mapToBillingProps({\r\n    checkoutService,\r\n    checkoutState,\r\n}: CheckoutContextProps): WithCheckoutBillingProps | null {\r\n    const {\r\n        data: {\r\n            getCheckout,\r\n            getConfig,\r\n            getCart,\r\n            getCustomer,\r\n            getBillingAddress,\r\n            getBillingAddressFields,\r\n            getBillingCountries,\r\n        },\r\n        statuses: { isLoadingBillingCountries, isUpdatingBillingAddress, isUpdatingCheckout },\r\n    } = checkoutState;\r\n\r\n    const config = getConfig();\r\n    const customer = getCustomer();\r\n    const checkout = getCheckout();\r\n    const cart = getCart();\r\n\r\n    if (!config || !customer || !checkout || !cart) {\r\n        return null;\r\n    }\r\n\r\n    const { enableOrderComments, googleMapsApiKey, features } = config.checkoutSettings;\r\n\r\n    const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ'];\r\n\r\n    if (features['CHECKOUT-4183.checkout_google_address_autocomplete_uk']) {\r\n        countriesWithAutocomplete.push('GB');\r\n    }\r\n\r\n    return {\r\n        billingAddress: getBillingAddress(),\r\n        countries: getBillingCountries() || EMPTY_ARRAY,\r\n        countriesWithAutocomplete,\r\n        customer,\r\n        customerMessage: checkout.customerMessage,\r\n        getFields: getBillingAddressFields,\r\n        googleMapsApiKey,\r\n        initialize: checkoutService.loadBillingAddressFields,\r\n        isInitializing: isLoadingBillingCountries(),\r\n        isUpdating: isUpdatingBillingAddress() || isUpdatingCheckout(),\r\n        methodId: getBillingMethodId(checkout),\r\n        shouldShowOrderComments: enableOrderComments && getShippableItemsCount(cart) < 1,\r\n        updateAddress: checkoutService.updateBillingAddress,\r\n        updateCheckout: checkoutService.updateCheckout,\r\n        useFloatingLabel: isFloatingLabelEnabled(config.checkoutSettings),\r\n    };\r\n}\r\n\r\nexport default withCheckout(mapToBillingProps)(Billing);\r\n"],"names":["state","isResettingAddress","addressFormRef","createRef","handleSelectAddress","address","this","props","updateAddress","onUnhandledError","setState","Error","handleUseNewAddress","render","googleMapsApiKey","billingAddress","countriesWithAutocomplete","customer","addresses","isGuest","getFields","countries","isUpdating","setFieldValue","shouldShowOrderComments","values","methodId","useFloatingLabel","shouldRenderStaticAddress","allFormFields","countryCode","customFormFields","filter","hasCustomFormFields","length","editableFormFields","hasAddresses","hasValidCustomerAddress","isValidCustomerAddress","Form","autoComplete","className","StaticBillingAddress","Fieldset","id","ref","LoadingOverlay","isLoading","AddressSelect","onSelectAddress","onUseNewAddress","selectedAddress","undefined","AddressFormSkeleton","AddressForm","formFields","shouldShowSaveAddress","OrderComments","Button","disabled","type","variant","TranslatedString","PureComponent","withLanguage","withFormik","handleSubmit","onSubmit","mapPropsToValues","customerMessage","mapAddressToFormValues","orderComment","isInitialValid","language","getAddressFormFieldsValidationSchema","isValidSync","validationSchema","getCustomFormFieldsValidationSchema","translate","enableReinitialize","BillingForm","getBillingMethodId","checkout","preselectedPayment","getPreselectedPayment","indexOf","providerId","addressValues","updateCheckout","navigateNextStep","promises","mapAddressFromFormValues","isEqualAddress","push","Promise","all","componentDidMount","initialize","onReady","noop","isInitializing","Legend","testId","Component","withCheckout","checkoutService","checkoutState","getCheckout","getConfig","getCart","getCustomer","getBillingAddress","getBillingAddressFields","getBillingCountries","isLoadingBillingCountries","isUpdatingBillingAddress","isUpdatingCheckout","config","cart","checkoutSettings","enableOrderComments","loadBillingAddressFields","getShippableItemsCount","updateBillingAddress","isFloatingLabelEnabled","Billing"],"sourceRoot":""}