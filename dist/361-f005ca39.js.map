{"version":3,"file":"361-f005ca39.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/address/getAddressFormFieldInputId.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/AddressSelector.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/AddressSelectorUk.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/AddressSelectorFactory.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/mapToAddress.ts","webpack://checkout/./packages/core/src/app/ui/popover/Popover.tsx","webpack://checkout/./packages/core/src/app/ui/popover/PopoverList.tsx","webpack://checkout/./packages/core/src/app/ui/autocomplete/Autocomplete.tsx","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/GoogleAutocompleteScriptLoader.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/getGoogleAutocompleteScriptLoader.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/GoogleAutocompleteService.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/GoogleAutocomplete.tsx","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/GoogleAutocompleteFormField.tsx","webpack://checkout/./packages/core/src/app/address/AddressForm.tsx","webpack://checkout/./packages/core/src/app/address/AddressSelectButton.tsx","webpack://checkout/./packages/core/src/app/address/AddressSelect.tsx","webpack://checkout/./packages/core/src/app/address/isEqualAddress.ts","webpack://checkout/./packages/core/src/app/address/isValidCustomerAddress.ts","webpack://checkout/./packages/core/src/app/address/mapAddressFromFormValues.ts","webpack://checkout/./packages/core/src/app/common/utility/isFloatingLabelEnabled.ts","webpack://checkout/./packages/core/src/app/formFields/mapCustomFormFieldsFromFormValues.ts","webpack://checkout/./packages/core/src/app/orderComments/OrderComments.tsx","webpack://checkout/./packages/core/src/app/payment/getPreselectedPayment.ts","webpack://checkout/./packages/core/src/app/shipping/getShippableItemsCount.ts","webpack://checkout/./packages/core/src/app/ui/dropdown/DropdownTrigger.tsx","webpack://checkout/./packages/core/src/app/ui/form/CheckboxFormField.tsx","webpack://checkout/./packages/core/src/app/ui/form/CheckboxInput.tsx","webpack://checkout/./packages/core/src/app/locale/withDate.tsx","webpack://checkout/./packages/core/src/app/ui/form/RadioInput.tsx","webpack://checkout/./packages/core/src/app/ui/form/DynamicInput.tsx","webpack://checkout/./packages/core/src/app/ui/form/MultiCheckboxControl.tsx","webpack://checkout/./packages/core/src/app/ui/form/CheckboxGroupFormField.tsx","webpack://checkout/./packages/core/src/app/ui/form/DynamicFormField.tsx","webpack://checkout/./packages/core/src/app/ui/form/TextArea.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconChevronDown.tsx"],"sourcesContent":["import { AddressKeyMap } from './address';\r\n\r\nexport const ADDRESS_FIELD_IDS: AddressKeyMap = {\r\n    address1: 'addressLine1',\r\n    address2: 'addressLine2',\r\n    postalCode: 'postCode',\r\n    stateOrProvince: 'province',\r\n    stateOrProvinceCode: 'provinceCode',\r\n};\r\n\r\nexport function getAddressFormFieldLegacyName(name: string): string {\r\n    return `${ADDRESS_FIELD_IDS[name] || name}`;\r\n}\r\n\r\nexport function getAddressFormFieldInputId(name: string): string {\r\n    return `${getAddressFormFieldLegacyName(name)}Input`;\r\n}\r\n\r\nexport function getAddressFormFieldLabelId(name: string): string {\r\n    return `${getAddressFormFieldLegacyName(name)}Label`;\r\n}\r\n","import { GoogleAddressFieldType } from './googleAutocompleteTypes';\r\n\r\nexport default class AddressSelector {\r\n    protected _address: google.maps.GeocoderAddressComponent[] | undefined;\r\n    protected _name: string;\r\n\r\n    constructor(googlePlace: google.maps.places.PlaceResult) {\r\n        const { address_components, name } = googlePlace;\r\n\r\n        this._name = name;\r\n        this._address = address_components;\r\n    }\r\n\r\n    getState(): string {\r\n        return this._get('administrative_area_level_1', 'short_name');\r\n    }\r\n\r\n    getStreet(): string {\r\n        return this._name;\r\n    }\r\n\r\n    getStreet2(): string {\r\n        if (this.getCountry() === 'NZ') {\r\n            return this._get('sublocality', 'short_name');\r\n        }\r\n\r\n        return this._get('subpremise', 'short_name');\r\n    }\r\n\r\n    getCity(): string {\r\n        return (\r\n            this._get('postal_town', 'long_name') ||\r\n            this._get('locality', 'long_name') ||\r\n            this._get('neighborhood', 'short_name')\r\n        );\r\n    }\r\n\r\n    getCountry(): string {\r\n        return this._get('country', 'short_name');\r\n    }\r\n\r\n    getPostCode(): string {\r\n        return this._get('postal_code', 'short_name');\r\n    }\r\n\r\n    protected _get(\r\n        type: GoogleAddressFieldType,\r\n        access: Exclude<keyof google.maps.GeocoderAddressComponent, 'types'>,\r\n    ): string {\r\n        const element =\r\n            this._address && this._address.find((field) => field.types.indexOf(type) !== -1);\r\n\r\n        if (element) {\r\n            return element[access];\r\n        }\r\n\r\n        return '';\r\n    }\r\n}\r\n","import AddressSelector from './AddressSelector';\r\n\r\nexport default class AddressSelectorUK extends AddressSelector {\r\n    getState(): string {\r\n        return '';\r\n    }\r\n\r\n    getStreet2(): string {\r\n        return this._get('locality', 'long_name');\r\n    }\r\n\r\n    getPostCode(): string {\r\n        return '';\r\n    }\r\n}\r\n","import AddressSelector from './AddressSelector';\r\nimport AddressSelectorUK from './AddressSelectorUk';\r\n\r\nexport default class AddressSelectorFactory {\r\n    static create(autocompleteData: google.maps.places.PlaceResult): AddressSelector {\r\n        const addressSelector = new AddressSelector(autocompleteData);\r\n\r\n        switch (addressSelector.getCountry()) {\r\n            case 'GB':\r\n                return new AddressSelectorUK(autocompleteData);\r\n        }\r\n\r\n        return addressSelector;\r\n    }\r\n}\r\n","import { Address, Country, Region } from '@bigcommerce/checkout-sdk';\r\n\r\nimport AddressSelectorFactory from './AddressSelectorFactory';\r\n\r\nexport default function mapToAddress(\r\n    autocompleteData: google.maps.places.PlaceResult,\r\n    countries: Country[] = [],\r\n): Partial<Address> {\r\n    if (!autocompleteData || !autocompleteData.address_components) {\r\n        return {};\r\n    }\r\n\r\n    const accessor = AddressSelectorFactory.create(autocompleteData);\r\n    const state = accessor.getState();\r\n    const countryCode = accessor.getCountry();\r\n    const country = countries && countries.find((c) => countryCode === c.code);\r\n    const street2 = accessor.getStreet2();\r\n\r\n    return {\r\n        address2: street2,\r\n        city: accessor.getCity(),\r\n        countryCode,\r\n        postalCode: accessor.getPostCode(),\r\n        ...(state ? getState(state, country && country.subdivisions) : {}),\r\n    };\r\n}\r\n\r\nfunction getState(stateName: string, states: Region[] = []): Partial<Address> {\r\n    const state = states.find(({ code, name }: Region) => code === stateName || name === stateName);\r\n\r\n    if (!state) {\r\n        return {\r\n            stateOrProvince: !states.length ? stateName : '',\r\n            stateOrProvinceCode: '',\r\n        };\r\n    }\r\n\r\n    return {\r\n        stateOrProvince: state.name,\r\n        stateOrProvinceCode: state.code,\r\n    };\r\n}\r\n","import React, { FunctionComponent } from 'react';\r\n\r\nimport './Popover.scss';\r\n\r\nexport interface PopoverProps {\r\n    children: React.ReactNode;\r\n}\r\n\r\nconst Popover: FunctionComponent<PopoverProps> = ({ children }) => {\r\n    return <div className=\"popover\">{children}</div>;\r\n};\r\n\r\nexport default Popover;\r\n","import React, { FunctionComponent, memo } from 'react';\r\n\r\nimport './PopoverList.scss';\r\n\r\nexport interface PopoverListProps {\r\n    menuProps?: any;\r\n    highlightedIndex?: number;\r\n    getItemProps?: any;\r\n    items: PopoverListItem[];\r\n    testId?: string;\r\n}\r\n\r\nexport interface PopoverListItem {\r\n    id: string;\r\n    content: React.ReactChild[] | React.ReactChild;\r\n}\r\n\r\nconst PopoverList: FunctionComponent<PopoverListProps> = ({\r\n    highlightedIndex = -1,\r\n    testId,\r\n     \r\n    getItemProps = (props: any) => props,\r\n    menuProps = {},\r\n    items,\r\n}) => {\r\n    if (!items.length) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <ul className=\"popoverList\" data-test={testId} {...menuProps}>\r\n            {items.map((item, index) => (\r\n                <li\r\n                    className={getItemClassName(highlightedIndex, index)}\r\n                    data-test={testId && `${testId}-item`}\r\n                     \r\n                    {...getItemProps({\r\n                        key: item.id,\r\n                        index,\r\n                        item,\r\n                    })}\r\n                    key={index}\r\n                >\r\n                    {item.content}\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    );\r\n};\r\n\r\nfunction getItemClassName(highlightedIndex: number, index: number): string {\r\n    const classes = ['popoverList-item'];\r\n\r\n    if (highlightedIndex === index) {\r\n        classes.push('is-active');\r\n    }\r\n\r\n    return classes.join(' ');\r\n}\r\n\r\nexport default memo(PopoverList);\r\n","import Downshift, { DownshiftState, StateChangeOptions } from 'downshift';\r\nimport { includes, isNumber, noop } from 'lodash';\r\nimport React, { Fragment, PureComponent, ReactChild, ReactNode } from 'react';\r\n\r\nimport { Label } from '../form';\r\nimport { Popover, PopoverList, PopoverListItem } from '../popover';\r\n\r\nimport AutocompleteItem from './autocomplete-item';\r\n\r\nexport interface AutocompleteProps {\r\n    initialValue?: string;\r\n    initialHighlightedIndex?: number;\r\n    children?: ReactNode;\r\n    items: AutocompleteItem[];\r\n    inputProps?: any;\r\n    listTestId?: string;\r\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\r\n    onSelect?(item: AutocompleteItem): void;\r\n    onChange?(value: string, isOpen: boolean): void;\r\n}\r\n\r\nclass Autocomplete extends PureComponent<AutocompleteProps> {\r\n    render(): ReactNode {\r\n        const {\r\n            inputProps,\r\n            initialValue,\r\n            initialHighlightedIndex,\r\n            items,\r\n            children,\r\n            onSelect,\r\n            listTestId,\r\n        } = this.props;\r\n\r\n        return (\r\n            <Downshift\r\n                defaultHighlightedIndex={0}\r\n                initialHighlightedIndex={initialHighlightedIndex}\r\n                initialInputValue={initialValue}\r\n                itemToString={this.itemToString}\r\n                labelId={\r\n                    inputProps && inputProps['aria-labelledby']\r\n                        ? inputProps['aria-labelledby']\r\n                        : null\r\n                }\r\n                onChange={onSelect}\r\n                onStateChange={this.handleStateChange}\r\n                stateReducer={this.stateReducer}\r\n            >\r\n                {({ isOpen, getInputProps, getMenuProps, getItemProps, highlightedIndex }) => {\r\n                    const validInputProps = { ...getInputProps(), ...inputProps };\r\n\r\n                    delete validInputProps.labelText;\r\n\r\n                    return (\r\n                        <div>\r\n                            <input {...validInputProps} />\r\n                            {inputProps && includes(inputProps.className, 'floating') && (\r\n                                <Label\r\n                                    htmlFor={inputProps.id}\r\n                                    id={inputProps['aria-labelledby']}\r\n                                    useFloatingLabel={true}\r\n                                >\r\n                                    {inputProps.labelText}\r\n                                </Label>\r\n                            )}\r\n                            {isOpen && !!items.length && (\r\n                                <Popover>\r\n                                    <PopoverList\r\n                                        getItemProps={getItemProps}\r\n                                        highlightedIndex={\r\n                                            isNumber(highlightedIndex) ? highlightedIndex : -1\r\n                                        }\r\n                                        items={items.map((item) => this.toPopoverItem(item))}\r\n                                        menuProps={getMenuProps()}\r\n                                        testId={listTestId}\r\n                                    />\r\n                                    {children}\r\n                                </Popover>\r\n                            )}\r\n                        </div>\r\n                    );\r\n                }}\r\n            </Downshift>\r\n        );\r\n    }\r\n\r\n    private toPopoverItem(item: AutocompleteItem): PopoverListItem {\r\n        return {\r\n            ...item,\r\n            content: this.highlightItem(item),\r\n        };\r\n    }\r\n\r\n    private highlightItem(item: AutocompleteItem): ReactChild[] | ReactChild {\r\n        if (!item.highlightedSlices || !item.highlightedSlices.length) {\r\n            return item.label;\r\n        }\r\n\r\n        let lastIndex = 0;\r\n        let key = 0;\r\n\r\n        return item.highlightedSlices.reduce((node, slice, i) => {\r\n            const { label } = item;\r\n            const { offset, length } = slice;\r\n            const notHighlightedLength = offset - lastIndex;\r\n\r\n            if (notHighlightedLength) {\r\n                node.push(\r\n                    <Fragment key={key}>{label.substr(lastIndex, notHighlightedLength)}</Fragment>,\r\n                );\r\n                key += 1;\r\n            }\r\n\r\n            lastIndex = offset + length;\r\n\r\n            node.push(<strong key={key}>{label.substr(offset, length)}</strong>);\r\n            key += 1;\r\n\r\n            if (i === (item.highlightedSlices || []).length - 1) {\r\n                node.push(<Fragment key={key}>{label.substr(lastIndex)}</Fragment>);\r\n                key += 1;\r\n            }\r\n\r\n            return node;\r\n        }, [] as ReactChild[]);\r\n    }\r\n\r\n    private itemToString(item?: AutocompleteItem): string {\r\n        return (item && item.value) || '';\r\n    }\r\n\r\n    private stateReducer: (\r\n        state: DownshiftState<AutocompleteItem>,\r\n        changes: StateChangeOptions<AutocompleteItem>,\r\n    ) => Partial<StateChangeOptions<AutocompleteItem>> = (state, changes) => {\r\n        const { onChange } = this.props;\r\n\r\n        switch (changes.type) {\r\n            case Downshift.stateChangeTypes.blurInput:\r\n            case Downshift.stateChangeTypes.blurButton:\r\n            case Downshift.stateChangeTypes.mouseUp:\r\n            case Downshift.stateChangeTypes.touchEnd:\r\n                return {\r\n                    ...changes,\r\n                    inputValue: state.inputValue,\r\n                };\r\n\r\n            case Downshift.stateChangeTypes.changeInput:\r\n                if (changes.inputValue !== state.inputValue && onChange) {\r\n                    onChange(changes.inputValue || '', state.isOpen);\r\n                }\r\n\r\n                return changes;\r\n\r\n            case Downshift.stateChangeTypes.keyDownEnter:\r\n                return changes;\r\n\r\n            default:\r\n                return changes;\r\n        }\r\n    };\r\n\r\n    private handleStateChange = ({ isOpen, inputValue }: StateChangeOptions<string>) => {\r\n        const { onToggleOpen = noop } = this.props;\r\n\r\n        if (isOpen !== undefined) {\r\n            onToggleOpen({ isOpen, inputValue: inputValue || '' });\r\n        }\r\n    };\r\n}\r\n\r\nexport default Autocomplete;\r\n","import { getScriptLoader, ScriptLoader } from '@bigcommerce/script-loader';\r\n\r\nimport { GoogleAutocompleteWindow, GoogleMapsSdk } from './googleAutocompleteTypes';\r\n\r\nexport default class GoogleAutocompleteScriptLoader {\r\n    private _scriptLoader: ScriptLoader;\r\n    private _googleAutoComplete?: Promise<GoogleMapsSdk>;\r\n\r\n    constructor() {\r\n        this._scriptLoader = getScriptLoader();\r\n    }\r\n\r\n    loadMapsSdk(apiKey: string): Promise<GoogleMapsSdk> {\r\n        if (this._googleAutoComplete) {\r\n            return this._googleAutoComplete;\r\n        }\r\n\r\n        this._googleAutoComplete = new Promise((resolve, reject) => {\r\n            const callbackName = 'initAutoComplete';\r\n            const params = [\r\n                'language=en',\r\n                `key=${apiKey}`,\r\n                'libraries=places',\r\n                `callback=${callbackName}`,\r\n            ].join('&');\r\n\r\n            (window as GoogleCallbackWindow)[callbackName] = () => {\r\n                if (isAutocompleteWindow(window)) {\r\n                    resolve(window.google.maps);\r\n                }\r\n\r\n                reject();\r\n            };\r\n\r\n            this._scriptLoader\r\n                .loadScript(`//maps.googleapis.com/maps/api/js?${params}`)\r\n                .catch((e) => {\r\n                    this._googleAutoComplete = undefined;\r\n                    throw e;\r\n                });\r\n        });\r\n\r\n        return this._googleAutoComplete;\r\n    }\r\n}\r\n\r\nfunction isAutocompleteWindow(window: Window): window is GoogleAutocompleteWindow {\r\n    const autocompleteWindow = window as GoogleAutocompleteWindow;\r\n\r\n    return Boolean(\r\n        autocompleteWindow.google &&\r\n            autocompleteWindow.google.maps &&\r\n            autocompleteWindow.google.maps.places,\r\n    );\r\n}\r\n\r\nexport interface GoogleCallbackWindow extends Window {\r\n    initAutoComplete?(): void;\r\n}\r\n","import GoogleAutocompleteScriptLoader from './GoogleAutocompleteScriptLoader';\r\n\r\nlet instance: GoogleAutocompleteScriptLoader;\r\n\r\nexport default function getGoogleAutocompleteScriptLoader(): GoogleAutocompleteScriptLoader {\r\n    if (!instance) {\r\n        instance = new GoogleAutocompleteScriptLoader();\r\n    }\r\n\r\n    return instance;\r\n}\r\n","import getGoogleAutocompleteScriptLoader from './getGoogleAutocompleteScriptLoader';\r\nimport GoogleAutocompleteScriptLoader from './GoogleAutocompleteScriptLoader';\r\n\r\nexport default class GoogleAutocompleteService {\r\n    private _autocompletePromise?: Promise<google.maps.places.AutocompleteService>;\r\n    private _placesPromise?: Promise<google.maps.places.PlacesService>;\r\n\r\n    constructor(\r\n        private _apiKey: string,\r\n        private _scriptLoader: GoogleAutocompleteScriptLoader = getGoogleAutocompleteScriptLoader(),\r\n    ) {}\r\n\r\n    getAutocompleteService(): Promise<google.maps.places.AutocompleteService> {\r\n        if (!this._autocompletePromise) {\r\n            this._autocompletePromise = this._scriptLoader\r\n                .loadMapsSdk(this._apiKey)\r\n                .then((googleMapsSdk) => {\r\n                    if (!googleMapsSdk.places.AutocompleteService) {\r\n                        throw new Error('`AutocompleteService` is undefined');\r\n                    }\r\n\r\n                    return new googleMapsSdk.places.AutocompleteService();\r\n                });\r\n        }\r\n\r\n        return this._autocompletePromise;\r\n    }\r\n\r\n    getPlacesServices(): Promise<google.maps.places.PlacesService> {\r\n        const node = document.createElement('div');\r\n\r\n        if (!this._placesPromise) {\r\n            this._placesPromise = this._scriptLoader\r\n                .loadMapsSdk(this._apiKey)\r\n                .then((googleMapsSdk) => {\r\n                    if (!googleMapsSdk.places.PlacesService) {\r\n                        throw new Error('`PlacesService` is undefined');\r\n                    }\r\n\r\n                    return new googleMapsSdk.places.PlacesService(node);\r\n                });\r\n        }\r\n\r\n        return this._placesPromise;\r\n    }\r\n}\r\n","import { noop } from 'lodash';\r\nimport React, { PureComponent, ReactNode } from 'react';\r\n\r\nimport { Autocomplete, AutocompleteItem } from '../../ui/autocomplete';\r\n\r\nimport { GoogleAutocompleteOptionTypes } from './googleAutocompleteTypes';\r\nimport './GoogleAutocomplete.scss';\r\nimport GoogleAutocompleteService from './GoogleAutocompleteService';\r\n\r\ninterface GoogleAutocompleteProps {\r\n    initialValue?: string;\r\n    componentRestrictions?: google.maps.places.ComponentRestrictions;\r\n    fields?: string[];\r\n    apiKey: string;\r\n    nextElement?: HTMLElement;\r\n    inputProps?: any;\r\n    isAutocompleteEnabled?: boolean;\r\n    types?: GoogleAutocompleteOptionTypes[];\r\n    onSelect?(place: google.maps.places.PlaceResult, item: AutocompleteItem): void;\r\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\r\n    onChange?(value: string, isOpen: boolean): void;\r\n}\r\n\r\ninterface GoogleAutocompleteState {\r\n    items: AutocompleteItem[];\r\n    autoComplete: string;\r\n}\r\n\r\nclass GoogleAutocomplete extends PureComponent<GoogleAutocompleteProps, GoogleAutocompleteState> {\r\n    googleAutocompleteService: GoogleAutocompleteService;\r\n\r\n    constructor(props: GoogleAutocompleteProps) {\r\n        super(props);\r\n        this.googleAutocompleteService = new GoogleAutocompleteService(props.apiKey);\r\n        this.state = {\r\n            items: [],\r\n            autoComplete: 'off',\r\n        };\r\n    }\r\n\r\n    render(): ReactNode {\r\n        const { initialValue, onToggleOpen = noop, inputProps = {} } = this.props;\r\n\r\n        const { autoComplete, items } = this.state;\r\n\r\n        return (\r\n            <Autocomplete\r\n                initialHighlightedIndex={0}\r\n                initialValue={initialValue}\r\n                inputProps={{\r\n                    ...inputProps,\r\n                    autoComplete,\r\n                }}\r\n                items={items}\r\n                listTestId=\"address-autocomplete-suggestions\"\r\n                onChange={this.onChange}\r\n                onSelect={this.onSelect}\r\n                onToggleOpen={onToggleOpen}\r\n            >\r\n                <div className=\"co-googleAutocomplete-footer\" />\r\n            </Autocomplete>\r\n        );\r\n    }\r\n\r\n    private onSelect: (item: AutocompleteItem) => void = (item) => {\r\n        const { fields, onSelect = noop, nextElement } = this.props;\r\n\r\n        this.googleAutocompleteService.getPlacesServices().then((service) => {\r\n            service.getDetails(\r\n                {\r\n                    placeId: item.id,\r\n                    fields: fields || ['address_components', 'name'],\r\n                },\r\n                (result) => {\r\n                    if (nextElement) {\r\n                        nextElement.focus();\r\n                    }\r\n\r\n                    onSelect(result, item);\r\n                },\r\n            );\r\n        });\r\n    };\r\n\r\n    private onChange: (input: string) => void = (input) => {\r\n        const { isAutocompleteEnabled, onChange = noop } = this.props;\r\n\r\n        onChange(input, false);\r\n\r\n        if (!isAutocompleteEnabled) {\r\n            return this.resetAutocomplete();\r\n        }\r\n\r\n        this.setAutocomplete(input);\r\n        this.setItems(input);\r\n    };\r\n\r\n    private setItems(input: string): void {\r\n        if (!input) {\r\n            this.setState({ items: [] });\r\n\r\n            return;\r\n        }\r\n\r\n        const { componentRestrictions, types } = this.props;\r\n\r\n        this.googleAutocompleteService.getAutocompleteService().then((service) => {\r\n            service.getPlacePredictions(\r\n                {\r\n                    input,\r\n                    types: types || ['geocode'],\r\n                    componentRestrictions,\r\n                },\r\n                (results) => this.setState({ items: this.toAutocompleteItems(results) }),\r\n            );\r\n        });\r\n    }\r\n\r\n    private resetAutocomplete(): void {\r\n        this.setState({\r\n            items: [],\r\n            autoComplete: 'off',\r\n        });\r\n    }\r\n\r\n    private setAutocomplete(input: string): void {\r\n        this.setState({\r\n            ...this.state,\r\n            autoComplete: input && input.length ? 'nope' : 'off',\r\n        });\r\n    }\r\n\r\n    private toAutocompleteItems(\r\n        results?: google.maps.places.AutocompletePrediction[],\r\n    ): AutocompleteItem[] {\r\n        return (results || []).map((result) => ({\r\n            label: result.description,\r\n            value: result.structured_formatting.main_text,\r\n            highlightedSlices: result.matched_substrings,\r\n            id: result.place_id,\r\n        }));\r\n    }\r\n}\r\n\r\nexport default GoogleAutocomplete;\r\n","import { FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\r\nimport classNames from 'classnames';\r\nimport { FieldProps } from 'formik';\r\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\r\n\r\nimport { TranslatedString } from '../../locale';\r\nimport { AutocompleteItem } from '../../ui/autocomplete';\r\nimport { FormField, Label } from '../../ui/form';\r\nimport {\r\n    getAddressFormFieldInputId,\r\n    getAddressFormFieldLabelId,\r\n} from '../getAddressFormFieldInputId';\r\n\r\nimport GoogleAutocomplete from './GoogleAutocomplete';\r\n\r\nexport interface GoogleAutocompleteFormFieldProps {\r\n    apiKey: string;\r\n    field: FormFieldType;\r\n    countryCode?: string;\r\n    supportedCountries: string[];\r\n    nextElement?: HTMLElement;\r\n    parentFieldName?: string;\r\n    useFloatingLabel?: boolean;\r\n    onSelect(place: google.maps.places.PlaceResult, item: AutocompleteItem): void;\r\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\r\n    onChange(value: string, isOpen: boolean): void;\r\n    disabledFields?: boolean;\r\n}\r\n\r\nconst GoogleAutocompleteFormField: FunctionComponent<GoogleAutocompleteFormFieldProps> = ({\r\n    field: { default: placeholder, name },\r\n    countryCode,\r\n    supportedCountries,\r\n    parentFieldName,\r\n    nextElement,\r\n    apiKey,\r\n    onSelect,\r\n    onChange,\r\n    onToggleOpen,\r\n    useFloatingLabel,\r\n    disabledFields\r\n}) => {\r\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\r\n\r\n    const labelContent = useMemo(() => <TranslatedString id=\"address.address_line_1_label\" />, []);\r\n\r\n    const labelId = getAddressFormFieldLabelId(name);\r\n\r\n    const inputProps = useMemo(\r\n        () => ({\r\n            className: classNames(\r\n                'form-input optimizedCheckout-form-input',\r\n                { 'floating-input': useFloatingLabel },\r\n            ),\r\n            id: getAddressFormFieldInputId(name),\r\n            'aria-labelledby': labelId,\r\n            placeholder: useFloatingLabel ? ' ' : placeholder,\r\n            labelText: useFloatingLabel ? labelContent : null,\r\n        }),\r\n        [name, labelId, placeholder, labelContent],\r\n    );\r\n\r\n    const renderInput = useCallback(\r\n        ({ field }: FieldProps) => (\r\n            <GoogleAutocomplete\r\n                apiKey={apiKey}\r\n                componentRestrictions={countryCode ? { country: countryCode } : undefined}\r\n                initialValue={field.value}\r\n                inputProps={inputProps}\r\n                isAutocompleteEnabled={\r\n                    countryCode ? supportedCountries.indexOf(countryCode) > -1 : false\r\n                }\r\n                nextElement={nextElement}\r\n                onChange={onChange}\r\n                onSelect={onSelect}\r\n                onToggleOpen={onToggleOpen}\r\n            />\r\n        ),\r\n        [\r\n            apiKey,\r\n            countryCode,\r\n            inputProps,\r\n            nextElement,\r\n            onChange,\r\n            onSelect,\r\n            onToggleOpen,\r\n            supportedCountries,\r\n        ],\r\n    );\r\n\r\n    const renderLabel = useFloatingLabel ? null : (\r\n        <Label htmlFor={inputProps.id} id={labelId} useFloatingLabel={useFloatingLabel}>\r\n            {labelContent}\r\n        </Label>\r\n    );\r\n\r\n    return (\r\n        <div className={classNames(\r\n                'dynamic-form-field dynamic-form-field--addressLineAutocomplete',\r\n                { 'floating-form-field': useFloatingLabel },\r\n            )}\r\n        >\r\n            <FormField\r\n                disabledFields={disabledFields}\r\n                input={renderInput}\r\n                label={renderLabel}\r\n                name={fieldName}\r\n                useFloatingLabel={useFloatingLabel}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default memo(GoogleAutocompleteFormField);\r\n","import { Address, Country, FormField } from '@bigcommerce/checkout-sdk';\r\nimport { memoize } from '@bigcommerce/memoize';\r\nimport { forIn, noop } from 'lodash';\r\nimport React, { Component, createRef, ReactNode, RefObject } from 'react';\r\n\r\nimport { TranslatedString, withLanguage, WithLanguageProps } from '../locale';\r\nimport { AutocompleteItem } from '../ui/autocomplete';\r\nimport { CheckboxFormField, DynamicFormField, DynamicFormFieldType, Fieldset } from '../ui/form';\r\n\r\nimport { AddressKeyMap } from './address';\r\nimport {\r\n    getAddressFormFieldInputId,\r\n    getAddressFormFieldLegacyName,\r\n} from './getAddressFormFieldInputId';\r\nimport { GoogleAutocompleteFormField, mapToAddress } from './googleAutocomplete';\r\nimport './AddressForm.scss';\r\n\r\nexport interface AddressFormProps {\r\n    fieldName?: string;\r\n    countryCode?: string;\r\n    countriesWithAutocomplete?: string[];\r\n    countries?: Country[];\r\n    formFields: FormField[];\r\n    googleMapsApiKey?: string;\r\n    shouldShowSaveAddress?: boolean;\r\n    useFloatingLabel?: boolean;\r\n    onAutocompleteSelect?(address: Partial<Address>): void;\r\n    onAutocompleteToggle?(state: { inputValue: string; isOpen: boolean }): void;\r\n    onChange?(fieldName: string, value: string | string[]): void;\r\n    setFieldValue?(fieldName: string, value: string | string[]): void;\r\n    disabledFields?: boolean;\r\n}\r\n\r\nconst LABEL: AddressKeyMap = {\r\n    address1: 'address.address_line_1_label',\r\n    address2: 'address.address_line_2_label',\r\n    city: 'address.city_label',\r\n    company: 'address.company_name_label',\r\n    countryCode: 'address.country_label',\r\n    firstName: 'address.first_name_label',\r\n    lastName: 'address.last_name_label',\r\n    phone: 'address.phone_number_label',\r\n    postalCode: 'address.postal_code_label',\r\n    stateOrProvince: 'address.state_label',\r\n    stateOrProvinceCode: 'address.state_label',\r\n};\r\n\r\nconst AUTOCOMPLETE: AddressKeyMap = {\r\n    address1: 'address-line1',\r\n    address2: 'address-line2',\r\n    city: 'address-level2',\r\n    company: 'organization',\r\n    countryCode: 'country',\r\n    firstName: 'given-name',\r\n    lastName: 'family-name',\r\n    phone: 'tel',\r\n    postalCode: 'postal-code',\r\n    stateOrProvince: 'address-level1',\r\n    stateOrProvinceCode: 'address-level1',\r\n};\r\n\r\nconst PLACEHOLDER: AddressKeyMap = {\r\n    countryCode: 'address.select_country_action',\r\n    stateOrProvince: 'address.select_state_action',\r\n    stateOrProvinceCode: 'address.select_state_action',\r\n};\r\n\r\nconst AUTOCOMPLETE_FIELD_NAME = 'address1';\r\n\r\nclass AddressForm extends Component<AddressFormProps & WithLanguageProps> {\r\n    private containerRef: RefObject<HTMLElement> = createRef();\r\n    private nextElement?: HTMLElement | null;\r\n\r\n    private handleDynamicFormFieldChange: (name: string) => (value: string | string[]) => void =\r\n        memoize((name) => (value) => {\r\n            this.syncNonFormikValue(name, value);\r\n        });\r\n\r\n    componentDidMount(): void {\r\n        const { current } = this.containerRef;\r\n\r\n        if (current) {\r\n            this.nextElement = current.querySelector<HTMLElement>('[autocomplete=\"address-line2\"]');\r\n        }\r\n    }\r\n\r\n    render(): ReactNode {\r\n        const {\r\n            formFields,\r\n            fieldName,\r\n            countriesWithAutocomplete,\r\n            countryCode,\r\n            googleMapsApiKey,\r\n            onAutocompleteToggle,\r\n            shouldShowSaveAddress,\r\n            useFloatingLabel,\r\n            disabledFields\r\n        } = this.props;\r\n\r\n        return (\r\n            <>\r\n                <Fieldset>\r\n                    <div\r\n                        className=\"checkout-address\"\r\n                        ref={this.containerRef as RefObject<HTMLDivElement>}\r\n                    >\r\n                        {formFields.map((field) => {\r\n                            const addressFieldName = field.name;\r\n                            const translatedPlaceholderId = PLACEHOLDER[addressFieldName];\r\n\r\n                            if (\r\n                                addressFieldName === 'address1' &&\r\n                                googleMapsApiKey &&\r\n                                countriesWithAutocomplete\r\n                            ) {\r\n                                return (\r\n                                    <GoogleAutocompleteFormField\r\n                                        apiKey={googleMapsApiKey}\r\n                                        countryCode={countryCode}\r\n                                        disabledFields={disabledFields}\r\n                                        field={field}\r\n                                        key={field.id}\r\n                                        nextElement={this.nextElement || undefined}\r\n                                        onChange={this.handleAutocompleteChange}\r\n                                        onSelect={this.handleAutocompleteSelect}\r\n                                        onToggleOpen={onAutocompleteToggle}\r\n                                        parentFieldName={fieldName}\r\n                                        supportedCountries={countriesWithAutocomplete}\r\n                                        useFloatingLabel={useFloatingLabel}\r\n                                    />\r\n                                );\r\n                            }\r\n\r\n                            return (\r\n                                <DynamicFormField\r\n                                    autocomplete={AUTOCOMPLETE[field.name]}\r\n                                    disabledFields={disabledFields}\r\n                                    extraClass={`dynamic-form-field--${getAddressFormFieldLegacyName(\r\n                                        addressFieldName,\r\n                                    )}`}\r\n                                    field={field}\r\n                                    // stateOrProvince can sometimes be a dropdown or input, so relying on id is not sufficient\r\n                                    inputId={getAddressFormFieldInputId(addressFieldName)}\r\n                                    key={`${field.id}-${field.name}`}\r\n                                    label={\r\n                                        field.custom ? (\r\n                                            field.label\r\n                                        ) : (\r\n                                            <TranslatedString id={LABEL[field.name]} />\r\n                                        )\r\n                                    }\r\n                                    onChange={this.handleDynamicFormFieldChange(addressFieldName)}\r\n                                    parentFieldName={\r\n                                        field.custom\r\n                                            ? fieldName\r\n                                                ? `${fieldName}.customFields`\r\n                                                : 'customFields'\r\n                                            : fieldName\r\n                                    }\r\n                                    placeholder={this.getPlaceholderValue(\r\n                                        field,\r\n                                        translatedPlaceholderId,\r\n                                    )}\r\n                                    useFloatingLabel={useFloatingLabel}\r\n                                />\r\n                            );\r\n                        })}\r\n                    </div>\r\n                </Fieldset>\r\n                {shouldShowSaveAddress && (\r\n                    <CheckboxFormField\r\n                        labelContent={<TranslatedString id=\"address.save_in_addressbook\" />}\r\n                        name={fieldName ? `${fieldName}.shouldSaveAddress` : 'shouldSaveAddress'}\r\n                    />\r\n                )}\r\n            </>\r\n        );\r\n    }\r\n\r\n    private getPlaceholderValue(field: FormField, translatedPlaceholderId: string): string {\r\n        const { language } = this.props;\r\n\r\n        if (field.default && field.fieldType !== 'dropdown') {\r\n            return field.default;\r\n        }\r\n\r\n        return translatedPlaceholderId && language.translate(translatedPlaceholderId);\r\n    }\r\n\r\n    private handleAutocompleteChange: (value: string, isOpen: boolean) => void = (\r\n        value,\r\n        isOpen,\r\n    ) => {\r\n        if (!isOpen) {\r\n            this.syncNonFormikValue(AUTOCOMPLETE_FIELD_NAME, value);\r\n        }\r\n    };\r\n\r\n    private handleAutocompleteSelect: (\r\n        place: google.maps.places.PlaceResult,\r\n        item: AutocompleteItem,\r\n    ) => void = (place, { value: autocompleteValue }) => {\r\n        const { countries, setFieldValue = noop, onChange = noop } = this.props;\r\n\r\n        const address = mapToAddress(place, countries);\r\n\r\n        forIn(address, (value, fieldName) => {\r\n            setFieldValue(fieldName, value as string);\r\n            onChange(fieldName, value as string);\r\n        });\r\n\r\n        if (autocompleteValue) {\r\n            this.syncNonFormikValue(AUTOCOMPLETE_FIELD_NAME, autocompleteValue);\r\n        }\r\n    };\r\n\r\n    // because autocomplete state is controlled by Downshift, we need to manually keep formik\r\n    // value in sync when autocomplete value changes\r\n    private syncNonFormikValue: (fieldName: string, value: string | string[]) => void = (\r\n        fieldName,\r\n        value,\r\n    ) => {\r\n        const { formFields, setFieldValue = noop, onChange = noop } = this.props;\r\n\r\n        const dateFormFieldNames = formFields\r\n            .filter((field) => field.custom && field.fieldType === DynamicFormFieldType.date)\r\n            .map((field) => field.name);\r\n\r\n        if (fieldName === AUTOCOMPLETE_FIELD_NAME || dateFormFieldNames.indexOf(fieldName) > -1) {\r\n            setFieldValue(fieldName, value);\r\n        }\r\n\r\n        onChange(fieldName, value);\r\n    };\r\n}\r\n\r\nexport default withLanguage(AddressForm);\r\n","import React, { FunctionComponent, useState } from 'react';\r\n\r\nimport { preventDefault } from '../common/dom';\r\nimport { TranslatedString, withLanguage, WithLanguageProps } from '../locale';\r\n\r\nimport { AddressSelectProps } from './AddressSelect';\r\nimport StaticAddress from './StaticAddress';\r\n\r\ntype AddressSelectButtonProps = Pick<AddressSelectProps, 'selectedAddress' | 'addresses'>;\r\n\r\nconst AddressSelectButton: FunctionComponent<AddressSelectButtonProps & WithLanguageProps> = ({\r\n    selectedAddress,\r\n    language,\r\n}) => {\r\n    const [ariaExpanded, setAriaExpanded] = useState(false);\r\n\r\n    return (\r\n        <a\r\n            aria-controls=\"addressDropdown\"\r\n            aria-description={language.translate('address.enter_or_select_address_action')}\r\n            aria-expanded={ariaExpanded}\r\n            className=\"button dropdown-button dropdown-toggle--select\"\r\n            href=\"#\"\r\n            id=\"addressToggle\"\r\n            onClick={preventDefault(() => setAriaExpanded(!ariaExpanded))}\r\n        >\r\n            {selectedAddress ? (\r\n                <StaticAddress address={selectedAddress} />\r\n            ) : (\r\n                <TranslatedString id=\"address.enter_address_action\" />\r\n            )}\r\n        </a>\r\n    );\r\n};\r\n\r\nexport default withLanguage(AddressSelectButton);\r\n","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\r\nimport React, { FunctionComponent, memo, PureComponent, ReactNode } from 'react';\r\n\r\nimport { preventDefault } from '../common/dom';\r\nimport { TranslatedString } from '../locale';\r\nimport { DropdownTrigger } from '../ui/dropdown';\r\n\r\nimport isEqualAddress from './isEqualAddress';\r\nimport './AddressSelect.scss';\r\nimport AddressSelectButton from './AddressSelectButton';\r\nimport StaticAddress from './StaticAddress';\r\n\r\nexport interface AddressSelectProps {\r\n    addresses: CustomerAddress[];\r\n    selectedAddress?: Address;\r\n    onSelectAddress(address: Address): void;\r\n    onUseNewAddress(currentAddress?: Address): void;\r\n}\r\n\r\nclass AddressSelect extends PureComponent<AddressSelectProps> {\r\n    render(): ReactNode {\r\n        const { addresses, selectedAddress } = this.props;\r\n\r\n        return (\r\n            <div className=\"form-field\">\r\n                <div className=\"dropdown--select\">\r\n                    <DropdownTrigger\r\n                        dropdown={\r\n                            <AddressSelectMenu\r\n                                addresses={addresses}\r\n                                onSelectAddress={this.handleSelectAddress}\r\n                                onUseNewAddress={this.handleUseNewAddress}\r\n                                selectedAddress={selectedAddress}\r\n                            />\r\n                        }\r\n                    >\r\n                        <AddressSelectButton\r\n                            addresses={addresses}\r\n                            selectedAddress={selectedAddress}\r\n                        />\r\n                    </DropdownTrigger>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private handleSelectAddress: (newAddress: Address) => void = (newAddress: Address) => {\r\n        const { onSelectAddress, selectedAddress } = this.props;\r\n\r\n        if (!isEqualAddress(selectedAddress, newAddress)) {\r\n            onSelectAddress(newAddress);\r\n        }\r\n    };\r\n\r\n    private handleUseNewAddress: () => void = () => {\r\n        const { selectedAddress, onUseNewAddress } = this.props;\r\n\r\n        onUseNewAddress(selectedAddress);\r\n    };\r\n}\r\n\r\nconst AddressSelectMenu: FunctionComponent<AddressSelectProps> = ({\r\n    addresses,\r\n    onSelectAddress,\r\n    onUseNewAddress,\r\n    selectedAddress,\r\n}) => (\r\n    <ul className=\"dropdown-menu instrumentSelect-dropdownMenu\" id=\"addressDropdown\">\r\n        <li className=\"dropdown-menu-item dropdown-menu-item--select\">\r\n            <a\r\n                data-test=\"add-new-address\"\r\n                href=\"#\"\r\n                onClick={preventDefault(() => onUseNewAddress(selectedAddress))}\r\n            >\r\n                <TranslatedString id=\"address.enter_address_action\" />\r\n            </a>\r\n        </li>\r\n        {addresses.map((address) => (\r\n            <li className=\"dropdown-menu-item dropdown-menu-item--select\" key={address.id}>\r\n                <a href=\"#\" onClick={preventDefault(() => onSelectAddress(address))}>\r\n                    <StaticAddress address={address} />\r\n                </a>\r\n            </li>\r\n        ))}\r\n    </ul>\r\n);\r\n\r\nexport default memo(AddressSelect);\r\n","import {\r\n    Address,\r\n    AddressRequestBody,\r\n    BillingAddress,\r\n    CustomerAddress,\r\n} from '@bigcommerce/checkout-sdk';\r\nimport { isEqual, omit } from 'lodash';\r\n\r\ntype ComparableAddress = CustomerAddress | Address | BillingAddress | AddressRequestBody;\r\ntype ComparableAddressFields = keyof CustomerAddress | keyof Address | keyof BillingAddress;\r\n\r\nexport default function isEqualAddress(\r\n    address1?: ComparableAddress,\r\n    address2?: ComparableAddress,\r\n): boolean {\r\n    if (!address1 || !address2) {\r\n        return false;\r\n    }\r\n\r\n    return (\r\n        isEqual(normalizeAddress(address1), normalizeAddress(address2)) &&\r\n        isSameState(address1, address2)\r\n    );\r\n}\r\n\r\nfunction isSameState(address1: ComparableAddress, address2: ComparableAddress): boolean {\r\n    if (address1.stateOrProvince && address1.stateOrProvince === address2.stateOrProvince) {\r\n        return true;\r\n    }\r\n\r\n    if (\r\n        address1.stateOrProvinceCode &&\r\n        address1.stateOrProvinceCode === address2.stateOrProvinceCode\r\n    ) {\r\n        return true;\r\n    }\r\n\r\n    return (\r\n        address1.stateOrProvince === address2.stateOrProvince &&\r\n        address1.stateOrProvinceCode === address2.stateOrProvinceCode\r\n    );\r\n}\r\n\r\nfunction normalizeAddress(address: ComparableAddress) {\r\n    const ignoredFields: ComparableAddressFields[] = [\r\n        'id',\r\n        'shouldSaveAddress',\r\n        'stateOrProvince',\r\n        'stateOrProvinceCode',\r\n        'type',\r\n        'email',\r\n        'country',\r\n    ];\r\n\r\n    return omit(\r\n        {\r\n            ...address,\r\n            customFields: (address.customFields || []).filter(({ fieldValue }) => !!fieldValue),\r\n        },\r\n        ignoredFields,\r\n    );\r\n}\r\n","import { Address, CustomerAddress, FormField } from '@bigcommerce/checkout-sdk';\r\nimport { some } from 'lodash';\r\n\r\nimport isEqualAddress from './isEqualAddress';\r\nimport isValidAddress from './isValidAddress';\r\n\r\nexport default function isValidCustomerAddress(\r\n    address: Address | undefined,\r\n    addresses: CustomerAddress[],\r\n    formFields: FormField[],\r\n): boolean {\r\n    if (!address || !isValidAddress(address, formFields)) {\r\n        return false;\r\n    }\r\n\r\n    return some(addresses, (customerAddress) => isEqualAddress(customerAddress, address));\r\n}\r\n","import { Address } from '@bigcommerce/checkout-sdk';\r\n\r\nimport { mapCustomFormFieldsFromFormValues } from '../formFields';\r\n\r\nimport { AddressFormValues } from './mapAddressToFormValues';\r\n\r\nexport default function mapAddressFromFormValues(formValues: AddressFormValues): Address {\r\n    const { customFields, ...address } = formValues;\r\n    const shouldSaveAddress = formValues.shouldSaveAddress;\r\n\r\n    return {\r\n        ...address,\r\n        shouldSaveAddress,\r\n        customFields: mapCustomFormFieldsFromFormValues(customFields),\r\n    };\r\n}\r\n","import { CheckoutSettings } from '@bigcommerce/checkout-sdk';\r\n\r\nexport default function isFloatingLabelEnabled(checkoutSettings: CheckoutSettings): boolean {\r\n    return !!checkoutSettings.features['CHECKOUT-6879.enable_floating_labels'];\r\n}\r\n","import { forIn, isDate, padStart } from 'lodash';\r\n\r\nexport default function mapCustomFormFieldsFromFormValues(customFieldsObject: {\r\n    [id: string]: any;\r\n}): Array<{ fieldId: string; fieldValue: string }> {\r\n    const customFields: Array<{ fieldId: string; fieldValue: string }> = [];\r\n\r\n    forIn(customFieldsObject, (value, key) => {\r\n        let fieldValue: string;\r\n\r\n        if (isDate(value)) {\r\n            const padMonth = padStart((value.getMonth() + 1).toString(), 2, '0');\r\n            const padDay = padStart(value.getDate().toString(), 2, '0');\r\n\r\n            fieldValue = `${value.getFullYear()}-${padMonth}-${padDay}`;\r\n        } else {\r\n            fieldValue = value;\r\n        }\r\n\r\n        customFields.push({\r\n            fieldId: key,\r\n            fieldValue,\r\n        });\r\n    });\r\n\r\n    return customFields;\r\n}\r\n","import { FieldProps } from 'formik';\r\nimport React, { FunctionComponent, useCallback, useMemo } from 'react';\r\n\r\nimport { TranslatedString } from '../locale';\r\nimport { Fieldset, FormField, Label, Legend, TextInput } from '../ui/form';\r\n\r\nconst OrderComments: FunctionComponent = () => {\r\n    const renderLabel = useCallback(\r\n        (name) => (\r\n            <Label hidden htmlFor={name}>\r\n                <TranslatedString id=\"shipping.order_comment_label\" />\r\n            </Label>\r\n        ),\r\n        [],\r\n    );\r\n\r\n    const renderInput = useCallback(\r\n        ({ field }: FieldProps) => <TextInput {...field} autoComplete=\"off\" maxLength={2000} />,\r\n        [],\r\n    );\r\n\r\n    const legend = useMemo(\r\n        () => (\r\n            <Legend>\r\n                <TranslatedString id=\"shipping.order_comment_label\" />\r\n            </Legend>\r\n        ),\r\n        [],\r\n    );\r\n\r\n    return (\r\n        <Fieldset legend={legend} testId=\"checkout-shipping-comments\">\r\n            <FormField input={renderInput} label={renderLabel} name=\"orderComment\" />\r\n        </Fieldset>\r\n    );\r\n};\r\n\r\nexport default OrderComments;\r\n","import { Checkout, CheckoutPayment } from '@bigcommerce/checkout-sdk';\r\n\r\nimport { isGiftCertificatePayment } from '../giftCertificate';\r\n\r\nimport { isStoreCreditPayment } from './storeCredit';\r\n\r\nexport default function getPreselectedPayment(checkout: Checkout): CheckoutPayment | undefined {\r\n    const payments = checkout && checkout.payments ? checkout.payments : [];\r\n\r\n    return payments.find(\r\n        (payment) =>\r\n            !isGiftCertificatePayment(payment) &&\r\n            !isStoreCreditPayment(payment) &&\r\n            !!payment.providerId,\r\n    );\r\n}\r\n","import { Cart } from '@bigcommerce/checkout-sdk';\r\n\r\nimport getLineItemsCount from './getLineItemsCount';\r\n\r\nexport default function getShippableItemsCount(cart: Cart): number {\r\n    return getLineItemsCount(cart.lineItems.physicalItems.filter((item) => !item.addedByPromotion));\r\n}\r\n","import { Placement } from 'popper.js';\r\nimport React, { Component, MouseEventHandler, ReactNode } from 'react';\r\nimport { Manager, Popper, Reference } from 'react-popper';\r\n\r\nexport interface DropdownTriggerProps {\r\n    placement?: Placement;\r\n    dropdown: ReactNode;\r\n}\r\n\r\nexport interface DropdownTriggerState {\r\n    shouldShow: boolean;\r\n}\r\n\r\nexport default class DropdownTrigger extends Component<DropdownTriggerProps, DropdownTriggerState> {\r\n    static defaultProps = {\r\n        placement: 'bottom-start',\r\n    };\r\n\r\n    state: Readonly<DropdownTriggerState> = {\r\n        shouldShow: false,\r\n    };\r\n\r\n    componentWillUnmount(): void {\r\n        document.removeEventListener('click', this.handleClose);\r\n    }\r\n\r\n    render() {\r\n        const { children, placement, dropdown } = this.props;\r\n        const { shouldShow } = this.state;\r\n\r\n        return (\r\n            <Manager>\r\n                <Reference>\r\n                    {({ ref }) => (\r\n                        <div className=\"dropdownTrigger\" onClick={this.handleClick} ref={ref}>\r\n                            {children}\r\n                        </div>\r\n                    )}\r\n                </Reference>\r\n\r\n                <Popper\r\n                    modifiers={{\r\n                        hide: { enabled: false },\r\n                        flip: { enabled: false },\r\n                        preventOverflow: { enabled: false },\r\n                    }}\r\n                    placement={placement}\r\n                >\r\n                    {({ ref, style }) =>\r\n                        !shouldShow ? null : (\r\n                            <div\r\n                                className=\"dropdownMenu\"\r\n                                ref={ref}\r\n                                style={{\r\n                                    ...style,\r\n                                    width: '100%',\r\n                                    zIndex: 1,\r\n                                }}\r\n                            >\r\n                                {dropdown}\r\n                            </div>\r\n                        )\r\n                    }\r\n                </Popper>\r\n            </Manager>\r\n        );\r\n    }\r\n\r\n    private handleClick: MouseEventHandler<HTMLElement> = (event) => {\r\n        const { shouldShow } = this.state;\r\n\r\n        if (shouldShow) {\r\n            this.handleClose(event.nativeEvent);\r\n        } else {\r\n            this.handleOpen(event.nativeEvent);\r\n        }\r\n    };\r\n\r\n    private handleOpen: (event: MouseEvent) => void = () => {\r\n        const { shouldShow } = this.state;\r\n\r\n        if (shouldShow) {\r\n            return;\r\n        }\r\n\r\n        this.setState({ shouldShow: true }, () => {\r\n            document.addEventListener('click', this.handleClose);\r\n        });\r\n    };\r\n\r\n    private handleClose: (event: MouseEvent) => void = () => {\r\n        const { shouldShow } = this.state;\r\n\r\n        if (!shouldShow) {\r\n            return;\r\n        }\r\n\r\n        this.setState({ shouldShow: false }, () => {\r\n            document.removeEventListener('click', this.handleClose);\r\n        });\r\n    };\r\n}\r\n","import { FieldProps } from 'formik';\r\nimport { kebabCase } from 'lodash';\r\nimport React, { FunctionComponent, memo, ReactNode, useCallback } from 'react';\r\n\r\nimport BasicFormField from './BasicFormField';\r\nimport CheckboxInput from './CheckboxInput';\r\nimport FormFieldError from './FormFieldError';\r\n\r\nexport interface CheckboxFormFieldProps {\r\n    additionalClassName?: string;\r\n    disabled?: boolean;\r\n    name: string;\r\n    id?: string;\r\n    labelContent: ReactNode;\r\n    onChange?(isChecked: boolean): void;\r\n}\r\n\r\nconst CheckboxFormField: FunctionComponent<CheckboxFormFieldProps> = ({\r\n    additionalClassName,\r\n    disabled = false,\r\n    labelContent,\r\n    onChange,\r\n    name,\r\n    id,\r\n}) => {\r\n    const renderField = useCallback(\r\n        ({ field }: FieldProps) => (\r\n            <>\r\n                <CheckboxInput\r\n                    {...field}\r\n                    checked={!!field.value}\r\n                    disabled={disabled}\r\n                    id={id || field.name}\r\n                    label={labelContent}\r\n                />\r\n\r\n                <FormFieldError\r\n                    errorId={`${id ?? name}-field-error-message`}\r\n                    name={name}\r\n                    testId={`${kebabCase(name)}-field-error-message`}\r\n                />\r\n            </>\r\n        ),\r\n        [disabled, id, labelContent, name],\r\n    );\r\n\r\n    return (\r\n        <BasicFormField\r\n            additionalClassName={additionalClassName}\r\n            name={name}\r\n            onChange={onChange}\r\n            render={renderField}\r\n        />\r\n    );\r\n};\r\n\r\nexport default memo(CheckboxFormField);\r\n","import classNames from 'classnames';\r\nimport React, { forwardRef, ReactNode, Ref } from 'react';\r\n\r\nimport Input, { InputProps } from './Input';\r\nimport Label from './Label';\r\n\r\nexport interface CheckboxInputProps extends InputProps {\r\n    additionalClassName?: string;\r\n    label: ReactNode;\r\n    value: string;\r\n    checked: boolean;\r\n}\r\n\r\nconst CheckboxInput = forwardRef(\r\n    (\r\n        { additionalClassName, label, id, ...rest }: CheckboxInputProps,\r\n        ref: Ref<HTMLInputElement>,\r\n    ) => (\r\n        <>\r\n            <Input\r\n                {...rest}\r\n                className={classNames(\r\n                    'form-checkbox',\r\n                    'optimizedCheckout-form-checkbox',\r\n                    additionalClassName,\r\n                )}\r\n                id={id}\r\n                ref={ref}\r\n                type=\"checkbox\"\r\n            />\r\n            <Label htmlFor={id}>{label}</Label>\r\n        </>\r\n    ),\r\n);\r\n\r\nexport default CheckboxInput;\r\n","import { createInjectHoc, InjectHoc } from '../common/hoc';\r\n\r\nimport LocaleContext from './LocaleContext';\r\n\r\nexport interface WithDateProps {\r\n    date: {\r\n        inputFormat: string;\r\n    };\r\n}\r\n\r\nconst withDate: InjectHoc<WithDateProps> = createInjectHoc(LocaleContext, {\r\n    displayNamePrefix: 'withDate',\r\n    pickProps: (value, key) => key === 'date' && !!value,\r\n});\r\n\r\nexport default withDate;\r\n","import classNames from 'classnames';\r\nimport React, { forwardRef, ReactNode, Ref } from 'react';\r\n\r\nimport Input, { InputProps } from './Input';\r\nimport Label from './Label';\r\n\r\nexport interface RadioInputProps extends InputProps {\r\n    additionalClassName?: string;\r\n    label: ReactNode;\r\n    value: string;\r\n    checked: boolean;\r\n}\r\n\r\nconst RadioInput = forwardRef(\r\n    (\r\n        { additionalClassName, label, value, checked, id, ...rest }: RadioInputProps,\r\n        ref: Ref<HTMLInputElement>,\r\n    ) => (\r\n        <>\r\n            <Input\r\n                {...rest}\r\n                checked={checked}\r\n                className={classNames(\r\n                    'form-radio',\r\n                    'optimizedCheckout-form-radio',\r\n                    additionalClassName,\r\n                )}\r\n                id={id}\r\n                ref={ref}\r\n                type=\"radio\"\r\n                value={value}\r\n            />\r\n            <Label htmlFor={id}>{label}</Label>\r\n        </>\r\n    ),\r\n);\r\n\r\nexport default RadioInput;\r\n","import { FormFieldItem } from '@bigcommerce/checkout-sdk';\r\nimport classNames from 'classnames';\r\nimport { isDate, noop } from 'lodash';\r\nimport React, { FunctionComponent, memo, useCallback } from 'react';\r\nimport ReactDatePicker from 'react-datepicker';\r\n\r\nimport { withDate, WithDateProps } from '../../locale';\r\nimport { IconChevronDown } from '../icon';\r\n\r\nimport CheckboxInput from './CheckboxInput';\r\nimport DynamicFormFieldType from './DynamicFormFieldType';\r\nimport { InputProps } from './Input';\r\nimport RadioInput from './RadioInput';\r\nimport TextArea from './TextArea';\r\nimport TextInput from './TextInput';\r\n\r\nexport interface DynamicInputProps extends InputProps {\r\n    id: string;\r\n    additionalClassName?: string;\r\n    value?: string | string[];\r\n    rows?: number;\r\n    fieldType?: DynamicFormFieldType;\r\n    options?: FormFieldItem[];\r\n    useFloatingLabel?: boolean;\r\n}\r\n\r\nconst DynamicInput: FunctionComponent<DynamicInputProps & WithDateProps> = ({\r\n    additionalClassName,\r\n    date,\r\n    fieldType,\r\n    id,\r\n    name,\r\n    onChange = noop,\r\n    options,\r\n    placeholder,\r\n    useFloatingLabel,\r\n    value,\r\n    ...rest\r\n}) => {\r\n    const { inputFormat } = date;\r\n    const handleDateChange = useCallback(\r\n        (dateValue, event) =>\r\n            onChange({\r\n                ...event,\r\n                target: {\r\n                    name,\r\n                    value: dateValue,\r\n                },\r\n            }),\r\n        [onChange, name],\r\n    );\r\n\r\n    switch (fieldType) {\r\n        case DynamicFormFieldType.dropdown:\r\n            return (\r\n                <>\r\n                    <div\r\n                        className={classNames(\r\n                            { 'dropdown-chevron': !useFloatingLabel },\r\n                            { 'floating-select-chevron': useFloatingLabel },\r\n                        )}>\r\n                        <IconChevronDown />\r\n                    </div>\r\n                    <select\r\n                        {...(rest as any)}\r\n                        className={classNames(\r\n                            { 'floating-select': useFloatingLabel },\r\n                            'form-select optimizedCheckout-form-select',\r\n                        )}\r\n                        data-test={`${id}-select`}\r\n                        id={id}\r\n                        name={name}\r\n                        onChange={onChange}\r\n                        value={value === null ? '' : value}\r\n                    >\r\n                        {placeholder && <option value=\"\">{placeholder}</option>}\r\n                        {options &&\r\n                            options.map(({ label, value: optionValue }) => (\r\n                                <option key={optionValue} value={optionValue}>\r\n                                    {label}\r\n                                </option>\r\n                            ))}\r\n                    </select>\r\n                </>\r\n            );\r\n\r\n        case DynamicFormFieldType.radio:\r\n            if (!options || !options.length) {\r\n                return null;\r\n            }\r\n\r\n            return (\r\n                <>\r\n                    {options.map(({ label, value: optionValue }) => (\r\n                        <RadioInput\r\n                            {...rest}\r\n                            checked={optionValue === value}\r\n                            id={`${id}-${optionValue}`}\r\n                            key={optionValue}\r\n                            label={label}\r\n                            name={name}\r\n                            onChange={onChange}\r\n                            testId={`${id}-${optionValue}-radio`}\r\n                            value={optionValue}\r\n                        />\r\n                    ))}\r\n                </>\r\n            );\r\n\r\n        case DynamicFormFieldType.checkbox:\r\n            if (!options || !options.length) {\r\n                return null;\r\n            }\r\n\r\n            return (\r\n                <>\r\n                    {options.map(({ label, value: optionValue }) => (\r\n                        <CheckboxInput\r\n                            {...rest}\r\n                            checked={Array.isArray(value) ? value.includes(optionValue) : false}\r\n                            id={`${id}-${optionValue}`}\r\n                            key={optionValue}\r\n                            label={label}\r\n                            name={name}\r\n                            onChange={onChange}\r\n                            testId={`${id}-${optionValue}-checkbox`}\r\n                            value={optionValue}\r\n                        />\r\n                    ))}\r\n                </>\r\n            );\r\n\r\n        case DynamicFormFieldType.date:\r\n            return (\r\n                <ReactDatePicker\r\n                    {...(rest as any)}\r\n                    autoComplete=\"off\"\r\n                    // FIXME: we can avoid this by simply using onChangeRaw, but it's not being triggered properly\r\n                    // https://github.com/Hacker0x01/react-datepicker/issues/1357\r\n                    // onChangeRaw={ rest.onChange }\r\n                    calendarClassName=\"optimizedCheckout-contentPrimary\"\r\n                    className={classNames('form-input optimizedCheckout-form-input', {\r\n                        'floating-input': useFloatingLabel,\r\n                    })}\r\n                    dateFormat={inputFormat}\r\n                    maxDate={rest.max ? new Date(`${rest.max}T00:00:00Z`) : undefined}\r\n                    minDate={rest.min ? new Date(`${rest.min}T00:00:00Z`) : undefined}\r\n                    name={name}\r\n                    onChange={handleDateChange}\r\n                    placeholderText={inputFormat.toUpperCase()}\r\n                    popperClassName=\"optimizedCheckout-contentPrimary\"\r\n                    selected={isDate(value) ? value : undefined}\r\n                />\r\n            );\r\n\r\n        case DynamicFormFieldType.multiline:\r\n            return (\r\n                <TextArea\r\n                    {...(rest as any)}\r\n                    id={id}\r\n                    name={name}\r\n                    onChange={onChange}\r\n                    testId={`${id}-text`}\r\n                    type={fieldType}\r\n                    useFloatingLabel={useFloatingLabel}\r\n                    value={value}\r\n                />\r\n            );\r\n\r\n        default:\r\n            return (\r\n                <TextInput\r\n                    {...rest}\r\n                    id={id}\r\n                    name={name}\r\n                    onChange={onChange}\r\n                    placeholder={placeholder}\r\n                    testId={`${id}-${\r\n                        fieldType === DynamicFormFieldType.password ? 'password' : 'text'\r\n                    }`}\r\n                    type={fieldType}\r\n                    useFloatingLabel={useFloatingLabel}\r\n                    value={value}\r\n                />\r\n            );\r\n    }\r\n};\r\n\r\nexport default memo(withDate(DynamicInput));\r\n","import React, { FunctionComponent, memo, MouseEvent, useCallback } from 'react';\r\n\r\nimport { TranslatedString } from '../../locale';\r\n\r\nimport './MultiCheckboxControl.scss';\r\n\r\nexport interface MultiCheckboxControlProps {\r\n    testId?: string;\r\n    onSelectedAll(): void;\r\n    onSelectedNone(): void;\r\n}\r\n\r\nconst MultiCheckboxControl: FunctionComponent<MultiCheckboxControlProps> = ({\r\n    testId,\r\n    onSelectedAll,\r\n    onSelectedNone,\r\n}) => {\r\n    const handleSelectAllClick = useCallback(\r\n        (event: MouseEvent) => {\r\n            event.preventDefault();\r\n            onSelectedAll();\r\n        },\r\n        [onSelectedAll],\r\n    );\r\n\r\n    const handleSelectNoneClick = useCallback(\r\n        (event: MouseEvent) => {\r\n            event.preventDefault();\r\n            onSelectedNone();\r\n        },\r\n        [onSelectedNone],\r\n    );\r\n\r\n    return (\r\n        <ul className=\"multiCheckbox--controls\">\r\n            <li className=\"multiCheckbox--control\">\r\n                <TranslatedString id=\"address.select\" />\r\n            </li>\r\n\r\n            <li className=\"multiCheckbox--control\">\r\n                <a\r\n                    data-test={`${testId}Checkbox-all-button`}\r\n                    href=\"#\"\r\n                    onClick={handleSelectAllClick}\r\n                >\r\n                    <TranslatedString id=\"address.select_all\" />\r\n                </a>\r\n            </li>\r\n\r\n            <li className=\"multiCheckbox--control\">\r\n                <a\r\n                    data-test={`${testId}Checkbox-none-button`}\r\n                    href=\"#\"\r\n                    onClick={handleSelectNoneClick}\r\n                >\r\n                    <TranslatedString id=\"address.select_none\" />\r\n                </a>\r\n            </li>\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default memo(MultiCheckboxControl);\r\n","import { FormFieldItem } from '@bigcommerce/checkout-sdk';\r\nimport { FieldArray, FieldArrayRenderProps, getIn } from 'formik';\r\nimport { difference, kebabCase, noop, pick } from 'lodash';\r\nimport React, { ChangeEvent, FunctionComponent, memo, ReactNode, useCallback } from 'react';\r\n\r\nimport DynamicFormFieldType from './DynamicFormFieldType';\r\nimport DynamicInput from './DynamicInput';\r\nimport FormFieldContainer from './FormFieldContainer';\r\nimport FormFieldError from './FormFieldError';\r\nimport MultiCheckboxControl from './MultiCheckboxControl';\r\n\r\nexport interface CheckboxGroupFormFieldProps {\r\n    id: string;\r\n    label: ReactNode;\r\n    name: string;\r\n    options: FormFieldItem[];\r\n    onChange?(values: string[]): void;\r\n}\r\n\r\ntype MultiCheckboxFormFieldProps = CheckboxGroupFormFieldProps &\r\n    Pick<FieldArrayRenderProps, 'push' | 'remove' | 'pop' | 'form'>;\r\n\r\nconst MultiCheckboxFormField: FunctionComponent<MultiCheckboxFormFieldProps> = ({\r\n    form: { values, errors },\r\n    id,\r\n    label,\r\n    name,\r\n    onChange = noop,\r\n    options,\r\n    push,\r\n    remove,\r\n}) => {\r\n    const handleSelectAll = useCallback(() => {\r\n        const checkedValues: string[] = getIn(values, name) || [];\r\n\r\n        difference(\r\n            options.map(({ value }) => value),\r\n            checkedValues,\r\n        ).forEach((val) => push(val));\r\n\r\n        onChange(getIn(values, name));\r\n    }, [name, onChange, options, push, values]);\r\n\r\n    const handleSelectNone = useCallback(() => {\r\n        const checkedValues: string[] = getIn(values, name) || [];\r\n\r\n        checkedValues.forEach(() => remove(0));\r\n\r\n        onChange(getIn(values, name));\r\n    }, [name, onChange, remove, values]);\r\n\r\n    const handleInputChange = useCallback(\r\n        (event: ChangeEvent<HTMLInputElement>) => {\r\n            const checkedValues: string[] = getIn(values, name) || [];\r\n            const { value, checked } = event.target;\r\n\r\n            if (checked) {\r\n                push(value);\r\n            } else {\r\n                remove(checkedValues.indexOf(value));\r\n            }\r\n\r\n            onChange(getIn(values, name));\r\n        },\r\n        [name, onChange, push, remove, values],\r\n    );\r\n\r\n    return (\r\n        <FormFieldContainer hasError={getIn(errors, name) && getIn(errors, name).length}>\r\n            {label}\r\n\r\n            {options.length > 1 && (\r\n                <MultiCheckboxControl\r\n                    onSelectedAll={handleSelectAll}\r\n                    onSelectedNone={handleSelectNone}\r\n                    testId={id}\r\n                />\r\n            )}\r\n\r\n            <DynamicInput\r\n                fieldType={DynamicFormFieldType.checkbox}\r\n                id={id}\r\n                name={name}\r\n                onChange={handleInputChange}\r\n                options={options}\r\n                value={getIn(values, name) || []}\r\n            />\r\n\r\n            <FormFieldError\r\n                errorId={`${id ?? name}-field-error-message`}\r\n                name={name}\r\n                testId={`${kebabCase(name)}-field-error-message`}\r\n            />\r\n        </FormFieldContainer>\r\n    );\r\n};\r\n\r\nconst CheckboxGroupFormField: FunctionComponent<CheckboxGroupFormFieldProps> = ({\r\n    id,\r\n    label,\r\n    name,\r\n    onChange,\r\n    options,\r\n}) => {\r\n    const renderField = useCallback(\r\n        (renderProps: FieldArrayRenderProps) => (\r\n            <MultiCheckboxFormField\r\n                id={id}\r\n                label={label}\r\n                name={name}\r\n                onChange={onChange}\r\n                options={options}\r\n                {...pick(renderProps, ['form', 'pop', 'push', 'remove'])}\r\n            />\r\n        ),\r\n        [id, label, name, onChange, options],\r\n    );\r\n\r\n    return <FieldArray name={name} render={renderField} />;\r\n};\r\n\r\nexport default memo(CheckboxGroupFormField);\r\n","import { FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\r\nimport classNames from 'classnames';\r\nimport { FieldProps } from 'formik';\r\nimport { includes } from 'lodash';\r\nimport React, { FunctionComponent, memo, ReactNode, useCallback, useMemo } from 'react';\r\n\r\nimport { TranslatedString } from '../../locale';\r\n\r\nimport CheckboxGroupFormField from './CheckboxGroupFormField';\r\nimport DynamicFormFieldType from './DynamicFormFieldType';\r\nimport DynamicInput from './DynamicInput';\r\nimport FormField from './FormField';\r\nimport Label from './Label';\r\n\r\nexport interface DynamicFormFieldOption {\r\n    code: string;\r\n    name: string;\r\n}\r\n\r\nexport interface DynamicFormFieldProps {\r\n    field: FormFieldType;\r\n    inputId?: string;\r\n    extraClass?: string;\r\n    autocomplete?: string;\r\n    parentFieldName?: string;\r\n    placeholder?: string;\r\n    label?: ReactNode;\r\n    useFloatingLabel?: boolean;\r\n    onChange?(value: string | string[]): void;\r\n    disabledFields?: boolean;\r\n}\r\n\r\nexport interface FieldPropsExtended {\r\n    onChange?(value: string): void;\r\n    disabledFields?: boolean;\r\n}\r\n\r\nconst DynamicFormField: FunctionComponent<DynamicFormFieldProps> = ({\r\n    field: {\r\n        fieldType,\r\n        type,\r\n        secret,\r\n        name,\r\n        label: fieldLabel,\r\n        required,\r\n        options,\r\n        max,\r\n        min,\r\n        maxLength\r\n    },\r\n    parentFieldName,\r\n    onChange,\r\n    placeholder,\r\n    inputId,\r\n    autocomplete,\r\n    label,\r\n    extraClass,\r\n    useFloatingLabel,\r\n    disabledFields\r\n}) => {\r\n    const fieldInputId = inputId || name;\r\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\r\n    const isFloatingLabelSupportedFieldType = Boolean(\r\n        useFloatingLabel &&\r\n            (includes(['text', 'password', 'dropdown', 'date', 'multiline'], fieldType) ||\r\n                !fieldType),\r\n    );\r\n    const labelComponent = useMemo(\r\n        () => (\r\n            <Label\r\n                htmlFor={fieldInputId}\r\n                id={`${fieldInputId}-label`}\r\n                useFloatingLabel={isFloatingLabelSupportedFieldType}\r\n            >\r\n                {label || fieldLabel}\r\n                {!required && (\r\n                    <>\r\n                        {' '}\r\n                        <small className=\"optimizedCheckout-contentSecondary\">\r\n                            <TranslatedString id=\"common.optional_text\" />\r\n                        </small>\r\n                    </>\r\n                )}\r\n            </Label>\r\n        ),\r\n        [fieldInputId, fieldLabel, required, isFloatingLabelSupportedFieldType, label],\r\n    );\r\n\r\n    const dynamicFormFieldType = useMemo((): DynamicFormFieldType => {\r\n        if (fieldType === 'text') {\r\n            if (type === 'integer') {\r\n                return DynamicFormFieldType.number;\r\n            }\r\n\r\n            if (includes(name, 'phone') || includes(name, 'tel')) {\r\n                return DynamicFormFieldType.telephone;\r\n            }\r\n\r\n            return secret ? DynamicFormFieldType.password : DynamicFormFieldType.text;\r\n        }\r\n\r\n        return fieldType as DynamicFormFieldType;\r\n    }, [fieldType, type, secret, name]);\r\n\r\n    const renderInput = useCallback(\r\n        ({ disabledFields, field }: FieldProps<string> & FieldPropsExtended) => (\r\n            <DynamicInput\r\n                {...field}\r\n                aria-labelledby={`${fieldInputId}-label ${fieldInputId}-field-error-message`}\r\n                autoComplete={autocomplete}\r\n                disabled={disabledFields}\r\n                fieldType={dynamicFormFieldType}\r\n                id={fieldInputId}\r\n                max={max}\r\n                maxLength={maxLength || undefined}\r\n                min={min}\r\n                options={options && options.items}\r\n                placeholder={placeholder || (options && options.helperLabel)}\r\n                rows={options && (options as any).rows}\r\n                useFloatingLabel={isFloatingLabelSupportedFieldType}\r\n            />\r\n        ),\r\n        [\r\n            fieldInputId,\r\n            max,\r\n            maxLength,\r\n            min,\r\n            options,\r\n            placeholder,\r\n            dynamicFormFieldType,\r\n            autocomplete,\r\n        ],\r\n    );\r\n\r\n    return (\r\n        <div\r\n            className={classNames(\r\n                'dynamic-form-field',\r\n                { 'floating-form-field': isFloatingLabelSupportedFieldType },\r\n                extraClass,\r\n            )}\r\n        >\r\n            {fieldType === DynamicFormFieldType.checkbox ? (\r\n                <CheckboxGroupFormField\r\n                    id={fieldInputId}\r\n                    label={labelComponent}\r\n                    name={fieldName}\r\n                    onChange={onChange}\r\n                    options={(options && options.items) || []}\r\n                />\r\n            ) : (\r\n                <FormField\r\n                    disabledFields={disabledFields}\r\n                    id={fieldInputId}\r\n                    input={renderInput}\r\n                    label={labelComponent}\r\n                    name={fieldName}\r\n                    onChange={onChange}\r\n                    useFloatingLabel={isFloatingLabelSupportedFieldType}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default memo(DynamicFormField);\r\n","import classNames from 'classnames';\r\nimport React, { forwardRef, Ref, TextareaHTMLAttributes } from 'react';\r\n\r\nexport interface TextAreaProps extends TextareaHTMLAttributes<HTMLTextAreaElement> {\r\n    additionalClassName?: string;\r\n    testId?: string;\r\n    useFloatingLabel?: boolean;\r\n}\r\n\r\nconst TextArea = forwardRef(\r\n    (\r\n        { additionalClassName, testId, className, useFloatingLabel, ...rest }: TextAreaProps,\r\n        ref: Ref<HTMLTextAreaElement>,\r\n    ) => {\r\n        return (\r\n            <textarea\r\n                {...rest}\r\n                className={\r\n                    className ||\r\n                    classNames(\r\n                        { 'floating-textarea': useFloatingLabel },\r\n                        'form-input',\r\n                        'optimizedCheckout-form-input',\r\n                        additionalClassName,\r\n                    )\r\n                }\r\n                data-test={testId}\r\n                ref={ref}\r\n            />\r\n        );\r\n    },\r\n);\r\n\r\nexport default TextArea;\r\n","import React, { FunctionComponent } from 'react';\r\n\r\nimport withIconContainer from './withIconContainer';\r\n\r\nconst IconChevronDown: FunctionComponent = () => (\r\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path d=\"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\" />\r\n    </svg>\r\n);\r\n\r\nexport default withIconContainer(IconChevronDown);\r\n"],"names":["ADDRESS_FIELD_IDS","address1","address2","postalCode","stateOrProvince","stateOrProvinceCode","getAddressFormFieldLegacyName","name","getAddressFormFieldInputId","googlePlace","address_components","this","_name","_address","getState","_get","getStreet","getStreet2","getCountry","getCity","getPostCode","type","access","element","find","field","types","indexOf","create","autocompleteData","addressSelector","mapToAddress","countries","accessor","state","countryCode","country","c","code","street2","city","stateName","states","length","subdivisions","children","className","getItemClassName","highlightedIndex","index","classes","push","join","memo","testId","getItemProps","props","menuProps","items","map","item","key","id","content","stateReducer","changes","onChange","inputValue","isOpen","handleStateChange","onToggleOpen","noop","undefined","render","inputProps","initialValue","initialHighlightedIndex","onSelect","listTestId","defaultHighlightedIndex","initialInputValue","itemToString","labelId","onStateChange","getInputProps","getMenuProps","validInputProps","labelText","includes","Label","htmlFor","useFloatingLabel","isNumber","toPopoverItem","highlightItem","highlightedSlices","label","lastIndex","reduce","node","slice","i","offset","notHighlightedLength","Fragment","substr","value","PureComponent","_scriptLoader","getScriptLoader","loadMapsSdk","apiKey","_googleAutoComplete","Promise","resolve","reject","callbackName","params","window","autocompleteWindow","Boolean","google","maps","places","isAutocompleteWindow","loadScript","catch","e","instance","_apiKey","getAutocompleteService","_autocompletePromise","then","googleMapsSdk","AutocompleteService","Error","getPlacesServices","document","createElement","_placesPromise","PlacesService","fields","nextElement","googleAutocompleteService","service","getDetails","placeId","result","focus","input","isAutocompleteEnabled","resetAutocomplete","setAutocomplete","setItems","autoComplete","componentRestrictions","getPlacePredictions","results","setState","toAutocompleteItems","description","structured_formatting","main_text","matched_substrings","place_id","placeholder","supportedCountries","parentFieldName","disabledFields","fieldName","labelContent","useMemo","TranslatedString","getAddressFormFieldLabelId","renderInput","useCallback","renderLabel","FormField","LABEL","company","firstName","lastName","phone","AUTOCOMPLETE","PLACEHOLDER","AUTOCOMPLETE_FIELD_NAME","containerRef","createRef","handleDynamicFormFieldChange","memoize","syncNonFormikValue","handleAutocompleteChange","handleAutocompleteSelect","place","autocompleteValue","setFieldValue","address","forIn","formFields","dateFormFieldNames","filter","custom","fieldType","DynamicFormFieldType","componentDidMount","current","querySelector","countriesWithAutocomplete","googleMapsApiKey","onAutocompleteToggle","shouldShowSaveAddress","Fieldset","ref","addressFieldName","translatedPlaceholderId","DynamicFormField","autocomplete","extraClass","inputId","getPlaceholderValue","CheckboxFormField","language","default","translate","Component","withLanguage","AddressForm","selectedAddress","useState","ariaExpanded","setAriaExpanded","href","onClick","preventDefault","StaticAddress","handleSelectAddress","newAddress","onSelectAddress","isEqualAddress","handleUseNewAddress","onUseNewAddress","addresses","DropdownTrigger","dropdown","AddressSelectMenu","AddressSelect","isEqual","normalizeAddress","isSameState","omit","customFields","isValidCustomerAddress","some","customerAddress","mapAddressFromFormValues","formValues","shouldSaveAddress","isFloatingLabelEnabled","checkoutSettings","features","mapCustomFormFieldsFromFormValues","customFieldsObject","fieldValue","isDate","padMonth","padStart","getMonth","toString","padDay","getDate","getFullYear","fieldId","hidden","maxLength","legend","getPreselectedPayment","checkout","payments","payment","providerId","getShippableItemsCount","cart","lineItems","physicalItems","addedByPromotion","shouldShow","handleClick","event","handleClose","nativeEvent","handleOpen","addEventListener","removeEventListener","componentWillUnmount","placement","Manager","Reference","Popper","modifiers","hide","enabled","flip","preventOverflow","style","width","zIndex","defaultProps","additionalClassName","disabled","renderField","checked","errorId","kebabCase","forwardRef","rest","createInjectHoc","LocaleContext","displayNamePrefix","pickProps","Input","date","options","inputFormat","handleDateChange","dateValue","target","IconChevronDown","optionValue","CheckboxInput","Array","isArray","calendarClassName","dateFormat","maxDate","max","Date","minDate","min","placeholderText","toUpperCase","popperClassName","selected","TextArea","TextInput","onSelectedAll","onSelectedNone","handleSelectAllClick","handleSelectNoneClick","MultiCheckboxFormField","form","values","errors","remove","handleSelectAll","checkedValues","getIn","difference","forEach","val","handleSelectNone","handleInputChange","FormFieldContainer","hasError","FormFieldError","renderProps","pick","FieldArray","secret","fieldLabel","required","fieldInputId","isFloatingLabelSupportedFieldType","labelComponent","dynamicFormFieldType","helperLabel","rows","height","viewBox","xmlns","d"],"sourceRoot":""}